<org.opsli.plugins.redis.conf.RedisPluginConfig: void <clinit>()>-><org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: void <init>(java.lang.Class)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.msg.CoreMsg: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.security.utils.WebUtils: void renderErrorByAlert(javax.servlet.http.HttpServletResponse,java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.Vector: java.lang.Object get(int)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getPackageName()>
<org.opsli.core.security.service.UsernameUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.properties.AuthProperties getAuthProperties()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: void <init>()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: boolean containsInterceptor(org.apache.ibatis.session.Configuration,org.apache.ibatis.plugin.Interceptor)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder: java.util.List access$600(org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.redis.RedisPlugin: void <init>()>
<org.opsli.plugins.generator.SqlSyncUtil: void execute(org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel)>-><org.opsli.plugins.generator.enums.DataBaseType: org.opsli.plugins.generator.enums.DataBaseType getDbType(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.properties.RedissonProperties: org.opsli.plugins.redisson.enums.RedissonType getType()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String)>
<org.opsli.core.utils.OptionsUtil: void <init>()>-><org.opsli.modulars.system.options.web.SysOptionsRestController: void <init>()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.menu.MenuFullModel: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><java.lang.Class: int getModifiers()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><com.baomidou.mybatisplus.extension.service.IService: boolean update(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><com.google.common.cache.LocalCache$LocalManualCache: java.lang.Object get(java.lang.Object,java.util.concurrent.Callable)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateMobile(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder mobile(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.commons.beanutils.BeanUtils: void populate(java.lang.Object,java.util.Map)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime date()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.waf.util.XSSFilterKit: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.DBCellRecord: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getMenuName()>
<org.opsli.core.utils.OptionsUtil: org.opsli.api.wrapper.system.options.OptionsModel getOptionByCode(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.net.NetUtil: java.lang.String getMultistageReverseProxyIp(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.ResourceBundle$1: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><cn.hutool.core.text.CharSequenceUtil: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.convert.Convert: java.lang.String toStr(java.lang.Object)>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<synthetic.method.RoleMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.sms.msg.SmsMsgCodeEnum: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><org.opsli.common.thread.AsyncProcessor: void executeTaskAndCallback(java.util.concurrent.Callable,java.util.function.Function)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String getDefaultPass()>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.security.provider.MobilePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks getDefaultPostAuthenticationChecks()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.ApiPathProperties: java.lang.String getGlobalPrefix()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getTemplateId()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByEmail(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: long count(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setOrgIds(java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode: java.lang.String toString()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createDefThreadPool(java.lang.String)>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><cn.hutool.json.JSONArray: java.lang.Object get(int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFields(java.lang.Class)>-><cn.hutool.json.JSONUtil: boolean isNull(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$1: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void <init>(org.opsli.modulars.system.user.mapper.UserMapper,org.opsli.modulars.system.role.service.IRoleService,org.opsli.modulars.system.user.service.IUserRoleRefService,org.springframework.security.crypto.password.PasswordEncoder)>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: void <init>()>
<org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.CacheProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.CacheProperties: java.lang.String getPrefix()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>-><java.lang.System: long currentTimeMillis()>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.plugins.security.provider.UsernamePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchOneself()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper setMsg(java.lang.String)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.modulars.generator.template.wrapper.GenTemplateModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.msg.TokenMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.aggregates.CFRecordsAggregate: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.jwt.RegisteredPayload: cn.hutool.jwt.RegisteredPayload setIssuedAt(java.util.Date)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>-><java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper getQueryWrapper()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getIcon()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserIdByToken(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.common.thread.AsyncProcessor: void executeTaskAndCallback(java.util.concurrent.Callable,java.util.function.Function)>-><org.opsli.common.thread.AsyncProcessor$1: void <init>(org.opsli.common.thread.AsyncProcessor,java.util.function.Function)>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$1: java.lang.Object next()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry: java.lang.Object anyRequest()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.properties.WafProperties: boolean isXssFilter()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto: org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder builder()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper saveMenuByFull(org.opsli.api.wrapper.system.menu.MenuFullModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isCitizenId(java.lang.CharSequence)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.sun.activation.registries.MimeTypeEntry: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: void <init>()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.util.unit.DataSize: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String,java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.lang.Boolean: boolean booleanValue()>
<org.opsli.modulars.system.logs.event.LoginLogEvent: void <init>(org.opsli.modulars.system.user.service.IUserService,org.opsli.modulars.system.logs.service.ILoginLogsService)>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<synthetic.method.GenTemplateDetailMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.web.multipart.MultipartFile: org.springframework.core.io.Resource getResource()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getUsername()>
<org.opsli.core.utils.TenantUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getParentId()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean isCredentialsNonExpired(java.lang.String,int)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String subBetween(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: void setDictValue(java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.AttrPtg: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.core.msg.TokenMsg: java.lang.String getMessage()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.DistributedLockUtil: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper transformT2M(org.opsli.core.base.entity.BaseEntity)>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.alibaba.excel.write.builder.ExcelWriterSheetBuilder: com.alibaba.excel.write.metadata.WriteSheet build()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: void hAllPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.Map)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String addPrefixIfNot(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.logging.log4j.spi.Provider: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.plugins.generator.exception.GeneratorException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.common.utils.OutputStreamUtil: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
<org.opsli.core.utils.MenuUtil: void <init>()>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.common.utils.CheckStrength: int countLetter(java.lang.String,int)>-><java.lang.String: int length()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.redis.connection.RedisClusterNode: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer authenticationEntryPoint(org.springframework.security.web.AuthenticationEntryPoint)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Web: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getType()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.plugins.oss.OssStorageFactory: org.opsli.plugins.oss.service.OssStorageService getHandle()>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$findMenuTree$1(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getUrl()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.plugins.generator.enums.DataBaseType getDbType()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDriverClassName()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.Boolean getEnable()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.dict.DictModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getTenantId()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void <clinit>()>-><org.opsli.plugins.generator.strategy.create.CodeBuilder: void <init>(java.lang.String,int)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getUsername()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.lang.Throwable: java.lang.String getMessage()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.general.StartPrint: java.lang.String getBasePath()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder msg(java.lang.String)>
<org.opsli.common.utils.Props: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByBean(java.lang.Object)>-><cn.hutool.core.bean.BeanUtil: boolean isBean(java.lang.Class)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>-><java.lang.Object: void <init>()>
<org.opsli.core.eventbus.AbstractSpringEventBus: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Map)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findAllOptions()>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: void <init>()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.lettuce.core.RedisURI: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.util.zip.ZipOutputStream: void closeEntry()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object orderByDesc(java.lang.Object)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getCodeTitle()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.waf.msg.WafMsg: java.lang.String getMessage()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: java.util.List getFiles(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.gson.internal.bind.TypeAdapters$34: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.Integer getSortNo()>
<org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel build()>-><org.opsli.plugins.security.UserDetailModel: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.List)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generateAccessToken(org.opsli.core.base.dto.LoginUserDto,java.lang.String,java.lang.Integer)>-><org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.exception.RedisPluginException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.plugins.security.utils.IpaddrUtil: void <init>()>-><java.lang.Object: void <init>()>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String getAddress()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long increment(java.lang.String,long)>-><org.opsli.plugins.redis.exception.RedisPluginException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.VerificationCodeUtil: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.context.Context4: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.conf.SecurityConfig: void <init>(org.opsli.plugins.security.properties.AuthProperties,org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl,org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl,org.opsli.core.security.service.UidUserDetailDetailServiceImpl)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><kotlin.Pair: java.lang.String toString()>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void callEntry_synthetic()>
<org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.ApiPathProperties: java.lang.String getGlobalPrefix()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.msg.TokenMsg: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.area.service.impl.SysAreaServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.SysAreaMapperImpl getSysAreaMapperImpl()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: void <init>()>-><org.opsli.modulars.system.user.web.UserRoleRefRestController: void <init>()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getComponent()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Date: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.CalcModeRecord: java.lang.String toString()>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generateAccessToken(org.opsli.core.base.dto.LoginUserDto,java.lang.String,java.lang.Integer)>-><cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.opsli.common.utils.RateLimiterUtil: void removeIp(java.lang.String)>-><com.google.common.cache.LocalCache$LocalManualCache: void invalidate(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String,int)>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>
<org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>-><java.util.ArrayList: int size()>
<org.opsli.common.thread.AsyncProcessExecutorFactory: org.opsli.common.thread.AsyncProcessExecutor createWaitExecutor()>-><org.opsli.common.thread.AsyncProcessExecutorByWait: void <init>()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.common.exception.WafException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper importTables(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder loginIp(java.lang.String)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: boolean refreshUserMenus(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>-><cn.hutool.jwt.JWTValidator: cn.hutool.jwt.JWTValidator of(java.lang.String)>
<org.opsli.core.utils.MenuUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.tools.oss.web.OssRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.LocalDate: java.lang.String toString()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.bean.BeanUtil: boolean isBean(java.lang.Class)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.core.api.ApiVersionCondition: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.tenant.TenantModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.generator.importable.service.MySQLDatabaseTableServiceImpl: void <clinit>()>-><org.opsli.common.utils.Props: void <init>(java.lang.String)>
<org.opsli.modulars.system.login.event.BadCredentialsEvent: void <init>(org.opsli.plugins.redis.RedisPlugin)>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper sync(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.String: java.lang.String substring(int,int)>
<org.opsli.core.utils.UserUtil: boolean refreshUserRoles(java.lang.String)>-><org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>
<org.opsli.modulars.system.logs.service.impl.OperationLogServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: void <init>()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.plugins.generator.enums.DataBaseType: org.opsli.plugins.generator.enums.DataBaseType[] values()>-><java.lang.Object: java.lang.Object clone()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.expression.spel.ast.NullLiteral: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.EOFRecord: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.JSON: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.common.utils.RateLimiterUtil: java.util.Map lambda$enter$0(java.lang.Double,java.lang.String)>-><com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.plugins.excel.exception.ExcelPluginException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$LoadingMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.SubList: java.lang.Object get(int)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.MBeanParameterInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.excel.read.metadata.ReadSheet: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.ttl.TtlRunnable: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateTime(java.util.Date)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$SingletonList: boolean removeIf(java.util.function.Predicate)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByUsername(java.lang.String)>-><org.opsli.modulars.system.SystemMsg: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: java.lang.String get(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><cn.hutool.core.text.CharSequenceUtil: boolean isAllNotEmpty(java.lang.CharSequence[])>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getDescription()>
<org.opsli.core.utils.UserTokenUtil: org.opsli.common.exception.TokenException lambda$getTenantIdByToken$3()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String getSystemName()>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: void <init>()>-><org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory: void <init>()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Long sRemove(java.lang.String,java.lang.Object[])>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: org.opsli.core.persistence.Page$PageData getPageData()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder email(java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getPermissions()>
<org.opsli.core.autoconfigure.properties.EncryptProperties: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthException: int hashCode()>-><java.lang.Object: int hashCode()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getById(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.core.status.StatusBase: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.commons.beanutils.converters.ConverterFacade: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.common.utils.IPUtil: java.lang.String getClientAddressBySingle(javax.servlet.http.HttpServletRequest)>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthException: int hashCode()>-><java.lang.Integer: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: org.opsli.core.persistence.Page$PageData getPageData()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hpsf.Section: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>-><org.opsli.core.utils.UserTokenUtil: java.lang.String getUserIdByToken(java.lang.String)>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginCodeModel,org.opsli.modulars.system.login.dto.LoginCodeModel)>-><java.lang.Enum: int ordinal()>
<java.util.AbstractSet: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum: void <clinit>()>-><org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum: void <init>(java.lang.String,int,java.lang.String)>
<register-finalize <org.opsli.common.enums.VerificationTypeEnum: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.plugins.oss.OssStorageFactory: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><java.lang.Class: java.lang.Object newInstance()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><org.redisson.iterator.RedissonListIterator: java.lang.Object next()>
<org.opsli.core.utils.SpringContextHolder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getParentId()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.filters.aspect.ValidatorAop: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.alibaba.excel.read.builder.ExcelReaderSheetBuilder: com.alibaba.excel.read.metadata.ReadSheet build()>
<org.opsli.core.eventbus.SpringEventBus: void addConsumer(java.lang.Object)>-><com.google.common.eventbus.EventBus: void register(java.lang.Object)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Web getWeb()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findColumns(java.lang.String)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.modulars.system.role.web.RoleRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.options.OptionsModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.core.autoconfigure.properties.GlobalProperties getGlobalProperties()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getTables()>-><org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables()>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.MemAreaPtg: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><java.lang.Long: long longValue()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfo(javax.servlet.http.HttpServletRequest)>-><org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.SecurityErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findListByCus(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.security.authentication.AfterAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$1: java.lang.Object next()>
<org.opsli.core.filters.interceptor.MybatisAutoFillInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><springfox.documentation.builders.ParameterBuilder: springfox.documentation.builders.ParameterBuilder required(boolean)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String[] getParameterValues(java.lang.String)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String filterParamString(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.generator.importable.service.MySQLDatabaseTableServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.generator.table.service.impl.GenTableServiceImpl getGenTableServiceImpl()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void instance(com.github.pagehelper.PageInfo,java.util.List)>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.opsli.plugins.redis.scripts.RedisScriptCache loadScripts()>-><org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum: java.lang.String getPath()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel: java.lang.String getFileContent()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.lang.Object get(int)>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.Throwable: java.lang.String getMessage()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ddf.EscherSimpleProperty: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.BlankRecord: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createDefThreadPool(java.lang.String)>-><java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>
<org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>
<org.opsli.core.general.StartPrint: org.opsli.core.general.StartPrint getInstance()>-><org.opsli.core.general.StartPrint$StartPrintInner: org.opsli.core.general.StartPrint access$000()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String getDefaultPass()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getTables()>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.invoke.LambdaForm$Name: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.NameRecord: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuFullModel: void setModuleName(java.lang.String)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder timestamp(long)>
<org.opsli.common.utils.UniqueStrGeneratorUtils: void <clinit>()>-><org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.CtClass: java.lang.Class toClass()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.read.builder.ExcelReaderBuilder read(java.io.InputStream,java.lang.Class,com.alibaba.excel.read.listener.ReadListener)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultAuth()>-><springfox.documentation.service.SecurityReference: void <init>(java.lang.String,springfox.documentation.service.AuthorizationScope[])>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.logs.service.impl.OperationLogServiceImpl: void <init>()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.AbstractEscherHolderRecord: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void pageHelperBegin()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><org.opsli.common.utils.CheckStrength: int countLetter(java.lang.String,int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByEmail(java.lang.String)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByEmail(java.lang.String)>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: java.lang.Object get(int)>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getMenuName()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isNotEmpty(java.lang.CharSequence)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.modulars.generator.template.service.impl.GenTemplateServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.GenTemplateMapperImpl getGenTemplateMapperImpl()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ValueOperations opsForValue()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><com.baomidou.mybatisplus.extension.service.IService: boolean update(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.ZonedDateTime: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.redisson.misc.RedisURI: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayList$SubList: int size()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.plugins.security.eventbus.AbstractSpringSecuritySecurityEventBus: void scanConsumer(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: java.util.Map getBeansOfType(java.lang.Class)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.core.filters.aspect.ValidatorAop: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.oss.exception.StoragePluginException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.security.utils.WebUtils: void renderErrorByAlert(javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.ServletResponseWrapper: void setContentType(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.WeekFields: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getSubName()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void setPassWord(java.lang.String)>
<org.opsli.common.enums.DictType: org.opsli.common.enums.DictType[] values()>-><java.lang.Object: java.lang.Object clone()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.generator.template.service.impl.GenTemplateDetailServiceImpl: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.opsli.common.msg.ValidatorMsg: void setFieldName(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean canEqual(java.lang.Object)>
<org.opsli.core.utils.TenantUtil: java.lang.Object lambda$getTenant$0(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.opsli.core.holder.UserContextHolder: void setToken(java.lang.String)>-><com.alibaba.ttl.TransmittableThreadLocal: java.lang.Object get()>
<synthetic.method.UserMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.filters.interceptor.MybatisCryptoInterceptor: void <init>(org.opsli.core.autoconfigure.properties.EncryptProperties)>
<org.opsli.plugins.security.provider.EmailCodeAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.service.LoadUserDetailServiceFactory getLoadUserDetailServiceFactory()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getUserAgent()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findAllOptions()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.net.httpserver.HttpConnection: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.modulars.system.login.event.BadCredentialsEvent: void <init>(org.opsli.plugins.redis.RedisPlugin)>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String getErrorMessage()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: void <init>()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDriverClassName()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.enums.CodeType: void <clinit>()>-><org.opsli.plugins.generator.enums.CodeType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><com.google.common.util.concurrent.RateLimiter: com.google.common.util.concurrent.RateLimiter create(double)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxReplay$SizeBoundReplayBuffer$Node: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getParameter(java.lang.String)>-><javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper getTenantByUsable(java.lang.String)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer disable()>
<org.opsli.core.persistence.Page$PageData: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByCode(java.lang.String)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getTenantIdByToken(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><cn.hutool.core.text.CharSequenceUtil: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$LoadingMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.RefModeRecord: java.lang.String toString()>
<org.opsli.core.utils.JWTBizUtil: void verifyBySign(java.lang.String,java.lang.String)>-><java.lang.String: byte[] getBytes()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.builders.RequestHandlerSelectors: java.util.function.Predicate withMethodAnnotation(java.lang.Class)>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: void <init>()>-><org.opsli.modulars.system.user.web.UserOrgRefRestController: void <init>()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getParentIds()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String prependIfMissing(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence[])>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.oss.OssStorageFactory: void <init>(java.lang.String,int)>-><org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>
<org.opsli.plugins.waf.properties.WafProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void main(java.lang.String[])>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><springfox.documentation.service.Parameter: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.common.exception.TokenException lambda$getUserBySource$1()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.NamedThreadLocal: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.ast.FieldKeyBuilder$FieldKey: java.lang.String toString()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByMobile(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper transformT2M(org.opsli.core.base.entity.BaseEntity)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: boolean validationField(java.lang.String)>-><cn.hutool.core.util.ReflectUtil: boolean hasField(java.lang.Class,java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void <init>()>-><org.opsli.modulars.system.menu.web.MenuRestController: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: void <init>()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><com.alibaba.fastjson.support.config.FastJsonConfig: com.alibaba.fastjson.serializer.SerializerFeature[] getSerializerFeatures()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.common.utils.CheckStrength$LEVEL: java.lang.String getCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void instance(com.github.pagehelper.PageInfo,java.util.List)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: void setRateLimiter(com.google.common.util.concurrent.RateLimiter)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.LinkedList: java.lang.Object get(int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.alibaba.fastjson.JSONArray: int size()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.common.exception.TokenException lambda$getUser$0()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<javassist.bytecode.AnnotationDefaultAttribute: javassist.bytecode.annotation.MemberValue getDefaultValue()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Boolean: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.wrapper.system.user.UserPassword: void setUserId(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.plugins.security.exception.AuthException: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder code(int)>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean delete(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler: void handle(java.lang.Object)>-><org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.AbstractMap: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByMobile(java.lang.String)>-><org.opsli.modulars.system.SystemMsg: java.lang.Integer getCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.cache.msg.EhCacheMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean refreshUserRoles(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.security.provider.MobileCodeAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePassword(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.common.utils.OutputStreamUtil: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.String: byte[] getBytes()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: org.opsli.plugins.generator.strategy.create.CodeBuilder[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.properties.AuthProperties getAuthProperties()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.LinkedList: java.lang.Object get(int)>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.Integer getExportMaxCount()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void <init>(org.opsli.plugins.redis.RedisPlugin)>
<org.opsli.plugins.security.SecurityConfig: org.springframework.security.crypto.password.PasswordEncoder passwordEncoder()>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: void <init>()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.lang.Integer: int intValue()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><io.netty.util.collection.IntObjectHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.http.pool.RouteSpecificPool: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.redisson.Redisson: org.redisson.api.RedissonClient create(org.redisson.config.Config)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.core.date.DateTime: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth$Login getLogin()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.MemFuncPtg: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getRemark()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getType()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1UTCTime: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateAvatar(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.entity.SysUser: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.api.wrapper.system.tenant.TenantModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getUserName()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.alibaba.excel.ExcelReader: void finish()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.lang.Throwable: java.lang.String getMessage()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getEmail()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector: java.util.Iterator iterator()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.plugins.excel.listener.BatchExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>-><org.opsli.plugins.excel.listener.BatchExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper$StateCodeEnum: void <clinit>()>-><org.opsli.api.base.result.ResultWrapper$StateCodeEnum: void <init>(java.lang.String,int,int,java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.common.utils.DefPatternPool: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.ehcache.impl.config.SizedResourcePoolImpl: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.nodes.Tag: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<register-finalize <org.opsli.core.utils.JWTBizUtil$Tag: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isUrl(java.lang.CharSequence)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.calendar.Era: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.general.StartPrint: void successPrint()>-><org.opsli.core.general.StartPrint: java.lang.String getBasePath()>
<org.opsli.core.listener.ApplicationFailedEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationFailedEvent)>-><org.opsli.core.general.StartPrint: org.opsli.core.general.StartPrint getInstance()>
<org.opsli.core.utils.OrgUtil: void lambda$null$4(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.core.persistence.Page: org.opsli.core.persistence.Page$PageData getPageData()>-><org.opsli.core.persistence.Page$PageData: void setRows(java.util.List)>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.alibaba.fastjson.JSONArray: int size()>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.generator.exception.GeneratorException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.handler.LoginAccessDeniedListener: java.lang.Class getModelType()>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.DSFRecord: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.opsli.core.holder.UserContextHolder: void clear()>-><com.alibaba.ttl.TransmittableThreadLocal: void remove()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.OffsetDateTime: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.core.api.ApiVersionCondition: java.lang.Object combine(java.lang.Object)>-><org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition combine(org.opsli.core.api.ApiVersionCondition)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.core.lang.tree.Tree: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<register-finalize <org.opsli.common.msg.CommonMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void <init>(org.opsli.plugins.security.properties.AuthProperties,org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl,org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl,org.opsli.core.security.service.UidUserDetailDetailServiceImpl)>-><synthetic.method.SingletonFactory: org.opsli.core.security.service.UidUserDetailDetailServiceImpl getUidUserDetailDetailServiceImpl()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.api.wrapper.system.user.ToUserPassword: void setPasswordLevel(java.lang.String)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.IsoFields$Field$3: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><io.netty.util.collection.IntObjectHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.opsli.core.cache.SecurityCache: void hAllPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.Map)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.ApiSelectorBuilder select()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: java.lang.String get(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean updateUser(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.redis.msg.RedisMsg: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.login.web.LoginByAccountRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getTenantId()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.lang.Validator: boolean isIpv4(java.lang.CharSequence)>
<org.opsli.modulars.generator.template.wrapper.GenTemplateModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><cn.hutool.core.util.ObjectUtil: java.lang.Object cloneIfPossible(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><java.lang.Object: java.lang.Class getClass()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.api.ApiVersionCondition: void <init>(int)>-><java.lang.Object: void <init>()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$1: boolean hasNext()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: org.opsli.plugins.redisson.enums.RedissonType getType()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><com.google.common.util.concurrent.Striped$PowerOfTwoStriped: java.lang.Object get(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>-><org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.springframework.data.redis.core.RedisTemplate redisTemplate()>-><org.springframework.data.redis.core.RedisTemplate: void afterPropertiesSet()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.Integer getPort()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.HashedWheelTimer$HashedWheelTimeout: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.IndexRecord: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.conf.WebQueryConf: boolean hashKey(java.lang.String)>-><java.util.HashMap: boolean containsKey(java.lang.Object)>
<org.opsli.common.api.ResultVoMap: org.opsli.common.api.ResultVoMap put(java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor mybatisPlusInterceptor()>-><com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor: void addInnerInterceptor(com.baomidou.mybatisplus.extension.plugins.inner.InnerInterceptor)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setIzTenantAdmin(java.lang.String)>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.Enum: java.lang.String name()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.invoke.LambdaForm: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder builder()>
<org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: void <init>(org.opsli.core.persistence.querybuilder.chain.QueryBuilderChain)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByUsername(java.lang.String)>-><org.opsli.modulars.system.SystemMsg: java.lang.Integer getCode()>
<org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.dict.DictDetailModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.CountryRecord: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.serializer.SerialContext: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.io.InputStream: int read(byte[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.conf.SwaggerConfig: void <init>(com.fasterxml.classmate.TypeResolver)>
<org.opsli.core.utils.UserUtil: boolean refreshUserMenus(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><java.util.Vector: boolean isEmpty()>
<org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>-><org.opsli.api.base.result.ResultWrapper: int getCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getMobile()>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.cache.conf.EhCacheConfig: void <init>()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.SubList: java.lang.Object get(int)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateAvatar(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.entity.SysUser: void setAvatar(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.plugins.generator.SqlSyncUtil: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.nio.ByteOrder: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.SecurityConfigurerAdapter: org.springframework.security.config.annotation.SecurityBuilder and()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.util.ObjectIdentifier: java.lang.String toString()>
<register-finalize <org.opsli.common.enums.ExcelOperate: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><org.opsli.common.utils.MessUtil: java.util.List getPlaceholderList(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object[])>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: com.google.common.util.concurrent.RateLimiter getRateLimiter()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.HashMap: void <init>()>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><org.opsli.common.thread.AsyncProcessExecutorFactory: org.opsli.common.thread.AsyncProcessExecutor createWaitExecutor()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object[])>
<org.opsli.core.utils.OrgUtil: void lambda$null$3(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.common.thread.AsyncProcessor$1: void onSuccess(java.lang.Object)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>-><cn.hutool.core.util.ReflectUtil: java.lang.reflect.Field[] getFields(java.lang.Class)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.common.utils.FieldUtil: java.lang.String underlineToHump(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.asm.Label: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.Ref3DPtg: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><com.github.pagehelper.PageInfo: void <init>(java.util.List)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: com.fasterxml.jackson.databind.cfg.ContextAttributes withPerCallAttribute(java.lang.Object,java.lang.Object)>-><org.opsli.common.api.ResultVoMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: org.opsli.plugins.excel.ExcelPlugin access$200()>
<javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getParameter(java.lang.String)>
<org.opsli.common.utils.IPUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void init()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.utils.SpringContextHolder: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getJavaFieldTypesBySafety()>-><org.opsli.modulars.generator.importable.ImportTableUtil: java.util.Map getJavaFieldTypesBySafety()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper build()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.opsli.plugins.security.UserDetailModel: java.util.Collection getAuthorities()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List sortWrappers(java.util.List)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<synthetic.method.SysOptionsMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.security.web.DefaultSecurityFilterChain: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: void <init>(com.fasterxml.classmate.TypeResolver)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long sSize(java.lang.String)>-><org.springframework.data.redis.core.DefaultSetOperations: java.lang.Long size(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(org.opsli.api.base.warpper.ApiWrapper)>-><com.baomidou.mybatisplus.extension.service.IService: java.lang.Object getById(java.io.Serializable)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handlePath(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto()>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.logs.service.impl.LoginLogsServiceImpl: void <init>()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Object get(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean canEqual(java.lang.Object)>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer disable()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonLock redissonLock(org.opsli.plugins.redisson.RedissonManager)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><cn.hutool.json.JSONObject: java.util.Set keySet()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: java.lang.String toString()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.handler.SecurityErrorHandler: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.compiler.ast.ASTList: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType getTypeByStr(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><synthetic.method.UserMapperImpl: boolean updatePassword(org.opsli.api.wrapper.system.user.UserPassword)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$handleOrgIdGroupCondition$5(java.lang.String,java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void clearCache(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void <init>()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object orderByDesc(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><cn.hutool.core.map.MapUtil: boolean isNotEmpty(java.util.Map)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder timestamp(long)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.ServletResponseWrapper: void setContentType(java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>-><java.lang.Double: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<org.bouncycastle.asn1.ASN1Integer: org.bouncycastle.asn1.ASN1Integer getInstance(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><org.opsli.api.wrapper.system.menu.MenuModel: void setSortNo(java.lang.Integer)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.modulars.test.service.impl.TestServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByUsername(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.data.redis.core.RedisTemplate: java.lang.Boolean expireAt(java.lang.Object,java.util.Date)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.objectweb.asm.Label: java.lang.String toString()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.ibatis.type.TypeReference: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setCreateTime(java.util.Date)>
<org.opsli.core.utils.UserUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: void setTypeCode(java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.wrapper.system.user.ToUserPassword: void setNewPassword(java.lang.String)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.util.DerValue: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: void <clinit>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.redisson.conf.RedissonConfig: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: org.springframework.security.authentication.AuthenticationManager authenticationManager()>-><org.springframework.security.authentication.ProviderManager: void <init>(java.util.List)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean canEqual(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.utils.OrgUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.security.provider.MobileCodeAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks getDefaultPreAuthenticationChecks()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><springfox.documentation.builders.ParameterBuilder: springfox.documentation.builders.ParameterBuilder name(java.lang.String)>
<org.opsli.plugins.security.provider.EmailPasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: void <init>()>
<org.opsli.common.utils.MessUtil: java.util.List getPlaceholderList(java.lang.String)>-><java.util.regex.Matcher: boolean find()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.ArrayList: int size()>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper()>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findListByParentId(java.lang.String)>-><org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum: org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.opsli.plugins.redis.exception.RedisPluginException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFields(java.lang.Class)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.ibatis.parsing.XNode: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Vector: int size()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.listener.ExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>-><org.opsli.plugins.excel.listener.ExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.ThreadGroup: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.UserUtil: boolean updateUser(org.opsli.api.wrapper.system.user.UserModel)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.common.utils.FieldUtil: java.lang.String getFileName(org.opsli.common.utils.FieldUtil$SFunction)>-><java.lang.String: java.lang.String toLowerCase()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getRequestToken(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<org.opsli.api.wrapper.system.dict.DictModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayList: int size()>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void <init>()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.Package: java.lang.String getName()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.modulars.test.web.TestRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultAuth()>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<register-finalize <org.opsli.core.msg.TokenMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.bootstrap.AbstractBootstrap: java.lang.String toString()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setCreateTime(java.util.Date)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.google.common.collect.ImmutableList$SubList: java.lang.Object get(int)>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.sms.exceptions.SmsException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder: org.opsli.core.base.controller.BaseRestController$ExcelExportCache build()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getParentId()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><java.util.HashMap: java.util.Set entrySet()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: java.lang.Object get(int)>
<org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void pub(org.opsli.common.utils.FieldUtil$SFunction,java.lang.String)>-><org.opsli.common.utils.FieldUtil: java.lang.String getFileName(org.opsli.common.utils.FieldUtil$SFunction)>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: java.lang.String toString()>
<org.opsli.common.enums.DictType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Vector: java.lang.Object get(int)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><org.opsli.core.msg.TokenMsg: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>
<org.opsli.api.base.warpper.ApiWrapper: void <init>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.Object: java.lang.Class getClass()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>-><cn.hutool.core.util.ReflectUtil: java.lang.Object getFieldValue(java.lang.Object,java.lang.reflect.Field)>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.security.JwtConstants: void <clinit>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.Scannable$Attr$2: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.CtClass: void addField(javassist.CtField)>
<org.opsli.core.utils.UserUtil: boolean updateUser(org.opsli.api.wrapper.system.user.UserModel)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.DictDetailMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.deser.impl.CreatorCandidate: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.ehcache.shadow.org.terracotta.context.MutableTreeNode: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.common.exception.WafException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.conf.CorsConfig: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.modulars.generator.template.service.impl.GenTemplateDetailServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.GenTemplateDetailMapperImpl getGenTemplateDetailMapperImpl()>
<org.opsli.plugins.redis.scripts.RedisScriptCache: boolean putScript(org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum,java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByMobile(java.lang.String)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByMobile(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper build()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.io.ByteArrayOutputStream: void <init>()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper transformT2M(org.opsli.core.base.entity.BaseEntity)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getTenantIdByToken()>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Formatter$FixedString: java.lang.String toString()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.utils.Props: void <init>(java.lang.String)>-><org.opsli.common.utils.Props: void load()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.generator.SqlSyncUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.cglib.core.ClassInfo: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean canEqual(java.lang.Object)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.plugins.security.utils.WebUtils: void renderErrorByAlert(javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.ServletResponseWrapper: java.io.PrintWriter getWriter()>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.boot.ansi.AnsiStyle: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$1: boolean hasNext()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getFieldTypes()>-><org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List getFieldTypes()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><java.util.LinkedHashMap: void <init>()>
<org.opsli.api.wrapper.gentest.carinfo.TestCarModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.alibaba.excel.read.builder.ExcelReaderBuilder: com.alibaba.excel.ExcelReader build()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.json.JSONArray: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.core.msg.CoreMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void <init>(org.opsli.core.security.service.UidUserDetailDetailServiceImpl)>-><org.springframework.web.filter.OncePerRequestFilter: void <init>()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String getAddress()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.filters.aspect.UserCachingOperationNameGenerator: void <init>()>
<org.opsli.common.thread.ThreadPoolFactory: void <clinit>()>-><java.lang.Runtime: java.lang.Runtime getRuntime()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.expression.spel.standard.Token: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.stat.Token: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder data(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.Boolean getEnable()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.GlobalPropertiesUtil: void <init>()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.IsoFields$Field$2: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByGif: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.redis.RedisPlugin: boolean del(java.lang.String)>
<org.opsli.plugins.security.provider.MobilePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks getDefaultPreAuthenticationChecks()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.cors.CorsConfiguration$OriginPattern: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: void <clinit>()>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: void <init>(java.lang.String,int,int,java.lang.String,java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.log.aspect.OperateLogAspect: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.sql.Timestamp: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getType()>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.role.RoleModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.options.service.impl.SysOptionsServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.SysOptionsMapperImpl getSysOptionsMapperImpl()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.HttpServletResponseImpl: void setHeader(java.lang.String,java.lang.String)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class)>-><org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: org.opsli.plugins.excel.ExcelPlugin access$200()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.UncalcedRecord: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.user.web.TestUserRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.gentest.user.service.impl.TestUserServiceImpl: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.AbstractSet: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.Integer getDictSort()>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$StateCodeEnum: int getCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.handler.codec.dns.DefaultDnsQuestion: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.support.config.FastJsonConfig: com.alibaba.fastjson.parser.Feature[] getFeatures()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.core.util.ReflectUtil: boolean hasField(java.lang.Class,java.lang.String)>
<javax.xml.ws.spi.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Generator getGenerator()>
<org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.awt.image.IndexColorModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.security.provider.EmailPasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks getDefaultPreAuthenticationChecks()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>-><cn.hutool.core.exceptions.ValidateException: void <init>(int,java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper save(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.UserDetailModel: java.lang.String getUsername()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.Map getJavaFieldTypesBySafety()>-><org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>
<org.opsli.plugins.generator.utils.EnjoyUtil: java.lang.String renderByStr(java.lang.String,com.jfinal.kit.Kv)>-><com.jfinal.template.Engine: com.jfinal.template.Engine use()>
<org.opsli.plugins.waf.util.SQLFilterKit: java.lang.String stripSQL(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Vector: java.util.Iterator iterator()>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxCreate$SerializedFluxSink: java.lang.String toString()>
<org.opsli.core.listener.ApplicationFailedEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationFailedEvent)>-><org.springframework.boot.context.event.ApplicationFailedEvent: java.lang.Throwable getException()>
<org.opsli.plugins.oss.OssStorageFactory: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.ObjectName: java.lang.String toString()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.plugins.security.exception.AuthException: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: java.lang.Integer getCode()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.oss.msg.OssMsg: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.tenant.service.impl.TenantServiceImpl: void <init>()>
<org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer csrf()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.plugins.cache.msg.EhCacheMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.plugins.generator.SqlSyncUtil: void execute(org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel)>-><org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel: java.lang.String getJdbcType()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><org.opsli.core.utils.VerificationCodeUtil: void checkEmailCode(java.lang.String,java.lang.String,java.lang.String)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.reflect.Parameter: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean matches(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>-><org.opsli.core.utils.DictUtil: java.util.List sortDictWrappers(java.util.List)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getDictValue()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.msg.GeneratorMsg: void <clinit>()>-><org.opsli.plugins.generator.msg.GeneratorMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.api.base.encrypt.EncryptModel: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.MMSRecord: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><cn.hutool.core.util.ClassUtil: java.util.Set scanPackageBySuper(java.lang.String,java.lang.Class)>
<org.opsli.plugins.generator.utils.EnjoyUtil: java.lang.String renderByStr(java.lang.String,com.jfinal.kit.Kv)>-><com.jfinal.template.Template: java.lang.String renderToString(java.util.Map)>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.security.service.EmailUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.properties.AuthProperties getAuthProperties()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.Integer getExportMaxCount()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.nio.ch.ExtendedSocketOption$1: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.RowRecord: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByUsername(java.lang.String)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByUserName(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper delAll(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.role.service.impl.RoleServiceImpl: void <init>()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void demoError()>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.core.utils.CaptchaUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.core.util.ReflectUtil: boolean hasField(java.lang.Class,java.lang.String)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$1: void <clinit>()>-><org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType[] values()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByEmail(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<org.opsli.plugins.generator.exception.GeneratorException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String hash(long,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>-><java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.tenant.web.TenantRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handlePath(java.lang.String)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.ArrayList: int size()>
<synthetic.method.GenTemplateMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.excel.listener.BatchExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: java.lang.Object getPrincipal()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getPackageName()>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>-><java.lang.Integer: int intValue()>
<org.opsli.core.filters.aspect.UserCachingOperationNameGenerator: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateAvatar(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setId(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Currency: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<javassist.bytecode.AnnotationDefaultAttribute: javassist.bytecode.annotation.MemberValue getDefaultValue()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.general.StartPrint$StartPrintInner: void <clinit>()>-><org.opsli.core.general.StartPrint: void <init>()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><java.lang.Class: java.lang.Package getPackage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.buffer.AbstractByteBufAllocator: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.stream.SpinedBuffer: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.persistence.Page: void pageHelperBegin(boolean)>-><com.github.pagehelper.page.PageMethod: com.github.pagehelper.Page startPage(int,int,boolean)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientAddressBySingle(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateTime(java.util.Date)>
<org.opsli.plugins.redis.RedisPlugin: java.util.Set zReverseRange(java.lang.String,long,long)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ZSetOperations opsForZSet()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>-><cn.hutool.core.convert.Convert: java.lang.Integer toInt(java.lang.Object)>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.opsli.plugins.excel.listener.ExcelListener: java.util.List getDataList()>
<org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[])>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxOnAssembly: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void pageHelperEnd()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.util.Optional of(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: com.google.common.util.concurrent.RateLimiter getRateLimiter()>
<org.opsli.plugins.security.provider.EmailPasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.service.LoadUserDetailServiceFactory getLoadUserDetailServiceFactory()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.AbstractList: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)>-><java.lang.Throwable: void printStackTrace()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.Collections$EmptyList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.InterfaceEndRecord: java.lang.String toString()>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: void <init>()>-><java.lang.Object: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.logs.service.impl.LoginLogsServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.waf.msg.WafMsg: java.lang.String getMessage()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.cache.msg.EhCacheMsg: java.lang.Integer getCode()>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder username(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.builders.PathSelectors: java.util.function.Predicate regex(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateMobile(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>
<org.opsli.plugins.excel.listener.BatchExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>-><java.util.ArrayList: int size()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getPassWord()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper: void <init>()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getDictName()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateAvatar(org.opsli.api.wrapper.system.user.UserAvatarModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setAvatar(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: java.lang.Class getEntityClass()>
<org.opsli.modulars.system.area.service.impl.SysAreaServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.LocalDateTime: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.stat.ParaToken: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginModel,org.opsli.modulars.system.login.dto.LoginModel)>-><java.lang.Enum: int ordinal()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.zip.ZipOutputStream: void close()>
<org.opsli.plugins.generator.enums.JavaType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.lang.Class getModelClass()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.core.listener.ApplicationReadyEventListener: void onApplicationEvent(org.springframework.context.ApplicationEvent)>-><org.opsli.core.listener.ApplicationReadyEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationReadyEvent)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.Date: long getTime()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper enableAccount(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.SimpleType: java.lang.String toString()>
<org.opsli.modulars.test.service.impl.TestServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.TestMapperImpl getTestMapperImpl()>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder: java.util.List access$800(org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.collection.IntObjectHashMap: java.lang.String toString()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.OptionsUtil: void <init>()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: com.jfinal.kit.Kv createKv(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><cn.hutool.core.date.DateUtil: java.lang.String now()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper enableAccount(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.RegularImmutableList: int size()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultAuth()>-><springfox.documentation.service.AuthorizationScope: void <init>(java.lang.String,java.lang.String)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getType()>
<org.opsli.core.utils.CryptoUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><cn.hutool.core.thread.ThreadUtil: boolean sleep(long)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiKey apiKey()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: void setModel(org.opsli.api.wrapper.system.dict.DictDetailModel)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: void setUserId(java.lang.String)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: com.jfinal.kit.Kv createKv(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><com.jfinal.kit.Kv: com.jfinal.kit.Kv set(java.lang.Object,java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String getErrorMessage()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.core.filters.aspect.ValidatorAop: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String[] getParameterValues(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.enums.ExcelOperate: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.service.ApiInfo build()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>
<org.opsli.core.api.ApiVersionCondition: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.excel.listener.ExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.ApiSelectorBuilder: springfox.documentation.spring.web.plugins.Docket build()>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByGif: com.wf.captcha.base.Captcha createCaptcha()>-><com.wf.captcha.GifCaptcha: void <init>(int,int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.before.LoginCodeModelVerifyCodeBeforeHandler: void <init>()>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyBySpec: com.wf.captcha.base.Captcha createCaptcha()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper sync(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper setMsg(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.extension.service.IService: long count(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>-><org.opsli.core.filters.interceptor.UserAuthInterceptor: void <init>()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByMobile(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean isCredentialsNonExpired(java.lang.String,int)>-><cn.hutool.core.codec.Base64: java.lang.String decodeStr(java.lang.CharSequence)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByUserName(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper transformT2M(org.opsli.core.base.entity.BaseEntity)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><com.wf.captcha.GifCaptcha: boolean out(java.io.OutputStream)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><cn.hutool.core.date.DateUtil: java.lang.String formatBetween(long)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.CtConstructor: void setBody(java.lang.String)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getHost()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void pageHelperEnd()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.io.ObjectStreamClass: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.invoke.SerializedLambda: java.lang.String getImplMethodName()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: void setQps(java.lang.Double)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String consistentShuffle(java.lang.String,java.lang.String)>-><java.lang.String: char[] toCharArray()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.HttpServletResponseImpl: javax.servlet.ServletOutputStream getOutputStream()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.eventbus.SpringEventBus: void <init>()>-><java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><com.github.pagehelper.PageInterceptor: void <init>()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setLoginIp(java.lang.String)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collection: boolean removeIf(java.util.function.Predicate)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.io.ByteArrayOutputStream: byte[] toByteArray()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERUTF8String: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><com.google.common.cache.LocalCache$LocalManualCache: void put(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.core.utils.CaptchaUtil: void validate(java.lang.String,java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><java.util.AbstractCollection: boolean isEmpty()>
<org.opsli.core.utils.ValidatorUtil$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.util.MultiValueMapAdapter: java.lang.String toString()>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getTenantId()>
<org.opsli.plugins.redis.lock.RedisLockImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder accessDenied()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.waf.conf.WafConfig: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>-><cn.hutool.core.exceptions.ValidateException: void <init>(int,java.lang.String)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth getAuth()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String getSystemStarterTime()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><java.lang.String: byte[] getBytes()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.TimeInterval timer()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><cn.hutool.json.JSONUtil: cn.hutool.json.JSONObject parseObj(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.google.common.collect.ImmutableList$SubList: java.lang.Object get(int)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getAuthorName()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder msg(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getRoleId()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.Object get(java.lang.Object)>
<org.apache.ibatis.reflection.wrapper.BeanWrapper: org.apache.ibatis.reflection.MetaObject instantiatePropertyValue(java.lang.String,org.apache.ibatis.reflection.property.PropertyTokenizer,org.apache.ibatis.reflection.factory.ObjectFactory)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><com.wf.captcha.base.Captcha: java.lang.String text()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest,boolean,boolean)>-><javax.servlet.http.HttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generateAccessToken(org.opsli.core.base.dto.LoginUserDto,java.lang.String,java.lang.Integer)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.security.provider.EmailCodeAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks getDefaultPreAuthenticationChecks()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserServiceImpl getUserServiceImpl()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.SecurityConfig: void <init>()>
<org.opsli.core.utils.UserUtil: boolean refreshUserRoles(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><org.opsli.plugins.pagehelper.PageHelperProperties: java.lang.Boolean getBanner()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder accountNonExpired(boolean)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.ast.StaticField: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.read.builder.ExcelReaderBuilder read(java.io.InputStream,com.alibaba.excel.read.listener.ReadListener)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERBMPString: java.lang.String toString()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler: void handle(java.lang.Object)>-><org.opsli.core.utils.CaptchaUtil: void validate(java.lang.String,java.lang.String)>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByCode(java.lang.String)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.read.builder.ExcelReaderSheetBuilder readSheet(java.lang.String)>
<org.opsli.core.utils.UserTokenUtil: org.opsli.common.exception.TokenException lambda$getUserNameByToken$2()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder and()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuFullModel: void setParentId(java.lang.String)>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getPasswordLevel()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.Integer getSortNo()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.exception.AuthException: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getDescription()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement: java.lang.String toString()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>-><java.util.ArrayList: void <init>()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isIpv4(java.lang.CharSequence)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.Map getJavaFieldTypes()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><com.baomidou.mybatisplus.extension.service.IService: boolean save(java.lang.Object)>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserAllPerms(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByMobile(java.lang.String,java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.utils.TreeBuildUtil: void <clinit>()>-><cn.hutool.core.collection.ListUtil: java.util.List list(boolean)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: void <init>(java.lang.Class)>-><com.alibaba.fastjson.support.config.FastJsonConfig: void <init>()>
<java.io.InputStream: int read(byte[],int,int)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper$1: int read()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: boolean updateUser(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><cn.hutool.core.text.CharSequenceUtil: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cn.hutool.core.text.CharSequenceUtil: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.user.entity.SysUser: void <init>()>-><org.opsli.core.base.entity.BaseEntity: void <init>()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><cn.hutool.core.bean.BeanUtil: java.lang.Object copyProperties(java.lang.Object,java.lang.Class,java.lang.String[])>
<org.opsli.core.utils.CaptchaUtil: void <clinit>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.SupBookRecord: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByGif: void <init>(org.opsli.core.utils.CaptchaUtil$1)>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByGif: void <init>()>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.AbstractCollection: boolean contains(java.lang.Object)>
<org.opsli.plugins.oss.OssStorageFactory: void <clinit>()>-><org.opsli.plugins.oss.OssStorageFactory: void <init>(java.lang.String,int)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Web: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Web: java.lang.String getUploadPath()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.sql.Time: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.modulars.tools.searchhis.web.SearchHisRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String getPassword()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.io.InvalidClassException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.login.vo.AuthAccessTokenDto: org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder builder()>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><org.opsli.core.filters.aspect.ValidatorAop: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: java.util.List getOrgByCurrUser()>-><org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><cn.hutool.core.util.RandomUtil: int randomInt(int,int)>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyBySpec: com.wf.captcha.base.Captcha createCaptcha()>-><com.wf.captcha.SpecCaptcha: void <init>(int,int,int)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object[])>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: void hPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.pqc.crypto.xmss.WOTSPlusOid: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.springframework.data.redis.core.AbstractOperations: java.lang.Object deserializeValue(byte[])>-><org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><cn.hutool.core.lang.tree.TreeNodeConfig: cn.hutool.core.lang.tree.TreeNodeConfig setDeep(java.lang.Integer)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Object get(java.lang.String)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ValueOperations opsForValue()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.lang.Boolean: boolean booleanValue()>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Object get(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean matches(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String,java.lang.String)>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: boolean matches(java.lang.CharSequence,java.lang.String)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.core.general.StartPrint: org.opsli.core.general.StartPrint getInstance()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.springframework.boot.web.servlet.RegistrationBean: void setOrder(int)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.font.AttributeValues: java.lang.String toString()>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean isCharEqual(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findColumns(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDriverClassName()>
<org.opsli.plugins.pagehelper.PageHelperProperties: java.lang.Boolean getBanner()>-><java.util.Properties: java.lang.String getProperty(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String getSystemStarterTime()>
<org.opsli.core.api.ApiVersionCondition: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.xssf.usermodel.XSSFFont: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.util.pattern.PathPattern: java.lang.String toString()>
<org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.login.dto.LoginModel: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.LinkedList: boolean contains(java.lang.Object)>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean removeIf(java.util.function.Predicate)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.core.autoconfigure.properties.ApiPathProperties getApiPathProperties()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.AtomicLongArray: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>-><java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createDefThreadPool(java.lang.String)>-><org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder contact(springfox.documentation.service.Contact)>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.GutsRecord: java.lang.String toString()>
<org.opsli.modulars.system.logs.service.impl.LoginLogsServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.SysLoginLogsMapperImpl getSysLoginLogsMapperImpl()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generateAccessToken(org.opsli.core.base.dto.LoginUserDto,java.lang.String,java.lang.Integer)>-><org.opsli.core.utils.JWTBizUtil$Tag: java.lang.String getTag()>
<org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>-><java.lang.Object: void <init>()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer exceptionHandling()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.lang.Boolean: boolean booleanValue()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getParameterMapStr()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.modulars.tools.searchhis.web.SearchHisRestController: org.opsli.api.base.result.ResultWrapper getSearchHis(java.lang.String,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>
<org.opsli.common.utils.RateLimiterUtil: void <clinit>()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>
<org.opsli.core.utils.UserUtil: boolean refreshUserAllPerms(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.springframework.boot.SpringApplication: org.springframework.context.ConfigurableApplicationContext run(java.lang.Class,java.lang.String[])>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long sRemove(java.lang.String,java.lang.Object[])>-><org.springframework.data.redis.core.DefaultSetOperations: java.lang.Long remove(java.lang.Object,java.lang.Object[])>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<synthetic.method.GenLogsMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.core.base.dto.LoginUserDto: java.lang.String getUsername()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder loginFrom(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.SubList$1: java.lang.Object next()>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.concurrent.CountDownLatch: void await()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.sms.msg.SmsMsgCodeEnum: java.lang.String getMessage()>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.security.exception.AuthException: void <init>(java.lang.Integer,java.lang.String,java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.DictUtil: java.util.List sortDictWrappers(java.util.List)>-><cn.hutool.core.collection.ListUtil: java.util.List sort(java.util.List,java.util.Comparator)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><com.alibaba.fastjson.JSONArray: java.lang.Object get(int)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int getDatabase()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><springfox.documentation.builders.ParameterBuilder: springfox.documentation.service.Parameter build()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.modulars.generator.table.wrapper.GenTableModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper updateAndDetail(org.opsli.modulars.generator.template.wrapper.GenTemplateAndDetailModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean canEqual(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.opsli.plugins.redis.scripts.RedisScriptCache loadScripts()>-><org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum: org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum[] values()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.Integer getExportMaxCount()>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.common.exception.ServiceException: java.lang.String getErrorMessage()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<synthetic.method.SQLActuatorImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: java.util.List getByTableId(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getSubModuleName()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor mybatisPlusInterceptor()>-><com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor: void <init>()>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder and()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getUserId()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getDescription()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><org.opsli.common.enums.DictType: boolean hasDict(java.lang.String,java.lang.String)>
<org.opsli.modulars.generator.template.service.impl.GenTemplateServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.generator.template.service.impl.GenTemplateDetailServiceImpl getGenTemplateDetailServiceImpl()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.LongAdder: java.lang.String toString()>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByCode(java.lang.String)>-><java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.filters.aspect.SearchHisAop: void <init>()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><cn.hutool.core.date.DateUtil: long between(java.util.Date,java.util.Date,cn.hutool.core.date.DateUnit)>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Web: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void <clinit>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletResponseWrapper: java.io.PrintWriter getWriter()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.HashMap: java.util.Set entrySet()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.common.utils.CheckStrength: org.opsli.common.utils.CheckStrength$LEVEL getPasswordLevel(java.lang.String)>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.jwt.RegisteredPayload: cn.hutool.jwt.RegisteredPayload setExpiresAt(java.util.Date)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.Sets: java.util.HashSet newHashSet()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.format.CellFormatPart: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.modulars.system.SystemMsg: java.lang.String getMessage()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByUserName(java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: java.lang.Object getOne(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><com.google.common.cache.LocalCache$LocalManualCache: java.lang.Object get(java.lang.Object,java.util.concurrent.Callable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.UserUtil: void <init>()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.ArrayType: java.lang.String toString()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchOneself()>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.Double getQps()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper findListByTypeCode(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder code(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.BOFRecord: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.lang.Throwable: void <init>(java.lang.Throwable)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getRemoteAddr()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean contains(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder email(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.core.utils.UserUtil: boolean refreshUserMenus(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.concurrent.CountDownLatch: void <init>(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.concurrent.DefaultPromise$LeanCancellationException: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.opsli.plugins.redis.scripts.RedisScriptCache loadScripts()>-><org.opsli.plugins.redis.scripts.RedisScriptCache: boolean putScript(org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum,java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder licenseUrl(java.lang.String)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor mybatisPlusInterceptor()>-><com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.nio.charset.Charset: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.commons.pool2.impl.DefaultPooledObject: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.Map lambda$getTemplateDetailList$0(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setPassword(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.handler.OtherErrorHandler: void <init>()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.alibaba.fastjson.JSONArray: java.lang.Object get(int)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void main(java.lang.String[])>-><java.io.PrintStream: void println(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper enableTenant(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper setMsg(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.AbstractFunctionPtg: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ExtSSTRecord: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateMobile(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Integer: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.tools.common.bean.VerificationCodeBean: void <init>(org.opsli.plugins.email.EmailPlugin,org.opsli.core.autoconfigure.properties.GlobalProperties)>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.Boolean getIzManual()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.SpringContextHolder: void assertContextInjected()>-><org.apache.commons.lang3.Validate: void validState(boolean,java.lang.String,java.lang.Object[])>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.core.autoconfigure.properties.EncryptProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.EncryptProperties: java.lang.String getKey()>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getTableId()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.wrapper.system.user.ToUserPassword: void setUserId(java.lang.String)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder code(int)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findList()>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.PageBreakRecord: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.SubList: int size()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.ast.FieldGetters$GetterMethodFieldGetter: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.TreeBuildUtil: void <clinit>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String[] getParameterValues(java.lang.String)>-><javax.servlet.ServletRequestWrapper: java.lang.String[] getParameterValues(java.lang.String)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.generator.database.mysql.MySqlSyncBuilder: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.generator.table.service.impl.GenTableServiceImpl getGenTableServiceImpl()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.modulars.system.dict.service.impl.DictDetailServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.dict.service.impl.DictServiceImpl getDictServiceImpl()>
<org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.CaptchaUtil: boolean delCaptcha(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.Area3DPtg: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<java.util.AbstractSet: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String filterParamString(java.lang.String)>-><org.opsli.plugins.waf.util.SQLFilterKit: java.lang.String stripSQL(java.lang.String)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.DateWindow1904Record: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.String: byte[] getBytes()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findAll()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.common.exception.EmptyException: void <init>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.scheduler.DelegateServiceScheduler$UnsupportedScheduledExecutorService: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object[])>
<org.opsli.core.cache.SecurityCache: void hPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.SubList: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.security.access.SecurityConfig: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.general.StartPrint: void successPrint()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.excel.listener.ExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByMobile(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: long count(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$SingletonList: int size()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.handler.AuthServiceErrorHandler: void <init>()>
<org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>-><org.opsli.core.utils.JWTBizUtil: org.opsli.core.base.dto.LoginUserDto getLoginUserFromToken(java.lang.String)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: void hPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void main(java.lang.String[])>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getUrl()>
<org.opsli.core.utils.UserUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: java.lang.Object get(int)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: java.lang.String toString()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.redis.connection.RedisPassword: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.oss.OssStorageFactory: void <init>(java.lang.String,int)>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.opsli.plugins.security.handler.OtherErrorHandler: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void <init>(org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.lang.Class: java.lang.String getName()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>
<org.opsli.modulars.generator.template.service.impl.GenTemplateDetailServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.sms.msg.SmsMsgCodeEnum: java.lang.Integer getCode()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: void <init>()>
<org.opsli.core.utils.OptionsUtil: void <init>()>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.scheduler.DelegateServiceScheduler: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.plugins.generator.enums.CodeType: java.lang.String getDesc()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.util.Map: void forEach(java.util.function.BiConsumer)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.WindowOneRecord: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.generator.template.service.impl.GenTemplateServiceImpl: void <init>()>
<org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><java.lang.StringBuilder: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.properties.ApiPathProperties: void <init>()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.builders.RequestHandlerSelectors: java.util.function.Predicate basePackage(java.lang.String)>
<org.opsli.modulars.generator.table.wrapper.GenTableModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.msg.CommonMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletResponse getResponse()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserMenus(java.lang.String)>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.util.Optional empty()>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.UserDetailModel: java.lang.String getUsername()>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long increment(java.lang.String,long)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><cn.hutool.core.lang.tree.TreeNodeConfig: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.oss.enums.OssStorageType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List sortWrappers(java.util.List)>-><cn.hutool.core.collection.ListUtil: java.util.List sort(java.util.List,java.util.Comparator)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object[])>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper updateOptions(java.util.Map)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDbName()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.calendar.ZoneInfo: java.lang.String toString()>
<org.opsli.plugins.security.utils.WebUtils: void renderErrorByAlert(javax.servlet.http.HttpServletResponse,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.apache.ibatis.reflection.wrapper.BeanWrapper: void setBeanProperty(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder timestamp(long)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getMenuAndPermsTree(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void setDispatcherTypes(javax.servlet.DispatcherType,javax.servlet.DispatcherType[])>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: void setAuthenticated(boolean)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.invoke.MethodHandle: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil: boolean delCaptcha(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.common.enums.ValidatorType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.lettuce.core.internal.AbstractInvocationHandler: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.generator.template.service.impl.GenTemplateDetailServiceImpl getGenTemplateDetailServiceImpl()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<register-finalize <org.opsli.plugins.redisson.enums.RedissonType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.CtNewMethod: javassist.CtMethod make(java.lang.String,javassist.CtClass)>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper save(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.net.URI: java.lang.String toString()>
<org.opsli.plugins.waf.msg.WafMsg: void <clinit>()>-><org.opsli.plugins.waf.msg.WafMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.SecurityConfig: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.nodes.MappingNode: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.modulars.tools.common.bean.VerificationCodeBean: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.dict.service.impl.DictServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.DictMapperImpl getDictMapperImpl()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler: java.lang.Class access$202(org.opsli.plugins.security.handler.LoginHandler,java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void clearCache(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.io.FastStringWriter: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.DumperOptions$FlowStyle: java.lang.String toString()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getOrgIds()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel: java.lang.String getIgnoreFileName()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getCredentials()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.security.service.EmailUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><com.github.pagehelper.PageSerializable: java.util.List getList()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.properties.AuthProperties: int getCredentialsExpired()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isMatchRegex(java.util.regex.Pattern,java.lang.CharSequence)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessor: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.generator.enums.DataBaseType: void <clinit>()>-><org.opsli.plugins.generator.enums.DataBaseType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><springfox.documentation.builders.ParameterBuilder: springfox.documentation.builders.ParameterBuilder parameterType(java.lang.String)>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getPassword()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.naming.NamingException: java.lang.String toString()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.net.NetUtil: java.lang.String getMultistageReverseProxyIp(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.redisson.annotation.DistributedLockHandler: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth getAuth()>
<org.opsli.modulars.system.dict.service.impl.DictDetailServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.DictDetailMapperImpl getDictDetailMapperImpl()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.properties.TokenProperties: void <init>()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getLabel()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.opsli.plugins.redis.scripts.RedisScriptCache loadScripts()>-><cn.hutool.core.io.IoUtil: java.lang.String read(java.io.InputStream,java.nio.charset.Charset)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isPlateNumber(java.lang.CharSequence)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Web: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Web: java.lang.String getUploadPath()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>-><org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getIzDef()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.Ref2DPtgBase: java.lang.String toString()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getRealName()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<org.bouncycastle.asn1.ASN1Integer: org.bouncycastle.asn1.ASN1Integer getInstance(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.data.redis.core.DefaultValueOperations: void set(java.lang.Object,java.lang.Object)>
<org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.api.ApiVersionCondition: int getApiVersion()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.google.common.collect.RegularImmutableList: java.lang.Object get(int)>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.Vector: boolean contains(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.buffer.EmptyByteBuf: java.lang.String toString()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.common.thread.AsyncProcessor$1: void onSuccess(java.lang.Object)>-><org.opsli.common.thread.AsyncProcessor$CallbackResult: void setSuccess(java.lang.Boolean)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.aop.support.DefaultIntroductionAdvisor: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.Range$UpperBoundFn: java.lang.Object apply(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.email.msg.EmailMsg: java.lang.String getMessage()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByCode(java.lang.String)>-><org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum[] values()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findList()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.api.wrapper.system.logs.OperationLogModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<javassist.bytecode.AnnotationDefaultAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.opsli.api.base.warpper.ApiWrapper: void <init>()>-><org.opsli.api.base.encrypt.BaseEncrypt: void <init>()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Double: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><synthetic.method.UserMapperImpl: boolean updatePassword(org.opsli.api.wrapper.system.user.UserPassword)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.util.GenericArrayTypeInformation: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getHost()>
<org.opsli.core.utils.CaptchaUtil: boolean delCaptcha(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.plugins.generator.factory.GeneratorFactory: java.lang.String getJavaHeadAnnotation()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateMobile(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.role.service.impl.RoleServiceImpl getRoleServiceImpl()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><cn.hutool.core.io.FileUtil: java.lang.String extName(java.lang.String)>
<org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>-><org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>
<org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: java.util.Map lambda$enter$0(java.lang.Double,java.lang.String)>-><java.lang.Double: double doubleValue()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setUsername(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><org.opsli.common.enums.VerificationTypeEnum: java.lang.String getType()>
<org.opsli.modulars.test.web.TestRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void <init>(org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.eventbus.SpringSecurityEventBus getSpringSecurityEventBus()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder loginFrom(java.lang.String)>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><java.lang.String: int length()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.role.RoleModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><cn.hutool.core.date.TimeInterval: long interval()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Vector$Itr: boolean hasNext()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.ExcelUtil: org.opsli.core.utils.ExcelUtil getInstance()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.collect.ArrayListMultimap: java.lang.String toString()>
<org.opsli.common.api.ResultVoMap: void <init>()>-><java.util.HashMap: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateMobile(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<org.opsli.core.utils.JWTBizUtil: org.opsli.core.base.dto.LoginUserDto getLoginUserFromToken(java.lang.String)>-><cn.hutool.json.JSONObject: java.lang.Object remove(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.alibaba.excel.write.metadata.WriteBasicParameter: void setRelativeHeadRowIndex(java.lang.Integer)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.MethodInfo: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><cn.hutool.core.util.ReflectUtil: java.lang.reflect.Field[] getFields(java.lang.Class)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByMobile(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.update.Update: java.lang.Object set(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.DefaultRowHeightRecord: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.common.utils.CheckStrength$LEVEL: java.lang.String getCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.core.listener.ApplicationReadyEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationReadyEvent)>-><org.opsli.core.general.StartPrint: org.opsli.core.general.StartPrint getInstance()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.x509.GeneralName: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.ResourceLeakDetector$TraceRecord: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.Collections$SingletonList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.handler.codec.dns.AbstractDnsOptPseudoRrRecord: java.lang.String toString()>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String getDescription()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.x509.Extension: java.lang.String toString()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getUserAgent()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.StringBuilder: int indexOf(java.lang.String)>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil$Tag: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.msg.CommonMsg: java.lang.Integer getCode()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler: void handle(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.concurrent.CopyOnWriteArrayList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.plugins.waf.util.XSSFilterKit: java.lang.String stripXSS(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.ast.MethodInfo: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void init()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.plugins.waf.util.SQLFilterKit: java.lang.String stripSQL(java.lang.String)>-><org.opsli.common.exception.WafException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.Collections$EmptyList: int size()>
<org.opsli.core.security.service.MobileUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>-><java.lang.Object: void <init>()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder password(java.lang.String)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.common.msg.ValidatorMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.filters.interceptor.MybatisAutoFillInterceptor: void <init>()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.tenant.TenantModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.utils.ExcelUtil$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: void addUrlPatterns(java.lang.String[])>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Collections$SetFromMap: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.Class: java.lang.Object newInstance()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><com.alibaba.fastjson.JSONArray: boolean isEmpty()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getDictName()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.net.InetAddress: java.lang.String toString()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.plugins.security.utils.WebUtils: void renderErrorByAlert(javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.ServletResponseWrapper: void setCharacterEncoding(java.lang.String)>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel getModel()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePassword(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper getTenantByUsable(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.excel.listener.BatchExcelListener: void doAfterAllAnalysed(com.alibaba.excel.context.AnalysisContext)>-><org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(org.opsli.common.base.msg.BaseMsg)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.TokenProperties: int getEffectiveTime()>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByMobile(java.lang.String)>-><org.opsli.modulars.system.SystemMsg: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.role.service.impl.RoleMenuRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.RoleMenuRefMapperImpl getRoleMenuRefMapperImpl()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findColumns(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: void <clinit>()>-><org.opsli.plugins.excel.ExcelPlugin: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.msg.ValidatorMsg: java.lang.String getMessage()>
<org.opsli.core.general.StartPrint: void successPrint()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.oss.enums.OssStorageType: org.opsli.plugins.oss.enums.OssStorageType getType(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: org.opsli.api.base.result.ResultWrapper getByTableId(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: void <clinit>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.common.msg.CommonMsg: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.Collections$EmptyList: boolean contains(java.lang.Object)>
<org.opsli.plugins.redis.lock.RedisLockImpl: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.asm.Handle: java.lang.String toString()>
<org.opsli.core.utils.DictUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.core.listener.ApplicationReadyEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationReadyEvent)>-><org.opsli.core.general.StartPrint: void successPrint()>
<org.opsli.plugins.oss.OssStorageFactory: void <init>(java.lang.String,int)>-><java.lang.Package: java.lang.String getName()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientIdBySingle(javax.servlet.http.HttpServletRequest)>-><org.opsli.common.utils.IPUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.generator.database.mysql.MySqlSyncBuilder: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.SQLActuatorImpl getSQLActuatorImpl()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String format(java.lang.CharSequence,java.lang.Object[])>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: void <init>()>
<org.opsli.modulars.system.SystemMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hpsf.Property: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil$1: void <clinit>()>-><org.opsli.common.enums.ValidatorType: org.opsli.common.enums.ValidatorType[] values()>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.stream.StreamSpliterators$AbstractWrappingSpliterator: java.lang.String toString()>
<org.opsli.core.utils.GlobalPropertiesUtil: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.core.autoconfigure.properties.GlobalProperties getGlobalProperties()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>-><org.opsli.core.holder.UserContextHolder: void clear()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.data.redis.serializer.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.util.concurrent.Futures$CallbackListener: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.scanner.SimpleKey: java.lang.String toString()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getTemplateId()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String encode(long[])>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><java.util.LinkedList: boolean addAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void <init>(org.opsli.plugins.security.properties.AuthProperties,org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl,org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl,org.opsli.core.security.service.UidUserDetailDetailServiceImpl)>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.oss.msg.OssMsg: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$SingletonList: int size()>
<org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isAllNotEmpty(java.lang.CharSequence[])>
<org.opsli.common.thread.AsyncProcessExecutorByWait: void <init>()>-><java.lang.Object: void <init>()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.opsli.core.cache.SecurityCache: void hPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.POIXMLDocumentPart: java.lang.String toString()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Excel getExcel()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.awt.image.ColorModel: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.io.OutputStream getOutputStream(javax.servlet.http.HttpServletResponse,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder builder()>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: void <init>()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel getModel()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.util.zip.ZipOutputStream: void write(byte[],int,int)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>-><java.lang.Double: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>
<org.opsli.core.autoconfigure.properties.TokenProperties: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void <init>()>
<org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.role.RoleModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.data.redis.serializer.SerializationUtils: java.util.Collection deserializeValues(java.util.Collection,java.lang.Class,org.springframework.data.redis.serializer.RedisSerializer)>-><org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ExternSheetRecord$RefSubRecord: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxCreate$IgnoreSink: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.opsli.core.autoconfigure.properties.TokenProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.TokenProperties: int getEffectiveTime()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.plugins.redisson.annotation.DistributedLockHandler: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList: int size()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: void <clinit>()>-><com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.core.base.dto.LoginUserDto: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder builder()>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: void <init>()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Web getWeb()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getUsername()>
<org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: java.lang.String myInterceptor(org.apache.ibatis.session.SqlSessionFactory)>-><org.apache.ibatis.session.Configuration: void addInterceptor(org.apache.ibatis.plugin.Interceptor)>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.api.wrapper.system.menu.MenuModel: void setUrl(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.NamedInheritableThreadLocal: java.lang.String toString()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setLoginFrom(java.lang.String)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.logs.event.LoginLogEvent: void <init>(org.opsli.modulars.system.user.service.IUserService,org.opsli.modulars.system.logs.service.ILoginLogsService)>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.logs.service.impl.LoginLogsServiceImpl getLoginLogsServiceImpl()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.FontRecord: java.lang.String toString()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.extension.service.IService: boolean update(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<synthetic.method.TestUserMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.waf.filter.WafFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.apache.commons.collections.FastHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractCollection: int size()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.core.msg.TokenMsg: java.lang.Integer getCode()>
<org.opsli.plugins.security.exception.handler.AuthEntryHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.opsli.plugins.security.exception.AuthException)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.core.joran.action.Action: java.lang.String toString()>
<org.opsli.modulars.system.org.service.impl.SysOrgServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getCodeTitleBrief()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper delAll(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.utils.JWTBizUtil$Tag: void <clinit>()>-><org.opsli.core.utils.JWTBizUtil$Tag: void <init>(java.lang.String,int,java.lang.String)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.common.enums.VerificationTypeEnum: void <clinit>()>-><org.opsli.common.enums.VerificationTypeEnum: void <init>(java.lang.String,int,java.lang.String)>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: java.util.Iterator getFileNames()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getMenuAndPermsTree(java.lang.String)>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List)>
<org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String format(java.lang.CharSequence,java.lang.Object[])>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><com.github.pagehelper.PageInfo: void <init>(java.util.List)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><kotlin.collections.AbstractCollection: boolean contains(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getSubName()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.commons.pool2.BaseObject: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: void <init>()>-><java.util.ArrayList: void <init>()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.plugins.redisson.annotation.DistributedLockHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.common.enums.LoginLimitRefuse: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.email.msg.EmailMsg: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.ArrayPtg: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.x509.UnparseableExtension: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper insertAndDetail(org.opsli.modulars.generator.template.wrapper.GenTemplateAndDetailModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><opsli.plugins.crypto.msg.CryptoMsg: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.general.StartPrint: void <init>()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto build()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePassword(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object[])>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><javax.servlet.ServletRequestWrapper: java.lang.String getRemoteAddr()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<register-finalize <org.opsli.plugins.security.vo.AuthResultWrapper$StateCodeEnum: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void delByTableId(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper setMsg(java.lang.String)>
<org.opsli.plugins.security.handler.SecurityErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<org.opsli.plugins.security.utils.WebUtils: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.UserUtil: boolean refreshUserAllPerms(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.buffer.WrappedByteBuf: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><cn.hutool.core.getter.OptNullBasicTypeGetter: java.lang.String getStr(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.login.web.LoginByCodeRestController getLoginByCodeRestController()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.generator.utils.GenTemplateUtil: void <init>()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.ast.Unary: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchOneself()>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<register-finalize <org.opsli.common.enums.LoginFromEnum: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.eventbus.SpringEventBus: void <init>()>-><org.opsli.core.eventbus.AbstractSpringEventBus: void <init>()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper sync(java.lang.String)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean equalsNull(java.lang.String)>-><java.lang.String: int length()>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.Scannable$Attr$1: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void <init>()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFields(java.lang.Class)>-><cn.hutool.json.JSONObject: cn.hutool.json.JSONObject putOpt(java.lang.String,java.lang.Object)>
<org.opsli.common.utils.Props: void load()>-><org.yaml.snakeyaml.Yaml: void <init>()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getSubName()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.buffer.AbstractByteBuf: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: java.lang.Object getPrincipal()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.filters.interceptor.MybatisCryptoInterceptor: void <init>(org.opsli.core.autoconfigure.properties.EncryptProperties)>-><synthetic.method.SingletonFactory: org.opsli.core.autoconfigure.properties.EncryptProperties getEncryptProperties()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletResponseWrapper: void setCharacterEncoding(java.lang.String)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getUrl()>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getComponent()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.TokenProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.TokenProperties: int getEffectiveTime()>
<org.opsli.core.utils.OptionsUtil: java.lang.Object lambda$getOptionByCode$0(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.stream.SpinedBuffer$OfLong: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Web: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.StringBuilder: void <init>()>
<register-finalize <org.opsli.common.enums.OptionsType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getDictName()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.jca.ProviderList: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder addListener(org.opsli.plugins.security.handler.LoginAccessSuccessListener)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.ProtectionDomain: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>-><org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><cn.hutool.core.text.CharSequenceUtil: boolean isBlank(java.lang.CharSequence)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateAvatar(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getAvatar()>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void setDbName(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.DimensionsRecord: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Collections$SynchronizedMap: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.invoke.MethodType: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(javax.servlet.http.HttpServletRequest,java.lang.Double)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRequestURI()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getFieldTypes()>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collection: java.util.stream.Stream stream()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer sessionManagement()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String getNewPassword()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuFullModel: void <init>()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><com.alibaba.excel.support.ExcelTypeEnum: java.lang.String getValue()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateEmail(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<register-finalize <org.opsli.core.utils.TreeBuildUtil: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateBy(java.lang.String)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper updateAndDetail(org.opsli.modulars.generator.template.wrapper.GenTemplateAndDetailModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: void <init>(org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.core.persistence.Page: void <init>(int,int)>-><com.github.pagehelper.PageSerializable: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.x509.X509CertImpl: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: java.util.Iterator getFileNames()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.service.Contact: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.jwt.JWT: cn.hutool.jwt.JWT create()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper getTenantByUsable(java.lang.String)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String getSystemName()>
<org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List transformTs2Ms(java.util.List)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><org.opsli.common.utils.HashIdsUtil: java.lang.String hash(long,java.lang.String)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByEmail(java.lang.String)>-><org.opsli.modulars.system.SystemMsg: java.lang.Integer getCode()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFields(java.lang.Class)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: org.opsli.plugins.security.exception.AuthException lambda$doFilterInternal$1()>-><org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getParameterMapStr()>
<org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>-><com.alibaba.ttl.TransmittableThreadLocal: java.lang.Object get()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SynchronizedCollection: int size()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.generator.msg.GeneratorMsg: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper getByCode(java.lang.String)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByEmail(java.lang.String,java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.common.utils.Props: java.util.List getList(java.lang.String,java.util.List)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.Permission: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties: java.util.Map getDataSourceInfoMap()>
<org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>-><java.lang.Integer: int hashCode()>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.collect.SingletonImmutableList: java.lang.String toString()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.logging.log4j.Level: java.lang.String toString()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.common.api.ResultVoMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.common.api.ResultVoMap: org.opsli.common.api.ResultVoMap put(java.lang.String,java.lang.Object)>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: void <clinit>()>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$1: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.function.FunctionMetadata: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.Integer getSortNo()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.CacheProperties: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getUrl()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Web: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<register-finalize <org.opsli.plugins.generator.strategy.create.CodeBuilder: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector: int size()>
<org.opsli.core.cache.CacheUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.email.msg.EmailMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long sPut(java.lang.String,java.lang.String[])>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.SetOperations opsForSet()>
<org.opsli.plugins.security.exception.handler.AuthEntryHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.opsli.plugins.security.exception.AuthException)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: void setModuleName(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.CtMember: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.lang.Integer: int intValue()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getSubModuleName()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.common.utils.RateLimiterUtil: void lambda$main$1(com.google.common.util.concurrent.RateLimiter)>-><com.google.common.util.concurrent.RateLimiter: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDriverClassName()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>
<org.opsli.plugins.security.handler.SecurityErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><com.github.pagehelper.PageSerializable: java.util.List getList()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder nickname(java.lang.String)>
<org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$EmptyList: int size()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: org.springframework.security.authentication.AuthenticationManager authenticationManager()>-><com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>
<org.opsli.core.utils.TreeBuildUtil: void <clinit>()>-><org.opsli.core.utils.TreeBuildUtil: void <init>(java.lang.String,int)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.user.UserAvatarModel: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><kotlin.collections.AbstractCollection: int size()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: java.lang.String get(java.lang.String)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.lang.Validator: boolean isIpv4(java.lang.CharSequence)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: org.springframework.beans.factory.config.BeanPostProcessor springfoxHandlerProviderBeanPostProcessor()>-><org.opsli.core.autoconfigure.conf.SwaggerConfig$1: void <init>()>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.HashMap: int size()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><cn.hutool.core.lang.tree.Tree: java.lang.Object getId()>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getRealName()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List transformTs2Ms(java.util.List)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePassword(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: void <init>(org.opsli.core.persistence.querybuilder.chain.QueryBuilderChain)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean equalsNull(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setLoginFrom(java.lang.String)>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: void <init>()>-><org.opsli.modulars.system.login.web.LoginCommonRestController: void <init>(org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.alibaba.excel.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.MonthDay: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Character: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.plugins.oss.exception.StoragePluginException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.ZoneId: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setCreateBy(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><java.lang.Integer: int intValue()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.redis.conf.RedisPluginConfig: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper getByCode(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: java.util.List getByTableId(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.plugins.email.msg.EmailMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.utils.UserUtil: boolean refreshUserMenus(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.listener.ApplicationFailedEventListener: void <init>()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.core.subst.Token: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean isCredentialsNonExpired(java.lang.String,int)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime date()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String getPassword()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Vector$Itr: boolean hasNext()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDbName()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder addListener(org.opsli.plugins.security.handler.LoginAccessDeniedListener)>
<org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>
<org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.ImmutableList$SubList: java.lang.Object get(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.ZoneOffset: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: int getCode()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Optional: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder authorities(java.util.List)>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: boolean update(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: void verifyBySign(java.lang.String,java.lang.String)>-><cn.hutool.jwt.signers.JWTSignerUtil: cn.hutool.jwt.signers.JWTSigner hs256(byte[])>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder: org.opsli.api.wrapper.system.user.UserRoleRefModel build()>-><org.opsli.api.wrapper.system.user.UserRoleRefModel: void <init>(java.lang.String,java.lang.String[],java.lang.String)>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.filter.WafFilter: void setEnableXssFilter(boolean)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.String: char charAt(int)>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><com.alibaba.excel.support.ExcelTypeEnum: java.lang.String getValue()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.api.wrapper.system.user.UserPassword: void setNewPassword(java.lang.String)>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><com.baomidou.mybatisplus.core.conditions.update.Update: java.lang.Object set(java.lang.Object,java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper sync(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.Class: java.lang.String getName()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.io.ObjectStreamField: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1Private: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getParameter(java.lang.String)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String filterParamString(java.lang.String)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<register-finalize <org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.Collections$EmptyList: boolean contains(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.plugins.oss.OssStorageFactory: org.opsli.plugins.oss.service.OssStorageService getHandle()>-><org.opsli.plugins.oss.enums.OssStorageType: org.opsli.plugins.oss.enums.OssStorageType getType(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.MonoCallableOnAssembly: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.io.OutputStream getOutputStream(javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.ServletResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: org.opsli.modulars.system.login.vo.AuthAccessTokenDto build()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void <init>()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper importTables(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void <init>()>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void init()>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDbName()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><cn.hutool.core.map.MapProxy: java.lang.Object get(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.RegularImmutableList: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.util.ClassTypeInformation: java.lang.String toString()>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateAvatar(org.opsli.api.wrapper.system.user.UserAvatarModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.Ptg: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto: org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder builder()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.opsli.common.thread.AsyncProcessor$CallbackResult: void setSuccess(java.lang.Boolean)>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><java.lang.Long: long longValue()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$1(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getSubModuleName()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.stream.StreamSpliterators$DelegatingSpliterator: java.lang.String toString()>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder expiresAtTs(java.lang.Long)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean delete(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Class: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.common.utils.FieldUtil: java.lang.String getFileName(org.opsli.common.utils.FieldUtil$SFunction)>-><java.lang.String: int length()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handlePath(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String prependIfMissing(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence[])>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.lang.Boolean: boolean booleanValue()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.ehcache.config.ResourceType$Core: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String filterParamString(java.lang.String)>
<org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.http.HttpServletResponseWrapper: void setStatus(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfo(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getParentIds()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.pagehelper.PageHelperProperties: void <init>()>-><java.util.Properties: void <init>()>
<org.opsli.core.utils.JWTBizUtil: org.opsli.core.base.dto.LoginUserDto getLoginUserFromToken(java.lang.String)>-><cn.hutool.json.JSON: java.lang.Object toBean(java.lang.Class)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.opsli.modulars.generator.table.service.impl.GenTableServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl getGenLogsServiceImpl()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.modulars.gentest.carinfo.service.impl.TestCarServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.UnknownRecord: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.WindowProtectRecord: java.lang.String toString()>
<org.opsli.plugins.generator.SqlSyncUtil: void execute(org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.common.utils.FieldUtil: java.lang.String upperFirstLetter(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.opsli.core.utils.CaptchaUtil: boolean delCaptcha(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.bouncycastle.asn1.DERBitString: org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletResponseWrapper: void setContentType(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.net.URL: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry permitAll()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.core.subst.Node: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Vector: boolean add(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.wrapper.system.user.ToUserPassword: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.lang.Object get(int)>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><java.util.ArrayList: int size()>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getOriginalFilename()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean deleteAll(java.lang.String[])>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: boolean removeByIds(java.util.Collection)>
<org.opsli.core.utils.MenuUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.redis.scripts.RedisScriptCache: boolean putScript(org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder builder()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.BookBoolRecord: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.CompositeType: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.CtField: javassist.CtField make(java.lang.String,javassist.CtClass)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void clearCache(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.String: java.lang.String substring(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.FileSharingRecord: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><ch.qos.logback.classic.Logger: void warn(java.lang.String,java.lang.Object[])>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.gentest.carinfo.TestCarModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int getDatabase()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getAuthorName()>
<org.opsli.plugins.redisson.enums.RedissonType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRequestURI()>
<org.opsli.core.autoconfigure.properties.TokenProperties: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.lang.Thread: java.lang.String getName()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.ArrayList$SubList: int size()>
<org.opsli.modulars.system.logs.event.OperationLogEvent: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<synthetic.method.SysOrgMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void <init>(org.opsli.plugins.security.properties.AuthProperties,org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl,org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl,org.opsli.core.security.service.UidUserDetailDetailServiceImpl)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.properties.AuthProperties getAuthProperties()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: java.lang.Object lambda$getUserDefRoleByUserId$10(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><com.alibaba.fastjson.support.config.FastJsonConfig: java.nio.charset.Charset getCharset()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Double zIncrementScore(java.lang.String,java.lang.String,double)>-><org.springframework.data.redis.core.DefaultZSetOperations: java.lang.Double incrementScore(java.lang.Object,java.lang.Object,double)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<register-finalize <org.opsli.common.enums.LoginModelType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.waf.msg.WafMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getHidden()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.generator.msg.GeneratorMsg: java.lang.Integer getCode()>
<org.opsli.common.utils.Props: void load()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.core.utils.ExcelUtil: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,org.opsli.plugins.excel.listener.BatchExcelListener)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String filterParamString(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long sSize(java.lang.String)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.SetOperations opsForSet()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findList()>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String hash(long,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateMobile(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setIzTenantAdmin(java.lang.String)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><com.alibaba.fastjson.support.config.FastJsonConfig: java.lang.String getDateFormat()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.SubList: java.lang.Object get(int)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper build()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.redisson.RedissonLock: void <init>(org.opsli.plugins.redisson.RedissonManager)>
<com.alibaba.excel.read.processor.DefaultAnalysisEventProcessor: void dealData(com.alibaba.excel.context.AnalysisContext)>-><org.opsli.plugins.excel.listener.ExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.utils.UserTokenUtil: void init(org.opsli.core.autoconfigure.properties.GlobalProperties,org.opsli.plugins.redis.RedisPlugin)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth$Login getLogin()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: org.opsli.plugins.excel.ExcelPlugin access$200()>
<org.opsli.common.utils.RateLimiterUtil: java.util.Map lambda$enter$0(java.lang.Double,java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: void setRateLimiter(com.google.common.util.concurrent.RateLimiter)>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void init()>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<opsli.plugins.crypto.exception.CryptoException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper enableAccount(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String hash(long,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.common.thread.ThreadPoolFactory: void <clinit>()>-><java.lang.Runtime: int availableProcessors()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String getAddress()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void <init>(org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>
<org.opsli.common.enums.LoginFromEnum: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERVisibleString: java.lang.String toString()>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><com.google.common.eventbus.AsyncEventBus: void <init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><com.google.common.collect.RegularImmutableList: java.lang.Object get(int)>
<java.lang.Throwable: void <init>(java.lang.String)>-><org.opsli.common.exception.EmptyException: java.lang.Throwable fillInStackTrace()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.excel.listener.ExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getDescription()>
<org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.InterfaceHdrRecord: java.lang.String toString()>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateSelf(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.ttl.threadpool.ExecutorTtlWrapper: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder timestamp(long)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><com.google.common.cache.LocalCache$LocalManualCache: void put(java.lang.Object,java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher: void registerReadListener()>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper$1: void setReadListener(javax.servlet.ReadListener)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.eventbus.DeadEvent: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.plugins.oss.msg.OssMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePage(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder uid(java.lang.String)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: boolean validationHandle(java.lang.String)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.security.authentication.AfterAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.common.utils.CheckStrength: org.opsli.common.utils.CheckStrength$LEVEL getPasswordLevel(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByUserName(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isBlank(java.lang.CharSequence)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void pub(org.opsli.common.utils.FieldUtil$SFunction,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.AbstractCollection: java.lang.String toString()>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: org.opsli.plugins.excel.ExcelPlugin access$200()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><com.alibaba.fastjson.JSONArray: boolean contains(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.factory.InjectionPoint: java.lang.String toString()>
<org.opsli.core.persistence.Page: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.crypto.CryptoPermission: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.common.utils.CheckStrength$LEVEL: java.lang.String getCode()>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.logs.event.LoginLogEvent: void <init>(org.opsli.modulars.system.user.service.IUserService,org.opsli.modulars.system.logs.service.ILoginLogsService)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.source.FileSource: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><javax.servlet.ServletResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.geo.Point: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class)>-><org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.apache.ibatis.reflection.wrapper.BeanWrapper: void setBeanProperty(org.apache.ibatis.reflection.property.PropertyTokenizer,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.nio.ByteBuffer: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$getMenuAndPermsTree$0(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getComponent()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>-><cn.hutool.core.util.RandomUtil: int randomInt(int,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.dict.service.impl.DictServiceImpl: void <init>()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<org.opsli.plugins.security.handler.AuthErrorHandler: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><com.google.common.collect.ImmutableList: boolean contains(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.redisson.connection.MasterSlaveEntry: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.modulars.system.dict.web.DictRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[])>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setVersion(java.lang.Integer)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder description(java.lang.String)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getErrorMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<org.opsli.core.filters.interceptor.MybatisAutoFillInterceptor: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxCreate$ErrorAsyncSink: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getSubName()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.ExcelUtil: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getParent(java.lang.String)>-><org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.IsoFields$Field$4: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: org.springframework.security.authentication.AuthenticationManager authenticationManager()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: java.lang.Class getModelType()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>-><com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><cn.hutool.json.JSONObject: cn.hutool.json.JSONObject putOpt(java.lang.String,java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.msg.ValidatorMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.tenant.web.TenantRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonLock redissonLock(org.opsli.plugins.redisson.RedissonManager)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.excel.msg.ExcelMsg: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonLock redissonLock(org.opsli.plugins.redisson.RedissonManager)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: org.aspectj.lang.Signature getSignature()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><java.lang.Package: java.lang.String getName()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.modulars.system.role.service.impl.RoleServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.role.service.impl.RoleMenuRefServiceImpl getRoleMenuRefServiceImpl()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.springframework.web.multipart.commons.CommonsMultipartFile: java.io.InputStream getInputStream()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><java.lang.Integer: int hashCode()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList: int size()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: org.opsli.common.thread.AsyncProcessExecutor put(java.lang.Runnable)>-><java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$TextPrinterParser: java.lang.String toString()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redis.msg.RedisMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder username(java.lang.String)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(javax.servlet.http.HttpServletRequest)>-><org.opsli.common.utils.IPUtil: java.lang.String getClientIdBySingle(javax.servlet.http.HttpServletRequest)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.JSONPObject: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.alibaba.fastjson.JSONArray: java.lang.Object get(int)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.util.NumberUtil: boolean isPrimes(int)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.opsli.common.utils.FieldUtil: java.lang.String getFileName(org.opsli.common.utils.FieldUtil$SFunction)>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<java.util.AbstractList: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.core.utils.JWTBizUtil: java.util.Date getExpiredDateFromToken(java.lang.String)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth$Login getLogin()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1Integer: java.lang.String toString()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><cn.hutool.core.date.DateUtil: java.lang.String formatBetween(long)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.awt.Font: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateTime(java.util.Date)>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.LinkedList: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.EventObject: java.lang.String toString()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletResponse getResponse()>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,cn.hutool.core.lang.tree.TreeNodeConfig)>-><org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><springfox.documentation.schema.ModelRef: void <init>(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.persistence.Page: org.opsli.core.persistence.Page$PageData getPageData()>-><org.opsli.core.persistence.Page$PageData: void setTotal(java.lang.Long)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByUserName(java.lang.String)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.redisson.conf.RedissonConfig: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><java.lang.Class: java.lang.String getSimpleName()>
<org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxCallableOnAssembly: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getRequestToken(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getParameter(java.lang.String)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void <clinit>()>-><java.lang.Package: java.lang.String getName()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><java.util.ArrayList: boolean isEmpty()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory getInstance()>-><org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void <init>()>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: void <init>()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Throwable: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.general.StartPrint: void errorPrint(java.lang.String)>-><cn.hutool.core.lang.Console: void error(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.opsli.plugins.generator.utils.EnjoyUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.common.api.ResultVoMap: void <init>()>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper del(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.common.utils.Props: void load()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.MenuUtil: void <init>()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getIzDef()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.update.Update: java.lang.Object set(java.lang.Object,java.lang.Object)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.Integer getPort()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object cast(java.lang.Object)>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: org.opsli.modulars.system.login.vo.AuthAccessTokenDto build()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.classmate.util.ClassKey: java.lang.String toString()>
<org.opsli.plugins.excel.listener.ExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.filters.aspect.ValidatorAop: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.opsli.plugins.redisson.RedissonManager: org.slf4j.Logger access$000()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><cn.hutool.core.bean.BeanUtil: java.lang.Object getProperty(java.lang.Object,java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper saveMenuByFull(org.opsli.api.wrapper.system.menu.MenuFullModel)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: boolean refreshUserRoles(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<register-finalize <org.opsli.core.cache.SecurityCache$CacheStatus: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getErrorMessage()>
<org.opsli.common.utils.OutputStreamUtil: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.springframework.data.redis.core.RedisTemplate redisTemplate()>-><org.springframework.data.redis.core.RedisTemplate: void setKeySerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><com.github.pagehelper.PageSerializable: java.util.List getList()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getComponent()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.conf.WafConfig: void <init>()>-><java.lang.Object: void <init>()>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper enableTenant(java.lang.String,java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.Date: long getTime()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>-><org.opsli.common.msg.ValidatorMsg: void setFieldName(java.lang.String)>
<org.opsli.common.utils.MessUtil: java.util.List getPlaceholderList(java.lang.String)>-><java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: org.opsli.api.base.result.ResultWrapper getByTableId(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getLoginFrom()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.json.JSONArray: int size()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.generator.enums.DataBaseType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><javax.servlet.ServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.generator.importable.service.MySQLDatabaseTableServiceImpl: void <init>()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginModel,org.opsli.modulars.system.login.dto.LoginModel)>-><org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType getTypeByStr(java.lang.String)>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Map)>
<org.opsli.core.utils.ExcelUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.conf.CorsConfig: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><org.springframework.web.servlet.config.annotation.CorsRegistration: org.springframework.web.servlet.config.annotation.CorsRegistration allowedOriginPatterns(java.lang.String[])>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getOrgByUserId(java.lang.String)>-><org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.generator.template.wrapper.GenTemplateCopyModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.core.util.ReflectUtil: boolean hasField(java.lang.Class,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientIdBySingle(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.source.StringSource: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.plugins.security.provider.UsernamePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.service.LoadUserDetailServiceFactory getLoadUserDetailServiceFactory()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.login.web.LoginByCodeRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$getMenuAndPermsTree$0(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getType()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Web: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: boolean lambda$configurePathMatch$0(java.lang.Class)>-><java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.BitSet: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.modulars.generator.template.wrapper.GenTemplateModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.ForkJoinPool: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry authorizeRequests()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.base.entity.BaseEntity transformM2T(org.opsli.api.base.warpper.ApiWrapper)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: java.lang.Class getEntityClass()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByMobile(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth$Token getToken()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List radExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String)>-><org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.sun.jna.ELFAnalyser$ArmAeabiAttributesTag: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.filters.aspect.ValidatorAop: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.resolver.dns.DefaultDnsServerAddresses: java.lang.String toString()>
<org.opsli.plugins.generator.enums.JavaType: org.opsli.plugins.generator.enums.JavaType[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean contains(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<synthetic.method.RoleMenuRefMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.JWTBizUtil: java.util.Date getExpiredDateFromToken(java.lang.String)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object lambda$transformInstance$0(java.lang.Class,boolean,java.lang.Object)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder data(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class)>-><org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.common.utils.UniqueStrGeneratorUtils: java.lang.String generator(long)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findColumns(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties: java.util.Map getDataSourceInfoMap()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.StringBuilder: void <init>(int)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><cn.hutool.json.JSONArray: int size()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><springfox.documentation.builders.ParameterBuilder: springfox.documentation.builders.ParameterBuilder description(java.lang.String)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getPassWord()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.common.utils.OutputStreamUtil: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.excel.exception.ExcelPluginException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.core.utils.JWTBizUtil: void verifyBySign(java.lang.String,java.lang.String)>-><cn.hutool.core.exceptions.ValidateException: void <init>(int,java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><cn.hutool.core.util.DesensitizedUtil: java.lang.String email(java.lang.String)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractList$SubList: java.lang.Object get(int)>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><org.opsli.core.utils.DictUtil: java.util.List sortDictWrappers(java.util.List)>
<org.opsli.plugins.generator.enums.CodeType: org.opsli.plugins.generator.enums.CodeType getCodeType(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$StateCodeEnum: java.lang.String getMsg()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$1(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.regex.Pattern: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.security.core.authority.SimpleGrantedAuthority: java.lang.String toString()>
<org.opsli.core.api.ApiVersionCondition: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.common.utils.FieldUtil: java.lang.String getFileName(org.opsli.common.utils.FieldUtil$SFunction)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateEmail(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<org.opsli.core.utils.SearchHisUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><kotlin.collections.AbstractCollection: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.opsli.core.utils.ExcelUtil: org.opsli.api.base.warpper.ApiWrapper cast(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setIzManual(java.lang.Boolean)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Calendar: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.common.msg.ValidatorMsg: java.lang.String getMessage()>-><java.lang.StringBuilder: void <init>()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.opsli.core.base.controller.BaseRestController: void callEntry_synthetic()>
<org.opsli.api.wrapper.system.options.OptionsModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper getDictListByCode(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedList: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.security.config.annotation.web.builders.HttpSecurity$OrderedFilter: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$XXssConfig xssProtection()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.redis.msg.RedisMsg: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object)>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void init()>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.opsli.core.utils.CaptchaUtil: void validate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.ConnectableFluxOnAssembly: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.plugins.waf.util.XSSFilterKit: java.lang.String stripXSS(java.lang.String)>-><java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.SaveRecalcRecord: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><cn.hutool.json.JSONUtil: cn.hutool.json.JSONObject createObj()>
<org.opsli.plugins.redis.scripts.RedisScriptCache: boolean putScript(org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePassword(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.opsli.common.utils.Props: void load()>-><java.util.LinkedHashMap: void <init>()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: java.lang.Class getEntityClass()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getIzExistOrg()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><com.alibaba.excel.read.builder.ExcelReaderBuilder: com.alibaba.excel.ExcelReader build()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.util.Pair: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.core.msg.CoreMsg: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setCreateBy(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object le(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.cache.service.EhCachePluginImpl: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.HCenterRecord: java.lang.String toString()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.properties.WafProperties: boolean isSqlFilter()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.locale.BaseLocale: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.oss.msg.OssMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.modulars.test.web.TestRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.org.service.impl.SysOrgServiceImpl: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getRedirect()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.filter.WafFilter: void setEnableSqlFilter(boolean)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.common.exception.TokenException lambda$logout$0()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Vector: java.util.Iterator iterator()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SingletonList: int size()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.plugins.sms.SmsConfig: void initRedisPushSubHandler()>-><cn.hutool.extra.spring.SpringUtil: java.util.Map getBeansOfType(java.lang.Class)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.org.service.impl.SysOrgServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserOrgRefServiceImpl getUserOrgRefServiceImpl()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.env.AbstractEnvironment: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.lang.Throwable: void printStackTrace()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyList: int size()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.excel.msg.ExcelMsg: java.lang.Integer getCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.conf.WebQueryConf: java.lang.String get(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.listener.ApplicationFailedEventListener: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.CaptchaUtil: boolean delCaptcha(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.SignatureAttribute$TypeArgument: java.lang.String toString()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.modulars.generator.template.wrapper.GenTemplateModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.redis.listener.PatternTopic: java.lang.String toString()>
<org.opsli.modulars.system.role.service.impl.RoleMenuRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl getUserRoleRefServiceImpl()>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRoleRefRestController: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<com.alibaba.excel.read.processor.DefaultAnalysisEventProcessor: void endSheet(com.alibaba.excel.context.AnalysisContext)>-><org.opsli.plugins.excel.listener.BatchExcelListener: void doAfterAllAnalysed(com.alibaba.excel.context.AnalysisContext)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.ibatis.mapping.ParameterMapping: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.generator.enums.DataBaseType: org.opsli.plugins.generator.enums.DataBaseType getDbType(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<synthetic.method.ProceedingJoinPointImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long del(java.util.Collection)>-><java.util.ArrayList: int size()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.io.AbstractResource: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.SingletonImmutableList: int size()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder license(java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.EncryptProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.util.CellAddress: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper transformT2M(org.opsli.core.base.entity.BaseEntity)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><org.apache.ibatis.scripting.xmltags.DynamicContext$ContextMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.security.service.MobileUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.ApiPathProperties: java.lang.String getGlobalPrefix()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.format.support.FormattingConversionService$PrinterConverter: java.lang.String toString()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.utils.Props: void load()>-><org.springframework.core.io.ClassPathResource: java.io.InputStream getInputStream()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getLoginIp()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.pqc.crypto.xmss.DefaultXMSSMTOid: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><cn.hutool.json.JSONArray: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><jdk.internal.org.xml.sax.SAXException: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil: void validate(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.area.web.SysAreaRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.MBeanAttributeInfo: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.api.wrapper.system.user.UserPassword: java.lang.String getNewPassword()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Vector$Itr: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><cn.hutool.core.io.IoUtil: void write(java.io.OutputStream,boolean,byte[])>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean isCharEqual(java.lang.String)>-><java.lang.String: int length()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.gentest.carinfo.TestCarModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.String toString()>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.lang.Throwable: java.lang.String getMessage()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.xml.namespace.QName: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>-><java.lang.Object: int hashCode()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: boolean validationHandle(java.lang.String)>-><java.lang.String: int hashCode()>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.plugins.security.exception.handler.AuthEntryHandlerImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.properties.EncryptProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserRoleRefModel: org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder builder()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.HashSet: boolean add(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler: java.util.List access$502(org.opsli.plugins.security.handler.LoginHandler,java.util.List)>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generateAccessToken(org.opsli.core.base.dto.LoginUserDto,java.lang.String,java.lang.Integer)>-><cn.hutool.json.JSONObject: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.usermodel.HSSFCell: java.lang.String toString()>
<org.opsli.modulars.system.menu.service.impl.MenuServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl getUserRoleRefServiceImpl()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.modulars.system.SystemMsg: java.lang.Integer getCode()>
<org.opsli.core.utils.ExcelUtil: org.opsli.core.utils.ExcelUtil getInstance()>-><org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: org.opsli.core.utils.ExcelUtil access$100()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePage(javax.servlet.http.HttpServletRequest)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getIcon()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>-><org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.Boolean getIzManual()>
<org.opsli.core.utils.JWTBizUtil: java.util.Date getExpiredDateFromToken(java.lang.String)>-><cn.hutool.jwt.Claims: cn.hutool.json.JSONObject getClaimsJson()>
<org.opsli.core.security.service.MobileUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.properties.AuthProperties getAuthProperties()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$LoadingMap: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String getSystemName()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.baomidou.mybatisplus.core.config.GlobalConfig: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.ArrayList: void clear()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isGeneral(java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.utils.ExcelUtil: org.opsli.core.utils.ExcelUtil getInstance()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.SingletonImmutableList: int size()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.convert.Convert: java.lang.Integer toInt(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.plugins.excel.listener.ExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePassword(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: java.lang.Class getEntityClass()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.vo.AuthAccessTokenDto: void <init>(java.lang.String,java.lang.Long)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.lang.tree.TreeNodeConfig: java.lang.String getIdKey()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void main(java.lang.String[])>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.security.service.UsernameUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictDetailModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getHidden()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: void setDictName(java.lang.String)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: void <init>()>
<org.opsli.common.utils.CheckStrength: org.opsli.common.utils.CheckStrength$LEVEL getPasswordLevel(java.lang.String)>-><org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$EmptyList: int size()>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>-><java.util.Collections: java.util.List emptyList()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.opsli.core.utils.JWTBizUtil: void verifyBySign(java.lang.String,java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserRoleRefMapperImpl getUserRoleRefMapperImpl()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.openxml4j.opc.PackagePart: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.WriteAccessRecord: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: int size()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getRequestURI()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder builder()>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.core.utils.TenantUtil: void <init>()>-><org.opsli.modulars.system.tenant.web.TenantRestController: void <init>()>
<org.opsli.core.cache.SecurityCache$CacheStatus: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.ClassPool: javassist.ClassPool getDefault()>
<org.opsli.core.utils.UserTokenUtil: void init(org.opsli.core.autoconfigure.properties.GlobalProperties,org.opsli.plugins.redis.RedisPlugin)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth$Token getToken()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><cn.hutool.core.lang.tree.TreeNodeConfig: cn.hutool.core.lang.tree.TreeNodeConfig setWeightKey(java.lang.String)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.net.InetSocketAddress: java.lang.String toString()>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getRedirect()>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findColumns(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Object sPop(java.lang.String)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.SetOperations opsForSet()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><com.alibaba.fastjson.support.config.FastJsonConfig: com.alibaba.fastjson.serializer.SerializeConfig getSerializeConfig()>
<org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String getPasswordLevel()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.plugins.security.eventbus.AbstractSpringSecuritySecurityEventBus: void <init>()>-><java.lang.Object: void <init>()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><cn.hutool.core.map.MapProxy: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.common.utils.Props: java.util.List getList(java.lang.String,java.util.List)>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Object get(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper setData(java.lang.Object)>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.web.filter.CompositeFilter$VirtualFilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.redis.connection.stream.StreamRecords$MapBackedRecord: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.Long: long longValue()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><com.baomidou.mybatisplus.extension.service.IService: boolean saveBatch(java.util.Collection)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginModel,org.opsli.modulars.system.login.dto.LoginModel)>-><org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.UserUtil: void <init>()>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList: int size()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Map)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList: java.lang.Object get(int)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.generator.table.service.impl.GenTableServiceImpl getGenTableServiceImpl()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String,int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERIA5String: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String getSuperAdmin()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getModuleName()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserNameByToken()>-><org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>
<org.opsli.modulars.system.org.service.impl.SysOrgServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.SysOrgMapperImpl getSysOrgMapperImpl()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: int lambda$sortWrappers$1(org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel)>-><cn.hutool.core.comparator.CompareUtil: int compare(java.lang.Comparable,java.lang.Comparable)>
<org.opsli.plugins.redisson.RedissonLock: void <init>(org.opsli.plugins.redisson.RedissonManager)>-><org.opsli.plugins.redisson.RedissonManager: org.redisson.api.RedissonClient getRedisson()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<org.opsli.core.log.aspect.OperateLogAspect: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List getFieldTypes()>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.context.ContextN: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.tenant.TenantModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType getTypeByStr(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.awt.Point: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.String toString()>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void pageHelperEnd()>
<org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.Integer getCode()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.login.web.LoginByAccountRestController getLoginByAccountRestController()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.plugins.excel.listener.BatchExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>-><java.util.ArrayList: void clear()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.json.JSONArray: java.lang.Object get(int)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$StateCodeEnum: int getCode()>
<org.opsli.core.base.service.base.BaseService: void <init>()>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateEmail(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.common.utils.UniqueStrGeneratorUtils: java.lang.String generator(long)>-><cn.hutool.core.util.RandomUtil: int randomInt(int,int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.generator.table.service.impl.GenTableServiceImpl: void <init>()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.core.api.ApiVersionCondition: boolean equals(java.lang.Object)>-><org.opsli.core.api.ApiVersionCondition: int getApiVersion()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.SubList: java.lang.Object get(int)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper copy(org.opsli.modulars.generator.template.wrapper.GenTemplateCopyModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateEmail(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getMessage()>
<org.opsli.plugins.excel.listener.ExcelListener: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper$1: void <init>(org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper,java.io.ByteArrayInputStream)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserOrgRefRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserOrgRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserServiceImpl getUserServiceImpl()>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.AbstractList: java.util.Iterator iterator()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime date(long)>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.baomidou.dynamic.datasource.DynamicGroupDataSource: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.utils.CaptchaUtil: void <clinit>()>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByGif: void <init>(org.opsli.core.utils.CaptchaUtil$1)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.opsli.core.utils.UserTokenUtil: java.lang.String getRequestToken(javax.servlet.http.HttpServletRequest)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByMobile(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper updateAndDetail(org.opsli.modulars.generator.template.wrapper.GenTemplateAndDetailModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$StateCodeEnum: int getCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><cn.hutool.json.JSONArray: boolean contains(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper build()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.options.OptionsModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.generator.enums.DataBaseType: org.opsli.plugins.generator.enums.DataBaseType getDbType(java.lang.String)>-><org.opsli.plugins.generator.enums.DataBaseType: org.opsli.plugins.generator.enums.DataBaseType[] values()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.awt.SunHints$Key: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><cn.hutool.core.lang.tree.Tree: java.util.List getChildren()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<synthetic.method.DictMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.database.mysql.MySqlSyncBuilder: void <clinit>()>-><org.opsli.common.utils.Props: void <init>(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(javax.servlet.http.HttpServletRequest)>-><org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><opsli.plugins.crypto.msg.CryptoMsg: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.UserCachingOperationNameGenerator: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.util.FieldInfo: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.UserDetailModel: java.lang.String getUsername()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder data(java.lang.Object)>
<org.opsli.modulars.system.role.service.impl.RoleMenuRefServiceImpl: void <init>()>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: void <init>()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.email.msg.EmailMsg: java.lang.Integer getCode()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.GenLogsMapperImpl getGenLogsMapperImpl()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime offsetSecond(java.util.Date,int)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.UnresolvedPermission: java.lang.String toString()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.logs.OperationLogModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.Boolean getIzApi()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getMobile()>
<org.opsli.core.autoconfigure.conf.CorsConfig: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><org.springframework.web.servlet.config.annotation.CorsRegistry: org.springframework.web.servlet.config.annotation.CorsRegistration addMapping(java.lang.String)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.modulars.generator.template.wrapper.GenTemplateModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getIcon()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateTime(java.util.Date)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><cn.hutool.core.io.FileUtil: java.lang.String getSuffix(java.lang.String)>
<java.util.AbstractList: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void <init>(org.opsli.modulars.system.user.mapper.UserMapper,org.opsli.modulars.system.role.service.IRoleService,org.opsli.modulars.system.user.service.IUserRoleRefService,org.springframework.security.crypto.password.PasswordEncoder)>-><synthetic.method.SingletonFactory: synthetic.method.UserMapperImpl getUserMapperImpl()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.io.File: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.modulars.tools.common.bean.VerificationCodeBean: void <init>(org.opsli.plugins.email.EmailPlugin,org.opsli.core.autoconfigure.properties.GlobalProperties)>-><synthetic.method.SingletonFactory: org.opsli.core.autoconfigure.properties.GlobalProperties getGlobalProperties()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<javassist.bytecode.AnnotationDefaultAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>-><java.lang.Throwable: void printStackTrace()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.opsli.common.utils.RateLimiterUtil: boolean enter(javax.servlet.http.HttpServletRequest,java.lang.Double)>
<org.opsli.common.enums.AlertType: void <clinit>()>-><org.opsli.common.enums.AlertType: void <init>(java.lang.String,int)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.Integer getCode()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: void <clinit>()>-><com.google.common.util.concurrent.Striped: com.google.common.util.concurrent.Striped lock(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.core.holder.UserContextHolder: void setToken(java.lang.String)>-><com.alibaba.ttl.TransmittableThreadLocal: void set(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void main(java.lang.String[])>-><org.opsli.common.utils.MessUtil: java.util.List getPlaceholderList(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1ApplicationSpecific: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getDictValue()>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiKey apiKey()>-><springfox.documentation.service.ApiKey: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<javax.xml.ws.spi.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: int size()>
<org.opsli.core.autoconfigure.properties.CacheProperties: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime offsetMinute(java.util.Date,int)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.handler.codec.dns.DnsRecordType: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.ast.Const: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth$Token getToken()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.security.exception.handler.AuthEntryHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.opsli.plugins.security.exception.AuthException)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.invoke.SerializedLambda: int getImplMethodKind()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByUserName(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERNumericString: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.Docket: void <init>(springfox.documentation.spi.DocumentationType)>
<org.opsli.core.api.ApiVersionCondition: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<opsli.plugins.crypto.exception.CryptoException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.security.authentication.AfterAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void post(java.lang.Object)>
<org.opsli.plugins.sms.SmsConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>-><org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.plugins.security.provider.UsernamePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks getDefaultPostAuthenticationChecks()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.redisson.misc.RedissonPromise: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.modulars.generator.table.service.impl.GenTableServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.HeaderRecord: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.pkcs.SignerInfo: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.sun.jna.ELFAnalyser$ELFSectionHeaderEntry: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth getAuth()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder accessToken(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.modulars.system.dict.web.DictRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: boolean contains(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.general.StartPrint: void errorPrint(java.lang.String)>-><cn.hutool.core.thread.ThreadUtil: boolean sleep(java.lang.Number,java.util.concurrent.TimeUnit)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.OffsetTime: java.lang.String toString()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.ClassPool: javassist.ClassPath insertClassPath(javassist.ClassPath)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getOrgByUserId(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer: org.springframework.security.config.annotation.web.HttpSecurityBuilder disable()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.plugins.generator.enums.JavaType: void <clinit>()>-><org.opsli.plugins.generator.enums.JavaType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.misc.Signal: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><reactor.util.context.ContextN: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.area.service.impl.SysAreaServiceImpl: void <init>()>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatter: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.common.msg.ValidatorMsg: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.introspector.Property: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.core.utils.MenuUtil: void <init>()>-><org.opsli.modulars.system.menu.web.MenuRestController: void <init>()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder addListener(org.opsli.plugins.security.handler.LoginBeforeListener)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getHost()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.springframework.data.redis.core.RedisTemplate redisTemplate()>-><org.springframework.data.redis.core.RedisTemplate: void setHashValueSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getRoleId()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDriverClassName()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Long sSize(java.lang.String)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.alibaba.fastjson.JSONArray: boolean add(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><kotlin.collections.AbstractList$SubList: java.lang.Object get(int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.aop.support.DefaultPointcutAdvisor: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<jdk.internal.org.objectweb.asm.ClassWriter: java.lang.String getCommonSuperClass(java.lang.String,java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.api.wrapper.system.user.ToUserPassword: void setNewPassword(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuFullModel: void setTitle(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void <init>(org.opsli.modulars.system.user.mapper.UserMapper,org.opsli.modulars.system.role.service.IRoleService,org.opsli.modulars.system.user.service.IUserRoleRefService,org.springframework.security.crypto.password.PasswordEncoder)>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.modulars.system.role.service.impl.RoleServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl getUserRoleRefServiceImpl()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.CodeSource: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<register-finalize <org.opsli.api.base.result.ResultWrapper$StateCodeEnum: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String hash(long,java.lang.String)>-><java.lang.String: int length()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.gentest.carinfo.TestCarModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.AbstractNestablePropertyAccessor: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>
<org.opsli.core.persistence.Page: void instance(com.github.pagehelper.PageInfo,java.util.List)>-><com.github.pagehelper.PageSerializable: long getTotal()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Double zIncrementScore(java.lang.String,java.lang.String,double)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ZSetOperations opsForZSet()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.spi.service.contexts.SecurityContextBuilder: springfox.documentation.spi.service.contexts.SecurityContextBuilder forPaths(java.util.function.Predicate)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.common.utils.UniqueStrGeneratorUtils: java.lang.String generator(long)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.locale.Extension: java.lang.String toString()>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ExternSheetRecord: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.wrapper.system.user.UserPassword: void setNewPassword(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFields(java.lang.Class)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getRequestToken(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.core.utils.SpringContextHolder: java.lang.Object getBean(java.lang.Class)>-><org.opsli.core.utils.SpringContextHolder: void assertContextInjected()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getTableId()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.core.listener.ApplicationReadyEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationReadyEvent)>-><org.springframework.boot.context.event.ApplicationReadyEvent: org.springframework.context.ConfigurableApplicationContext getApplicationContext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.UserTokenUtil: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.core.msg.JwtMsg: java.lang.String getMessage()>
<org.opsli.common.utils.Props: java.util.List getList(java.lang.String,java.util.List)>-><java.lang.String: java.lang.String[] split(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.servlet.mvc.condition.AbstractNameValueExpression: java.lang.String toString()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><java.lang.Class: java.lang.String getName()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>-><org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean removeIf(java.util.function.Predicate)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.Integer getDictSort()>
<org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.lang.Class getInnerModelClazz()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultAuth()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.alibaba.excel.write.builder.ExcelWriterBuilder: com.alibaba.excel.ExcelWriter build()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.core.utils.VerificationCodeUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.base.entity.HasChildren: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Arrays$ArrayList: int size()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByGif: com.wf.captcha.base.Captcha createCaptcha()>-><com.wf.captcha.base.Captcha: void setCharType(int)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.stream.Nodes$FixedNodeBuilder: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object)>-><org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder version(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.filters.aspect.LimiterAop: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.RefErrorPtg: java.lang.String toString()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: org.opsli.api.wrapper.system.dict.DictDetailModel getModel()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile: java.io.InputStream getInputStream()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateBy(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateAvatar(org.opsli.api.wrapper.system.user.UserAvatarModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean delete(java.lang.String)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$1: boolean hasNext()>
<org.opsli.common.utils.FieldUtil: java.lang.String upperFirstLetter(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime date()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><com.google.common.collect.ImmutableList: boolean contains(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.handler.codec.dns.DefaultDnsQuery: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.usermodel.HSSFFont: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Vector: java.lang.Object get(int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.modulars.system.dict.service.impl.DictDetailServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<register-finalize <org.opsli.plugins.generator.enums.CodeType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.NameXPxg: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.Semaphore: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><cn.hutool.core.map.MapUtil: java.util.Map empty()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.SignalType: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder builder()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.core.security.service.EmailUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><kotlin.collections.AbstractCollection: int size()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.cache.msg.EhCacheMsg: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.base.entity.BaseEntity transformM2T(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.util.GenericArrayTypeImpl: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper getByCode(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Collections$UnmodifiableCollection: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.core.general.StartPrint: void successPrint()>-><cn.hutool.core.thread.ThreadUtil: boolean sleep(java.lang.Number,java.util.concurrent.TimeUnit)>
<synthetic.method.UserRoleRefMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String filterParamString(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map,java.lang.String)>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.plugins.excel.listener.BatchExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.util.NumberUtil: boolean isInteger(java.lang.String)>
<org.opsli.plugins.security.utils.WebUtils: void renderErrorByAlert(javax.servlet.http.HttpServletResponse,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$WebMvcEndpointHandlerMethod: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.common.utils.OutputStreamUtil: void <init>()>-><java.lang.Object: void <init>()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.jar.Attributes$Name: java.lang.String toString()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getCodeTitle()>
<org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType getTypeByStr(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isBlank(java.lang.CharSequence)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.Boolean getEnable()>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.modulars.tools.searchhis.web.SearchHisRestController: org.opsli.api.base.result.ResultWrapper getSearchHis(java.lang.String,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><cn.hutool.json.JSONArray: java.lang.Object get(int)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.opsli.plugins.redis.scripts.RedisScriptCache loadScripts()>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERT61String: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.AnnotationDefaultAttribute: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><org.opsli.common.utils.CheckStrength$StringUtils: boolean equalsNull(java.lang.String)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.Double getQps()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.general.StartPrint: java.lang.String getBasePath()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.log.aspect.OperateLogAspect: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: void hPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.lang.Object)>-><com.google.common.cache.LocalCache$LocalManualCache: void invalidate(java.lang.Object)>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.gentest.user.TestUserModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder nickname(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByMobile(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.modulars.system.tenant.service.impl.TenantServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.TenantMapperImpl getTenantMapperImpl()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>-><org.opsli.api.base.result.ResultWrapper$StateCodeEnum: int getCode()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.security.provisioning.MutableUser: java.lang.String getUsername()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: java.lang.Object get(int)>
<org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.opsli.api.base.result.ResultWrapper$StateCodeEnum: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder code(int)>
<org.opsli.modulars.system.role.web.RoleRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.awt.Color: java.lang.String toString()>
<org.opsli.plugins.sms.SmsFactory: void put(org.opsli.plugins.sms.service.SmsService)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.security.provider.MobilePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.eventbus.SpringSecurityEventBus getSpringSecurityEventBus()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.HideObjRecord: java.lang.String toString()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.lang.Object lambda$getUserByUserName$3(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.TabularDataSupport: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getCodeTitleBrief()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.UUID: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String format(java.lang.CharSequence,java.lang.Object[])>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.EndSubRecord: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.SubList: int size()>
<org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<org.opsli.common.utils.Props: void load()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void post(java.lang.Object)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.MBeanConstructorInfo: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isMac(java.lang.CharSequence)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper build()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>-><com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.OptionsUtil: org.opsli.api.wrapper.system.options.OptionsModel getOptionByCode(java.lang.String)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler$Builder initLoginModelClass(java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.JWTBizUtil: org.opsli.core.base.dto.LoginUserDto getLoginUserFromToken(java.lang.String)>-><cn.hutool.jwt.JWT: cn.hutool.jwt.JWT of(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory getInstance()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.buffer.SwappedByteBuf: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.sms.service.impl.AliYunSmsServiceImpl: void <init>()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.cglib.core.MethodInfo: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.AbstractList: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void pageHelperBegin()>
<org.opsli.core.cache.SecurityCache: void <clinit>()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.filter.WafFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest,boolean,boolean)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean isEnable()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: void <init>(org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.eventbus.SpringSecurityEventBus getSpringSecurityEventBus()>
<org.opsli.core.utils.OrgUtil: void handleOrgIdGroupCondition(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Nested: java.lang.Object and(java.util.function.Consumer)>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><java.io.PrintStream: void println(java.lang.String)>
<org.opsli.common.enums.DictType: boolean hasDict(java.lang.String,java.lang.String)>-><org.opsli.common.enums.DictType: org.opsli.common.enums.DictType[] values()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><com.wf.captcha.SpecCaptcha: boolean out(java.io.OutputStream)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String consistentShuffle(java.lang.String,java.lang.String)>-><java.lang.String: void <init>(char[])>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.TreeBuildUtil: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.SubList$1: java.lang.Object next()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.xmlbeans.StringEnumAbstractBase: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.before.LoginCodeModelVerifyCodeBeforeHandler: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getOrgIds()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.util.TypeVariableTypeInformation: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getJavaFieldTypes()>-><org.opsli.modulars.generator.importable.ImportTableUtil: java.util.Map getJavaFieldTypes()>
<org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper build()>-><org.opsli.plugins.security.vo.AuthResultWrapper: void <init>(java.lang.String,int,java.lang.Object,long)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: org.opsli.plugins.excel.ExcelPlugin access$200()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.Integer getExportMaxCount()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getRemoteAddr()>
<org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean canEqual(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.logs.event.LoginLogEvent: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<javax.servlet.ServletRequestWrapper: java.lang.String[] getParameterValues(java.lang.String)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String[] getParameterValues(java.lang.String)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<org.opsli.api.wrapper.system.menu.MenuModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><ch.qos.logback.classic.Logger: void error(java.lang.String)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>
<org.opsli.modulars.system.menu.service.impl.MenuServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.role.service.impl.RoleMenuRefServiceImpl getRoleMenuRefServiceImpl()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder builder()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.modulars.system.SystemMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void clearCache(java.lang.String)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: org.opsli.api.base.result.ResultWrapper createMenu(java.lang.String,java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper transformT2M(org.opsli.core.base.entity.BaseEntity)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper sync(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByMobile(java.lang.String,java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.reflect.Method: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean del(java.lang.String)>-><java.lang.Boolean: boolean booleanValue()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.StringBuffer: java.lang.String toString()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.gentest.user.TestUserModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean isCharEqual(java.lang.String)>-><java.lang.String: java.lang.String replace(char,char)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Vector: java.util.Iterator iterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.cache.conf.EhCacheConfig: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getAvatar()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.oss.OssStorageFactory: org.opsli.plugins.oss.service.OssStorageService getHandle()>-><org.opsli.plugins.oss.OssStorageFactory: org.opsli.plugins.oss.service.OssStorageService getHandle(org.opsli.plugins.oss.enums.OssStorageType)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.CtConstructor: void <init>(javassist.CtClass[],javassist.CtClass)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder data(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDriverClassName()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.common.enums.OptionsType: void <clinit>()>-><org.opsli.common.enums.OptionsType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: void lambda$excelExport$0(java.util.Map,java.lang.String,java.lang.Object)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.dict.service.impl.DictServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.dict.service.impl.DictDetailServiceImpl getDictDetailServiceImpl()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean delete(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.core.utils.DistributedLockUtil: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redisson.RedissonLock getRedissonLock()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.security.service.UidUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.method.ControllerAdviceBean: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.format.support.FormattingConversionService$AnnotationParserConverter: java.lang.String toString()>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserOrgRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.UserOrgRefMapperImpl getUserOrgRefMapperImpl()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePassword(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.MonoOnAssembly: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Hashtable: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.LimiterAop: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ExtendedFormatRecord: java.lang.String toString()>
<org.opsli.plugins.security.provider.UsernamePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.eventbus.SpringSecurityEventBus getSpringSecurityEventBus()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getRealName()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: org.opsli.common.exception.TokenException lambda$getLoginUserDto$0()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.common.api.ResultVoMap: void <init>()>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.opsli.core.eventbus.SpringEventBus: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.opsli.plugins.redis.scripts.RedisScriptCache loadScripts()>-><org.opsli.plugins.redis.scripts.RedisScriptCache: void <init>()>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.core.persistence.Page: void instance(com.github.pagehelper.PageInfo,java.util.List)>-><com.github.pagehelper.PageSerializable: void setTotal(long)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.common.enums.OptionsType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.modulars.system.logs.service.impl.OperationLogServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.OperationLogMapperImpl getOperationLogMapperImpl()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>-><java.lang.Object: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.common.utils.CheckStrength: org.opsli.common.utils.CheckStrength$LEVEL getPasswordLevel(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Hashtable$Entry: java.lang.String toString()>
<org.opsli.plugins.email.service.EmailPluginImpl: void <init>()>-><java.lang.Object: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setTenantId(java.lang.String)>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.DumperOptions$ScalarStyle: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String getAddress()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void delByTableId(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: java.lang.String toString()>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findAllOptions()>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.redis.conf.RedisPluginConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.general.StartPrint: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.modulars.system.logs.web.LogsRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$findMenuTree$1(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getType()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.LoginHandler: void fireFailureEvent(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.handler.SecurityErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.logs.LogsModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.oss.OssStorageFactory: void <init>(java.lang.String,int)>-><cn.hutool.core.util.ClassUtil: java.util.Set scanPackageBySuper(java.lang.String,java.lang.Class)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.authentication.AfterAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.EncryptProperties: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder mobile(java.lang.String)>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.opsli.modulars.generator.importable.ImportTableUtil: java.util.Map getJavaFieldTypes()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByEmail(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.CellRecord: java.lang.String toString()>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findListByCus(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper enableTenant(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.util.concurrent.DirectExecutor: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.opsli.core.autoconfigure.properties.TokenProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePage(javax.servlet.http.HttpServletRequest)>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List)>
<org.opsli.common.enums.DictType: boolean hasDict(java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.common.utils.Props: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.coyote.ContinueResponseTiming: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.SimpleTimeZone: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: int getCode()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getJavaFieldTypesBySafety()>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.sql.Timestamp: long getTime()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.role.RoleModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Nested: java.lang.Object and(java.util.function.Consumer)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.utils.UserUtil: java.util.List getOrgByCurrUser()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.core.listener.ApplicationFailedEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationFailedEvent)>-><org.opsli.core.general.StartPrint: void errorPrint(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition combine(org.opsli.core.api.ApiVersionCondition)>-><org.opsli.core.api.ApiVersionCondition: void <init>(int)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.classic.jmx.JMXConfigurator: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: org.opsli.api.wrapper.system.options.OptionsModel getOptionByCode(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>-><org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.awt.geom.Edge: java.lang.String toString()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.utils.JWTBizUtil: java.util.Date getExpiredDateFromToken(java.lang.String)>-><cn.hutool.jwt.JWT: cn.hutool.jwt.JWT of(java.lang.String)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><java.lang.StringBuilder: void <init>()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.plugins.excel.listener.BatchExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><com.baomidou.mybatisplus.extension.service.IService: boolean remove(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: java.lang.Class getModelType()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$getMenuAndPermsTree$0(org.opsli.api.wrapper.system.menu.MenuModel)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.SubList$1: java.lang.Object next()>
<org.opsli.common.utils.RateLimiterUtil: void <clinit>()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByEmail(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.logs.web.OperationLogRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.env.CompositePropertySource: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><com.github.pagehelper.PageInfo: void <init>(java.util.List)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.Provider$Service: java.lang.String toString()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.redisson.client.protocol.RedisCommand: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>-><org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List sortWrappers(java.util.List)>
<org.opsli.core.utils.ExcelUtil: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.function.Tuple2: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.CtClass: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getType()>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void <init>(java.util.List,org.opsli.plugins.pagehelper.PageHelperProperties)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.properties.WafProperties: java.util.Set getUrlExclusion()>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.TokenProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String getSecret()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.UserDetailModel: java.lang.String getUsername()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.UserTokenUtil: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.core.lang.Tuple: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.springframework.web.multipart.commons.CommonsMultipartFile: java.io.InputStream getInputStream()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.calendar.CalendarDate: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.MergeCellsRecord: java.lang.String toString()>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.exception.AuthException: java.lang.Integer getCode()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.core.util.NumberUtil: boolean isNumber(java.lang.CharSequence)>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties: java.util.Map getDataSourceInfoMap()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setCreateBy(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.common.utils.MessUtil: java.util.List getPlaceholderList(java.lang.String)>-><java.util.regex.Matcher: java.lang.String group(int)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.AbstractSet: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: int hashCode()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Long sPut(java.lang.String,java.lang.String[])>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: boolean refreshUserAllPerms(java.lang.String)>-><org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.provider.MobilePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getUrl()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.zone.ZoneRules: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.plugins.generator.enums.CodeType: org.opsli.plugins.generator.enums.CodeType getCodeType(java.lang.String)>
<org.opsli.core.api.ApiVersionCondition: java.lang.Object getMatchingCondition(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.common.utils.Props: void <init>(java.lang.String)>-><java.lang.Object: void <init>()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.Props: void load()>-><org.springframework.core.io.ClassPathResource: void <init>(java.lang.String)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.common.api.ResultVoMap: void <init>()>-><org.opsli.common.api.ResultVoMap: org.opsli.common.api.ResultVoMap put(java.lang.String,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.io.OutputStream getOutputStream(javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Join: java.lang.Object last(java.lang.String)>
<org.opsli.core.listener.ApplicationFailedEventListener: void onApplicationEvent(org.springframework.context.ApplicationEvent)>-><org.opsli.core.listener.ApplicationFailedEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationFailedEvent)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.security.provider.EmailCodeAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.BuddhistCalendar: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.ClassClassPath: void <init>(java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.redis.connection.RedisNode: java.lang.String toString()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.Integer getPort()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: boolean isEmpty()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.core.general.StartPrint: void successPrint()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ExternalNameRecord: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: org.opsli.common.thread.AsyncProcessExecutor put(java.lang.Runnable)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: java.lang.String encode(java.lang.CharSequence)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.CodeSigner: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.common.msg.CommonMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.stat.Symbol: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<org.opsli.core.api.ApiVersionCondition: java.lang.String toString()>-><org.opsli.core.api.ApiVersionCondition: int getApiVersion()>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.context.request.ServletWebRequest: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByUserName(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper insertAndDetail(org.opsli.modulars.generator.template.wrapper.GenTemplateAndDetailModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: int getCode()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Arrays$ArrayList: int size()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.ParallelFlux: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><javax.xml.parsers.FactoryConfigurationError: java.lang.String getMessage()>
<synthetic.method.UserOrgRefMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyBySpec: void <init>(org.opsli.core.utils.CaptchaUtil$1)>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyBySpec: void <init>()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findAllOptions()>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.common.utils.OutputStreamUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByEmail(java.lang.String)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.data.redis.core.RedisTemplate: java.lang.Boolean expire(java.lang.Object,long,java.util.concurrent.TimeUnit)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.util.NumberUtil: boolean isDouble(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Map)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictDetailModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.LinkedList: java.lang.Object get(int)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper save(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><cn.hutool.core.lang.tree.Tree: java.lang.Object getId()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getParent(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Object get(java.lang.String)>-><org.springframework.data.redis.core.DefaultValueOperations: java.lang.Object get(java.lang.Object)>
<org.opsli.common.utils.Props: void load()>-><org.yaml.snakeyaml.Yaml: java.lang.Object load(java.io.InputStream)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findList()>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.persistence.Page: void pageHelperEnd()>-><com.github.pagehelper.page.PageMethod: void clearPage()>
<org.opsli.core.filters.aspect.LimiterAop: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector$Itr: boolean hasNext()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isMobile(java.lang.CharSequence)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth getAuth()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginModel,org.opsli.modulars.system.login.dto.LoginModel)>-><org.opsli.modulars.system.login.dto.LoginModel: java.lang.String getPrincipal()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getJavaFieldTypes()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder data(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<org.opsli.core.utils.JWTBizUtil: java.util.Date getExpiredDateFromToken(java.lang.String)>-><cn.hutool.jwt.JWT: cn.hutool.jwt.JWTPayload getPayload()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.factory.support.GenericBeanDefinition: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFields(java.lang.Class)>-><cn.hutool.core.util.ReflectUtil: java.lang.reflect.Field[] getFields(java.lang.Class)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.Page: void instance(com.github.pagehelper.PageInfo,java.util.List)>-><com.github.pagehelper.PageSerializable: void setList(java.util.List)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean isCredentialsNonExpired(java.lang.String,int)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime offsetDay(java.util.Date,int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.common.utils.CheckStrength$LEVEL: java.lang.String getCode()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.opsli.common.utils.FieldUtil: java.lang.String upperFirstLetter(java.lang.String)>
<org.opsli.core.autoconfigure.conf.CorsConfig: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><org.springframework.web.servlet.config.annotation.CorsRegistration: org.springframework.web.servlet.config.annotation.CorsRegistration allowedHeaders(java.lang.String[])>
<register-finalize <org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.util.ObjectUtil: java.lang.Object defaultIfNull(java.lang.Object,java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder msg(java.lang.String)>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.jwt.JWT: java.lang.String sign(cn.hutool.jwt.signers.JWTSigner)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$1: java.lang.Object next()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void <init>(org.opsli.plugins.redis.RedisPlugin)>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginCodeModel,org.opsli.modulars.system.login.dto.LoginCodeModel)>-><org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: org.opsli.common.thread.AsyncProcessor getProcessor(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><java.lang.String: java.lang.String toLowerCase()>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.generator.template.service.impl.GenTemplateServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>-><org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>
<org.opsli.core.general.StartPrint: void errorPrint(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.filters.aspect.SQLDataAop: void <init>()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.ApiSelectorBuilder: springfox.documentation.spring.web.plugins.ApiSelectorBuilder apis(java.util.function.Predicate)>
<org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.PrintHeadersRecord: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><synthetic.method.HttpServletRequestImpl: java.lang.String getHeader(java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.FnGroupCountRecord: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientIdBySingle(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.net.NetUtil: java.lang.String getMultistageReverseProxyIp(java.lang.String)>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Excel getExcel()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<synthetic.method.TestCarMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long increment(java.lang.String,long)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ValueOperations opsForValue()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getTenantId()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int)>-><org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>
<register-finalize <org.opsli.plugins.waf.msg.WafMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByGif: com.wf.captcha.base.Captcha createCaptcha()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxOnAssembly$ObservedAtInformationNode: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Vector: java.util.Iterator iterator()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean deleteAll(java.lang.String[])>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><cn.hutool.core.util.DesensitizedUtil: java.lang.String mobilePhone(java.lang.String)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: void lambda$main$1(com.google.common.util.concurrent.RateLimiter)>-><java.io.PrintStream: void println(boolean)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler$Builder initAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.DictUtil: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.sms.SmsConfig: void initRedisPushSubHandler()>-><org.opsli.plugins.sms.SmsFactory: void put(org.opsli.plugins.sms.service.SmsService)>
<org.opsli.common.utils.UniqueStrGeneratorUtils: java.lang.String generator(long)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getJavaFieldTypesBySafety()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void <init>(org.opsli.plugins.redis.RedisPlugin)>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: java.lang.Object getOne(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><cn.hutool.json.JSONObject: java.lang.Object remove(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: java.util.List shutdownNow()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: java.util.Set zReverseRange(java.lang.String,long,long)>-><org.springframework.data.redis.core.DefaultZSetOperations: java.util.Set reverseRange(java.lang.Object,long,long)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType getConditionType(java.lang.String)>
<org.opsli.plugins.oss.exception.StoragePluginException: void <init>(java.lang.Integer,java.lang.String,java.lang.Throwable)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler: boolean access$002(org.opsli.plugins.security.handler.LoginHandler,boolean)>
<org.opsli.common.utils.OutputStreamUtil: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: void <init>()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><cn.hutool.core.text.CharSequenceUtil: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void pub(org.opsli.common.utils.FieldUtil$SFunction,java.lang.String)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder builder()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void configurePathMatch(org.springframework.web.servlet.config.annotation.PathMatchConfigurer)>-><org.springframework.web.servlet.config.annotation.PathMatchConfigurer: org.springframework.web.servlet.config.annotation.PathMatchConfigurer addPathPrefix(java.lang.String,java.util.function.Predicate)>
<org.opsli.api.wrapper.system.dict.DictWrapper: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String addPrefixIfNot(java.lang.CharSequence,java.lang.CharSequence)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByEmail(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper transformT2M(org.opsli.core.base.entity.BaseEntity)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: java.lang.String toString()>
<org.opsli.common.utils.Props: void load()>-><java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByArithmetic: com.wf.captcha.base.Captcha createCaptcha()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.util.concurrent.ImmediateFuture: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<synthetic.method.OperationLogMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.opsli.common.utils.CheckStrength$LEVEL: void <clinit>()>-><org.opsli.common.utils.CheckStrength$LEVEL: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchOneself()>-><org.opsli.core.utils.UserUtil: boolean updateUser(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.asm.ConstantDynamic: java.lang.String toString()>
<register-finalize <org.opsli.common.enums.DictType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getTenantId()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><org.opsli.api.wrapper.system.menu.MenuModel: void setParentId(java.lang.String)>
<org.opsli.plugins.generator.database.mysql.MySqlSyncBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setLoginIp(java.lang.String)>
<org.opsli.plugins.security.vo.AuthResultWrapper$StateCodeEnum: void <clinit>()>-><org.opsli.plugins.security.vo.AuthResultWrapper$StateCodeEnum: void <init>(java.lang.String,int,int,java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void delByTableIds(java.lang.String[])>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.SearchHisUtil: void <init>()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getSwitchTenantUserId()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><cn.hutool.core.convert.Convert: java.lang.String toStr(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.SingletonImmutableList: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.general.StartPrint: java.lang.String getBasePath()>-><cn.hutool.core.net.NetUtil: java.lang.String getLocalhostStr()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.baomidou.mybatisplus.extension.service.IService: boolean saveBatch(java.util.Collection)>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.UserDetailModel: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.util.List)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.core.joran.spi.ElementPath: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.provider.MobileCodeAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>-><org.opsli.core.base.service.base.BaseService: void <init>()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.GenTableColumnMapperImpl getGenTableColumnMapperImpl()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.resolver.dns.SingletonDnsServerAddresses$1: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>
<org.opsli.core.filters.aspect.UserCachingOperationNameGenerator: void <init>()>-><java.lang.Object: void <init>()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>-><org.opsli.core.utils.UserTokenUtil: java.lang.String getRequestToken(javax.servlet.http.HttpServletRequest)>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController$1: void <init>(org.opsli.core.base.controller.BaseRestController,org.opsli.api.wrapper.system.user.UserModel,java.util.Date)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.DumperOptions$LineBreak: java.lang.String toString()>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.oss.msg.OssMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findListByCus(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><kotlin.UByte: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.opsli.plugins.generator.utils.EnjoyUtil: void <clinit>()>-><com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void clearCache(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserMenus(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getEmail()>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: java.lang.Class getEntityClass()>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.aggregates.SharedValueManager$SharedFormulaGroup: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>-><org.opsli.core.utils.UserTokenUtil: java.lang.String getUserIdByToken(java.lang.String)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.EncryptProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.EncryptProperties: java.lang.String getKey()>
<org.opsli.plugins.security.provider.UsernamePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: void <init>()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.api.base.encrypt.EncryptModel: void setEncryptData(java.lang.String)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.excel.msg.ExcelMsg: java.lang.Integer getCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.excel.msg.ExcelMsg: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.servlet.mvc.method.RequestMappingInfo: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper del(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><com.github.pagehelper.PageSerializable: java.util.List getList()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><com.alibaba.fastjson.JSON: byte[] toJSONBytesWithFastJsonConfig(java.nio.charset.Charset,java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.opsli.common.utils.ZipUtils$1: void <init>(int)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.MessageDigest: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.listener.ApplicationFailedEventListener: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.security.handler.SecurityErrorHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: boolean validationField(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.oss.OssStorageFactory: void <init>(java.lang.String,int)>-><java.lang.Class: java.lang.Package getPackage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Long: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: java.lang.String getuuid()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.ast.FieldGetters$RealFieldGetter: java.lang.String toString()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.opsli.core.msg.CoreMsg: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void setUrl(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer rememberMe()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder uid(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.OptionsUtil: org.opsli.api.wrapper.system.options.OptionsModel getOptionByCode(java.lang.String)>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isMoney(java.lang.CharSequence)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.alibaba.fastjson.JSONArray: int size()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper del(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientAddressBySingle(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.net.NetUtil: java.lang.String getMultistageReverseProxyIp(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.common.UnicodeString: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List transformMs2Ts(java.util.List)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: java.lang.Class getEntityClass()>
<org.opsli.plugins.sms.SmsFactory: void <clinit>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.support.config.FastJsonConfig: java.nio.charset.Charset getCharset()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><com.wf.captcha.ArithmeticCaptcha: boolean out(java.io.OutputStream)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Web getWeb()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.util.MimeType: java.lang.String toString()>
<org.opsli.common.api.ResultVoMap: void <init>()>-><java.lang.System: long currentTimeMillis()>
<org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder addListener(org.opsli.plugins.security.handler.LoginBeforeListener)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: void hPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.lang.Object)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String addPrefixIfNot(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.modulars.system.SystemMsg: java.lang.Integer getCode()>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getTemplateId()>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.security.provisioning.MutableUser: java.lang.String getUsername()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UsernameUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig$1: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.Throwable: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean equalsNull(java.lang.String)>-><java.lang.Character: boolean isWhitespace(char)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.redisson.RedissonLock: void <init>(org.opsli.plugins.redisson.RedissonManager)>-><java.lang.Object: void <init>()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getLoginFrom()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.utils.DictUtil: int lambda$sortDictWrappers$3(org.opsli.api.wrapper.system.dict.DictWrapper,org.opsli.api.wrapper.system.dict.DictWrapper)>-><java.lang.Integer: int compare(int,int)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper build()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Locale: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.SetOperations opsForSet()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateAvatar(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.opsli.plugins.redis.scripts.RedisScriptCache loadScripts()>-><org.springframework.core.io.ClassPathResource: java.io.InputStream getInputStream()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<synthetic.method.HttpServletResponseImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String)>
<org.opsli.plugins.security.authentication.AfterAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: org.opsli.core.base.dto.LoginUserDto getLoginUserFromToken(java.lang.String)>-><cn.hutool.jwt.JWT: cn.hutool.json.JSONObject getPayloads()>
<org.opsli.core.utils.GlobalPropertiesUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getParentId()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getDescription()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.redisson.properties.RedissonProperties: void <init>(boolean,java.lang.String,org.opsli.plugins.redisson.enums.RedissonType,java.lang.String,int)>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: void <init>()>-><org.opsli.modulars.system.user.web.UserRestController: void <init>()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.extension.service.IService: java.util.List list(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.RefreshAllRecord: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.options.OptionsModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.common.utils.ZipUtils$2: void <init>(int)>-><java.util.HashMap: void <init>(int)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setCreateBy(java.lang.String)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler: void <init>()>
<org.opsli.plugins.redis.msg.RedisMsg: void <clinit>()>-><org.opsli.plugins.redis.msg.RedisMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.core.utils.UserUtil: java.util.List getOrgListByUserId(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<register-finalize <org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean isCharEqual(java.lang.String)>-><java.lang.String: java.lang.String trim()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.core.msg.TokenMsg: java.lang.Integer getCode()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.lang.Thread: java.lang.Thread currentThread()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.table.service.impl.GenTableServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.GenTableMapperImpl getGenTableMapperImpl()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<javassist.CannotCompileException: void <init>(java.lang.Throwable)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.security.provisioning.MutableUser: java.util.Collection getAuthorities()>
<org.opsli.core.base.controller.BaseRestController: void lambda$excelExport$0(java.util.Map,java.lang.String,java.lang.Object)>-><cn.hutool.json.JSONArray: java.lang.Object toArray(java.lang.Class)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateBy(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Vector$Itr: boolean hasNext()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth$Token getToken()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getModuleName()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.api.wrapper.test.TestModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.lang.tree.TreeNodeConfig: java.lang.String getParentIdKey()>
<org.opsli.common.utils.RateLimiterUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.enums.LoginFromEnum: boolean lambda$getByCode$0(java.lang.String,org.opsli.common.enums.LoginFromEnum)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.ProcessEnvironment$ExternalData: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper build()>
<org.opsli.plugins.redis.RedisPlugin: void <init>()>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper getQueryWrapper()>
<org.opsli.plugins.oss.exception.StoragePluginException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getOrgIds()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime date()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.ConstInfo: java.lang.String toString()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: boolean isEnableDemo()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: boolean refreshUserRoles(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.api.base.encrypt.EncryptModel: void setEncryptData(java.lang.String)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findColumns(java.lang.String)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Map)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder tenantId(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<com.google.common.util.concurrent.Futures$CallbackListener: void run()>-><org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.stream.SpinedBuffer$OfInt: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.lang.tree.TreeUtil: java.util.List build(java.util.List,java.lang.Object,cn.hutool.core.lang.tree.TreeNodeConfig,cn.hutool.core.lang.tree.parser.NodeParser)>
<org.opsli.plugins.redisson.RedissonLock: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Optional: java.util.Optional empty()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuFullModel: void setSubModuleName(java.lang.String)>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.invoke.MemberName: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.ClassPool: java.lang.String toString()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getAlwaysShow()>
<org.opsli.plugins.excel.listener.BatchExcelListener: void <init>()>-><com.alibaba.excel.event.AnalysisEventListener: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.ScalarConstantPtg: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByMobile(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getRequestToken(javax.servlet.http.HttpServletRequest)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginModel,org.opsli.modulars.system.login.dto.LoginModel)>-><org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String consistentShuffle(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.core.autoconfigure.conf.CorsConfig: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><org.springframework.web.servlet.config.annotation.CorsRegistration: org.springframework.web.servlet.config.annotation.CorsRegistration allowCredentials(boolean)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isIpv6(java.lang.CharSequence)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: void <clinit>()>-><org.opsli.core.utils.ExcelUtil: void <init>(org.opsli.core.utils.ExcelUtil$1)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: java.util.List getByTableId(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.org.service.impl.SysOrgServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl getUserRoleRefServiceImpl()>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder credentialsNonExpired(boolean)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findListByCus(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object groupBy(java.lang.Object,java.lang.Object[])>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: java.lang.Object getById(java.io.Serializable)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isGeneralWithChinese(java.lang.CharSequence)>
<org.opsli.common.enums.LoginFromEnum: void <clinit>()>-><org.opsli.common.enums.LoginFromEnum: void <init>(java.lang.String,int,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$SettingsParser: java.lang.String toString()>
<org.opsli.plugins.excel.listener.ExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper delAll(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<register-finalize <org.opsli.plugins.generator.enums.JavaType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><com.google.common.util.concurrent.Striped$PowerOfTwoStriped: java.lang.Object get(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.email.msg.EmailMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.cache.msg.EhCacheMsg: java.lang.String getMessage()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.CacheProperties: void <init>()>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.security.Provider: java.lang.Object get(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.listener.BatchExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper delAll(org.opsli.api.base.encrypt.EncryptModel)>-><cn.hutool.json.JSONUtil: cn.hutool.json.JSONObject parseObj(java.lang.Object)>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handlePath(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String appendIfMissing(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence[])>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.general.StartPrint: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void <init>(org.opsli.plugins.redis.RedisPlugin)>-><java.lang.Object: void <init>()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getEnableSwitchTenant()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.TreeMap: java.util.Set entrySet()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.MBeanInfo: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.text.CharSequenceUtil: boolean isNotBlank(java.lang.CharSequence)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.web.LogsRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.util.LazyStreamable: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.core.date.format.FastDateFormat: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.OptionalInt: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean equalsNull(java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.api.base.encrypt.BaseEncrypt: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<register-finalize <org.opsli.modulars.system.SystemMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.json.JSONNull: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.nio.charset.CoderResult: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.RegularImmutableList: int size()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object orderByAsc(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.buffer.PoolChunk: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$1: boolean hasNext()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void <init>(java.util.List,org.opsli.plugins.pagehelper.PageHelperProperties)>-><org.opsli.plugins.pagehelper.PageHelperProperties: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType getConditionType(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.tenant.TenantModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getIzDef()>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void init()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.ibatis.executor.ErrorContext: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.awt.Rectangle: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.method.HandlerMethod: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.oss.OssStorageFactory: org.opsli.plugins.oss.service.OssStorageService getHandle(org.opsli.plugins.oss.enums.OssStorageType)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByArithmetic: com.wf.captcha.base.Captcha createCaptcha()>-><com.wf.captcha.ArithmeticCaptcha: void <init>(int,int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.AbstractSet: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateMobile(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: void <init>(java.lang.String,int,java.lang.Object,long)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.ProcessEnvironment$StringEntry: java.lang.String toString()>
<org.opsli.core.general.StartPrint: void successPrint()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.Loggers$ConsoleLogger: java.lang.String toString()>
<register-finalize <org.opsli.plugins.generator.msg.GeneratorMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.common.utils.Props: java.util.List getList(java.lang.String)>-><org.opsli.common.utils.Props: java.util.List getList(java.lang.String,java.util.List)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.enums.RedissonType: java.lang.String getDesc()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String getSuperAdmin()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.support.config.FastJsonConfig: com.alibaba.fastjson.parser.ParserConfig getParserConfig()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.Integer getSortNo()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.concurrent.atomic.AtomicInteger: int get()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.builders.HttpSecurity addFilterBefore(javax.servlet.Filter,java.lang.Class)>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.lang.Object lambda$getMenuListByUserId$9(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.lang.Class getModelClass()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>-><java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: java.lang.Class getEntityClass()>
<org.opsli.plugins.security.provider.EmailPasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><java.lang.Object: void <init>()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxCreate$DropAsyncSink: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: int size()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.options.OptionsModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.RegularImmutableList: java.lang.Object get(int)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.plugins.excel.listener.BatchExcelListener: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><org.opsli.common.thread.AsyncProcessExecutorByWait: org.opsli.common.thread.AsyncProcessExecutor put(java.lang.Runnable)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.scripts.RedisScriptCache getRedisScriptCache()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><java.lang.Thread: void <init>(java.lang.Runnable)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.logs.OperationLogModel)>-><java.lang.Boolean: boolean booleanValue()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void <init>()>-><java.lang.Object: void <init>()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.HashMap$Node: java.lang.String toString()>
<org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>-><cn.hutool.core.codec.Base64: java.lang.String encode(java.lang.CharSequence)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Object sPop(java.lang.String)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getRealName()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.test.TestModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder enabled(boolean)>
<org.opsli.core.utils.SearchHisUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.logs.service.impl.LogsServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.LogsMapperImpl getLogsMapperImpl()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(javax.servlet.http.HttpServletRequest,java.lang.Double)>-><org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.properties.WafProperties: int getOrder()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper save(org.opsli.api.base.warpper.ApiWrapper)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.core.joran.spi.ConsoleTarget: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.nodes.SequenceNode: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String getErrorMessage()>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.util.CellRangeAddressBase: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.spi.service.contexts.SecurityContext: springfox.documentation.spi.service.contexts.SecurityContextBuilder builder()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>-><org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: void verifyBySign(java.lang.String,java.lang.String)>-><cn.hutool.jwt.JWTValidator: cn.hutool.jwt.JWTValidator of(java.lang.String)>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByEmail(java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: java.lang.Object getOne(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.plugins.sms.exceptions.SmsException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getSwitchTenantId()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.core.utils.TenantUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>-><java.util.ArrayList: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.read.builder.ExcelReaderSheetBuilder readSheet()>
<org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>-><java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: void <clinit>()>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><java.util.concurrent.LinkedBlockingDeque: void <init>(int)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.CheckStrength: int countLetter(java.lang.String,int)>-><org.opsli.common.utils.CheckStrength: int checkCharacterType(char)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findAll()>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Web: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Web: java.lang.String getUploadPath()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><cn.hutool.core.getter.OptNullBasicTypeGetter: java.lang.String getStr(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.core.msg.CoreMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.api.base.encrypt.EncryptModel: void <init>()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.enums.RedissonType: java.lang.String getType()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.opsli.core.utils.UserTokenUtil: org.opsli.plugins.security.exception.AuthException lambda$verify$5()>-><org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.classmate.ResolvedType: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByBean(java.lang.Object)>
<org.opsli.api.wrapper.system.dict.DictDetailModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: java.lang.String toString()>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Generator getGenerator()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.lang.String toString()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.CtNewClass: void addConstructor(javassist.CtConstructor)>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: java.lang.String getusername()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.PrecisionRecord: java.lang.String toString()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: int size()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.waf.msg.WafMsg: java.lang.Integer getCode()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Excel getExcel()>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: org.opsli.api.base.result.ResultWrapper createMenu(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<register-finalize <org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Long del(java.util.Collection)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isLowerCase(java.lang.CharSequence)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper del(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean delete(java.lang.String)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.logs.LogsModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.OptionalLong: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.email.service.EmailPluginImpl: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.net.SocketImpl: java.lang.String toString()>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><cn.hutool.core.date.DateUtil: java.lang.String format(java.util.Date,java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.alibaba.fastjson.JSONArray: int size()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateSelf(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.Boolean getEnable()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.event.BadCredentialsEvent: void <init>(org.opsli.plugins.redis.RedisPlugin)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.filters.aspect.LimiterAop: void <init>()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$1: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getUsername()>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler: java.lang.Class getModelType()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void clearCache(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserRoles(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFields(java.lang.Class)>-><cn.hutool.json.JSONUtil: cn.hutool.json.JSONObject createObj()>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByMobile(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector: int size()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDbName()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper sync(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.github.pagehelper.PageSerializable: java.util.List getList()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><org.redisson.iterator.RedissonListIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setIzExistOrg(java.lang.String)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: java.lang.String toString()>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.jwt.signers.JWTSignerUtil: cn.hutool.jwt.signers.JWTSigner hs256(byte[])>
<org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.core.utils.UserTokenUtil: org.opsli.common.exception.TokenException lambda$getUserIdByToken$1()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List)>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String,int)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePage(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$findMenuTree$1(org.opsli.api.wrapper.system.menu.MenuModel)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.utils.DistributedLockUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getTemplateId()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.api.wrapper.system.user.UserPassword: void setPasswordLevel(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.resolver.dns.SequentialDnsServerAddressStream: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void <init>(org.opsli.plugins.redis.RedisPlugin)>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper getTenantByUsable(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils$3: void <init>(int)>-><java.util.HashMap: void <init>(int)>
<org.opsli.plugins.excel.listener.BatchExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.common.msg.ValidatorMsg: java.lang.String getMessage()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByBean(java.lang.Object)>-><cn.hutool.core.bean.BeanUtil: java.lang.Object getFieldValue(java.lang.Object,java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setEnable(java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder builder()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.gson.internal.bind.TypeAdapters$32: java.lang.String toString()>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePassword(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.listener.ApplicationReadyEventListener: void <init>()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.expression.TypedValue: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getMenuName()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><cn.hutool.core.convert.Convert: java.lang.String toStr(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: void hPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.lang.Object)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><java.util.ArrayList: boolean addAll(java.util.Collection)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><kotlin.collections.AbstractCollection: int size()>
<org.opsli.modulars.generator.importable.service.MySQLDatabaseTableServiceImpl: void <clinit>()>-><org.opsli.common.utils.Props: java.util.List getList(java.lang.String)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.beans.PropertyDescriptor: void <init>(java.lang.String,java.lang.Class)>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: boolean validationField(java.lang.String)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: boolean hashKey(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.invoke.InvokerBytecodeGenerator$CpPatch: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder timestamp(long)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.convert.CustomConversions$StoreConversions: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><cn.hutool.core.lang.tree.Tree: void putExtra(java.lang.String,java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void <init>(org.opsli.modulars.system.user.mapper.UserMapper,org.opsli.modulars.system.role.service.IRoleService,org.opsli.modulars.system.user.service.IUserRoleRefService,org.springframework.security.crypto.password.PasswordEncoder)>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.role.service.impl.RoleServiceImpl getRoleServiceImpl()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: java.util.List getByTableId(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.utils.CaptchaUtil: void validate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>-><cn.hutool.jwt.JWTValidator: cn.hutool.jwt.JWTValidator validateDate()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String getSystemName()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil: boolean delCaptcha(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.SubList$1: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$1: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean del(java.lang.String)>-><org.springframework.data.redis.core.RedisTemplate: java.lang.Boolean delete(java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.security.core.context.SecurityContextImpl: void setAuthentication(org.springframework.security.core.Authentication)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.service.impl.LogsServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.modulars.generator.template.wrapper.GenTemplateModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getByPermissions(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Vector$Itr: boolean hasNext()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getUsername()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.wrapper.system.user.UserPassword: void <init>()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getLoginFrom()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void <init>()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.lang.Double: java.lang.Double valueOf(double)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl: void <init>()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<register-finalize <org.opsli.common.msg.ValidatorMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.core.api.ApiVersionCondition: int compareTo(org.opsli.core.api.ApiVersionCondition,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.api.ApiVersionCondition: int getApiVersion()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isZipCode(java.lang.CharSequence)>
<org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.core.utils.UserUtil: java.lang.Object lambda$getUserAllPermsByUserId$7(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.opsli.core.filters.interceptor.MybatisCryptoInterceptor: void <init>(org.opsli.core.autoconfigure.properties.EncryptProperties)>-><java.lang.Object: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>-><java.lang.Boolean: boolean booleanValue()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.annotation.AnnotationAttributes: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.x509.RDN: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><kotlin.collections.AbstractList$SubList: java.lang.Object get(int)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.cache.service.EhCachePluginImpl: void <init>()>-><org.springframework.cache.jcache.JCacheCacheManager: void <init>()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><cn.hutool.json.JSONArray: int size()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><javax.servlet.ServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<sun.security.provider.SeedGenerator$1: java.lang.Void run()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.update.Update: java.lang.Object set(java.lang.Object,java.lang.Object)>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void callEntry_synthetic()>-><synthetic.method.HttpServletResponseImpl: void <init>()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handlePath(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERGeneralString: java.lang.String toString()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>-><cn.hutool.jwt.JWTValidator: cn.hutool.jwt.JWTValidator validateAlgorithm(cn.hutool.jwt.signers.JWTSigner)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.SubList$1: boolean hasNext()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType[] values()>-><java.lang.Object: java.lang.Object clone()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.common.api.ResultVoMap: void <init>()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.common.utils.FieldUtil: java.lang.String upperFirstLetter(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder and()>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper getTenantByUsable(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.LinkedList: int size()>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Enum: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>-><org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.io.ByteArrayInputStream: void <init>(byte[])>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.mapping.model.Property: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isEmail(java.lang.CharSequence)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.msg.CoreMsg: java.lang.Integer getCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedList: int size()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.springframework.boot.web.servlet.FilterRegistrationBean: void setFilter(javax.servlet.Filter)>
<org.opsli.core.autoconfigure.conf.CorsConfig: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><org.springframework.web.servlet.config.annotation.CorsRegistration: org.springframework.web.servlet.config.annotation.CorsRegistration maxAge(long)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.oss.enums.OssStorageType: void <clinit>()>-><org.opsli.plugins.oss.enums.OssStorageType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.tenant.web.TenantRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.SubList$1: java.lang.Object next()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.security.provisioning.MutableUser: java.lang.String getUsername()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean isEnable()>
<org.opsli.common.utils.ZipUtils$2: void <init>(int)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.PrintSetupRecord: java.lang.String toString()>
<org.opsli.core.persistence.Page: org.opsli.core.persistence.Page$PageData getPageData()>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean isCredentialsNonExpired(java.lang.String,int)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime date(long)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.alibaba.excel.ExcelReader: void finish()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.ApiSelectorBuilder: springfox.documentation.spring.web.plugins.ApiSelectorBuilder paths(java.util.function.Predicate)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.zip.ZipEntry: java.lang.String toString()>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1BitString: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getCodeTitle()>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: java.util.List getByTableId(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object in(java.lang.Object,java.util.Collection)>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String format(java.lang.CharSequence,java.lang.Object[])>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><javax.xml.transform.TransformerFactoryConfigurationError: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.plugins.generator.strategy.create.CodeBuilder: com.jfinal.kit.Kv createKv(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: org.opsli.api.base.result.ResultWrapper createMenu(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.core.codec.Base64: java.lang.String encode(java.lang.CharSequence)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getUserId()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getSign()>
<org.opsli.core.utils.ValidatorUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Generator getGenerator()>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.CaptchaUtil: void <clinit>()>-><com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.common.utils.OutputStreamUtil: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.ServletResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder timestamp(long)>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void callEntry_synthetic()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.tools.oss.web.OssRestController: void <init>()>-><java.lang.Object: void <init>()>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginCodeModel,org.opsli.modulars.system.login.dto.LoginCodeModel)>-><org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType getTypeByStr(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.github.pagehelper.Page: java.lang.String toString()>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper getDictListByCode(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper setMsg(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getDictValue()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void <init>()>-><java.lang.Object: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder msg(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$getMenuAndPermsTree$0(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getUrl()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper$StateCodeEnum: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.spi.service.contexts.SecurityContextBuilder: springfox.documentation.spi.service.contexts.SecurityContext build()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.AbstractCollection: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.plugins.generator.utils.EnjoyUtil: java.lang.String renderByStr(java.lang.String,com.jfinal.kit.Kv)>-><com.jfinal.template.Engine: com.jfinal.template.Template getTemplateByString(java.lang.String)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.net.StandardSocketOptions$StdSocketOption: java.lang.String toString()>
<org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.DefaultColWidthRecord: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String format(java.lang.CharSequence,java.lang.Object[])>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.modulars.system.org.web.SysOrgRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.core.msg.CoreMsg: void <clinit>()>-><org.opsli.core.msg.CoreMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.springframework.data.redis.core.RedisTemplate redisTemplate()>-><org.springframework.data.redis.serializer.RedisSerializer: org.springframework.data.redis.serializer.RedisSerializer string()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.common.utils.ZipUtils$1: void <init>(int)>-><java.util.HashMap: void <init>(int)>
<org.opsli.core.filters.aspect.SQLDataAop: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.internal.logging.AbstractInternalLogger: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.apache.ibatis.reflection.wrapper.BeanWrapper: org.apache.ibatis.reflection.MetaObject instantiatePropertyValue(java.lang.String,org.apache.ibatis.reflection.property.PropertyTokenizer,org.apache.ibatis.reflection.factory.ObjectFactory)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<org.opsli.plugins.security.exception.handler.AuthEntryHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.opsli.plugins.security.exception.AuthException)>-><java.lang.Integer: int intValue()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder builder()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.SpringContextHolder: void <init>()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.common.enums.LoginFromEnum: java.lang.String getType()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxCreate$BufferAsyncSink: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><org.opsli.plugins.security.eventbus.AbstractSpringSecuritySecurityEventBus: void <init>()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.opsli.plugins.security.eventbus.AbstractSpringSecuritySecurityEventBus: void setApplicationContext(org.springframework.context.ApplicationContext)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.security.provisioning.MutableUser: java.lang.String getUsername()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.core.eventbus.AbstractSpringEventBus: void setApplicationContext(org.springframework.context.ApplicationContext)>-><org.opsli.core.eventbus.AbstractSpringEventBus: void scanConsumer(java.lang.String)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.ClassPool: javassist.CtClass getCtClass(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.scheduler.Schedulers$CachedScheduler: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.utils.VerificationCodeUtil: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.sms.SmsConfig: void <init>()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><cn.hutool.json.JSONObject: java.lang.Object get(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Object: java.lang.String toString()>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.filters.aspect.LimiterAop: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.VerificationCodeUtil: void checkEmailCode(java.lang.String,java.lang.String,java.lang.String)>-><org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream distinct()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictDetailModel)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<cn.hutool.core.convert.AbstractConverter: java.lang.String convertToStr(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper del(org.opsli.api.base.encrypt.EncryptModel)>-><cn.hutool.core.getter.OptNullBasicTypeGetter: java.lang.String getStr(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByEmail(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper: void <init>()>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.common.utils.FieldUtil: java.lang.String getFileName(org.opsli.common.utils.FieldUtil$SFunction)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.GlobalPropertiesUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getDescription()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor$1: void <init>(org.opsli.common.thread.AsyncProcessor,java.util.function.Function)>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><springfox.documentation.builders.ParameterBuilder: springfox.documentation.builders.ParameterBuilder modelRef(springfox.documentation.schema.ModelReference)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchOneself()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><java.lang.Class: int getModifiers()>
<org.opsli.common.exception.TokenException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.common.utils.RateLimiterUtil: void <clinit>()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder maximumSize(long)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void delByTableIds(java.lang.String[])>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<org.opsli.modulars.generator.importable.service.MySQLDatabaseTableServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper createCrypto(java.lang.String)>-><opsli.plugins.crypto.enums.CryptoAsymmetricType: opsli.plugins.crypto.enums.CryptoAsymmetricType getCryptoType(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.math.BigInteger: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.ibatis.mapping.ResultMapping: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePage(javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper save(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean isEnable()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<synthetic.method.HttpServletRequestImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.sms.msg.SmsMsgCodeEnum: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.utils.UserUtil: boolean refreshUserRoles(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ddf.EscherRecord: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.api.wrapper.system.user.UserRoleRefModel: java.lang.String getUserId()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.UserDetailModel: java.lang.String getUsername()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><com.google.common.collect.Maps: java.util.TreeMap newTreeMap()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: java.util.List getByTableId(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List transformTs2Ms(java.util.List)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.menu.service.impl.MenuServiceImpl getMenuServiceImpl()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String getUserId()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.redis.msg.RedisMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><org.opsli.common.enums.DictType: java.lang.String getType()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$1: boolean hasNext()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.DeltaRecord: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: void <init>()>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<org.opsli.plugins.pagehelper.PageHelperProperties: java.lang.Boolean getBanner()>-><java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper sync(java.lang.String)>-><org.opsli.plugins.generator.SqlSyncUtil: void execute(org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.Period: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler: java.util.List access$302(org.opsli.plugins.security.handler.LoginHandler,java.util.List)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><kotlin.collections.AbstractCollection: boolean add(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean isCredentialsNonExpired(java.lang.String,int)>-><java.lang.Long: long parseLong(java.lang.String)>
<org.opsli.modulars.system.dict.service.impl.DictServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.UseSelFSRecord: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.buffer.PoolArena: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><springfox.documentation.builders.ParameterBuilder: void <init>()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getSubModuleName()>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.filters.aspect.LimiterAop: void <init>()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setType(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.sms.msg.SmsMsgCodeEnum: java.lang.Integer getCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.LocalTime: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.core.UnsynchronizedAppenderBase: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.modulars.system.role.service.impl.RoleServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.RoleMapperImpl getRoleMapperImpl()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: void <init>(org.opsli.plugins.security.properties.AuthProperties)>-><java.lang.Object: void <init>()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean add(java.lang.Object)>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.filter.WafFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getServletPath()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.modulars.system.options.service.impl.SysOptionsServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: void setSubModuleName(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxCreate$LatestAsyncSink: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.gson.internal.bind.TypeAdapters$31: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.Docket securityContexts(java.util.List)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.alibaba.excel.ExcelWriter: void finish()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.general.StartPrint: void successPrint()>-><cn.hutool.core.lang.Console: void log(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.login.web.LoginCommonRestController getLoginCommonRestController()>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel getModel()>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.core.cache.CacheUtil: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>-><cn.hutool.jwt.signers.JWTSignerUtil: cn.hutool.jwt.signers.JWTSigner hs256(byte[])>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String getUserId()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getParentId()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.user.service.impl.UserOrgRefServiceImpl: void <init>()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper createCrypto(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper build()>-><org.opsli.api.base.result.ResultWrapper: void <init>(java.lang.String,int,java.lang.Object,long)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper importTables(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.common.thread.AsyncProcessor$1: void onSuccess(java.lang.Object)>-><org.opsli.common.thread.AsyncProcessor$CallbackResult: void setResult(java.lang.Object)>
<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.xssf.streaming.SXSSFCell: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler: org.springframework.security.authentication.AuthenticationManager access$102(org.opsli.plugins.security.handler.LoginHandler,org.springframework.security.authentication.AuthenticationManager)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder addListener(org.opsli.plugins.security.handler.LoginAccessDeniedListener)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.cache.msg.EhCacheMsg: java.lang.Integer getCode()>
<com.jfinal.template.stat.ast.Output: void exec(com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setEnable(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object get(java.lang.Object)>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findListByCus(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><synthetic.method.UserMapperImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks: void <init>()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: java.lang.Object get(int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper enableAccount(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void delByTableIds(java.lang.String[])>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper del(org.opsli.api.base.encrypt.EncryptModel)>-><cn.hutool.json.JSONUtil: cn.hutool.json.JSONObject parseObj(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.TokenProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String getSecret()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getPackageName()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void <init>(org.opsli.core.security.service.UidUserDetailDetailServiceImpl)>
<org.opsli.common.utils.Props: void load()>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.extension.service.IService: java.util.List list(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.extension.service.IService: long count(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.waf.msg.WafMsg: java.lang.Integer getCode()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: org.opsli.common.thread.AsyncProcessor getProcessor(java.lang.String)>-><org.opsli.common.thread.AsyncProcessor: void <init>()>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><org.opsli.core.utils.SpringContextHolder: java.lang.Object getBean(java.lang.Class)>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Double zIncrementScore(java.lang.String,java.lang.String,double)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.core.autoconfigure.properties.CacheProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.CacheProperties: java.lang.String getPrefix()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.dict.service.impl.DictDetailServiceImpl: void <init>()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder builder()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.common.utils.FieldUtil: java.lang.String underlineToHump(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<reactor.core.Exceptions$ReactiveException: java.lang.Throwable fillInStackTrace()>-><org.opsli.common.exception.EmptyException: java.lang.Throwable fillInStackTrace()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: boolean containsInterceptor(org.apache.ibatis.session.Configuration,org.apache.ibatis.plugin.Interceptor)>-><org.apache.ibatis.session.Configuration: java.util.List getInterceptors()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.AnnotationsAttribute: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper getByCode(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.core.AppenderBase: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.stat.ast.Text: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.base.entity.BaseEntity transformM2T(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.StackTraceElement: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getType()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.builders.PathSelectors: java.util.function.Predicate any()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.zone.TzdbZoneRulesProvider: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><io.netty.util.collection.IntObjectHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class)>-><org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.mail.MessagingException: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil: void validate(java.lang.String,java.lang.String)>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: void <init>(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.resolver.dns.DefaultDnsCache$DefaultDnsCacheEntry: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.provider.EmailCodeAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.LinkedList: boolean contains(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.api.base.encrypt.EncryptModel: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.boot.ansi.AnsiColor: java.lang.String toString()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: void <clinit>()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findListByParentId(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<org.opsli.core.persistence.Page: org.opsli.core.persistence.Page$PageData getPageData()>-><com.github.pagehelper.PageSerializable: long getTotal()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.JWTBizUtil: java.util.Date getExpiredDateFromToken(java.lang.String)>-><cn.hutool.core.getter.OptNullBasicTypeGetter: java.util.Date getDate(java.lang.Object)>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: java.util.List getByTableId(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object orderByAsc(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper delAll(org.opsli.api.base.encrypt.EncryptModel)>-><cn.hutool.core.getter.OptNullBasicTypeGetter: java.lang.String getStr(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder expiresAtTs(java.lang.Long)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getJavaFieldTypes()>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.stream.Nodes$IntFixedNodeBuilder: java.lang.String toString()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.role.service.impl.RoleServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientAddressBySingle(javax.servlet.http.HttpServletRequest)>-><org.opsli.common.utils.IPUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.core.msg.TokenMsg: java.lang.String getMessage()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.context.Context2: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$1: java.lang.Object next()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean canEqual(java.lang.Object)>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: boolean isEmpty()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel build()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.common.msg.CommonMsg: java.lang.Integer getCode()>
<org.opsli.plugins.excel.msg.ExcelMsg: void <clinit>()>-><org.opsli.plugins.excel.msg.ExcelMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.OptionalDouble: java.lang.String toString()>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyBySpec: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.waf.filter.WafFilter: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.springframework.data.redis.core.RedisTemplate redisTemplate()>-><org.springframework.data.redis.core.RedisTemplate: void setValueSerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.security.handler.SecurityErrorHandler: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<javax.servlet.http.HttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.api.wrapper.system.user.ToUserPassword: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getRoleIdsByUserId(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String filterParamString(java.lang.String)>-><org.opsli.plugins.waf.util.XSSFilterKit: java.lang.String stripXSS(java.lang.String)>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor: void executeTaskAndCallback(java.util.concurrent.Callable,java.util.function.Function)>-><com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.core.autoconfigure.conf.CorsConfig: void addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)>-><org.springframework.web.servlet.config.annotation.CorsRegistration: org.springframework.web.servlet.config.annotation.CorsRegistration allowedMethods(java.lang.String[])>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String addPrefixIfNot(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<register-finalize <org.opsli.plugins.oss.enums.OssStorageType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.lang.tree.TreeNodeConfig: java.lang.String getWeightKey()>
<org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.generator.strategy.create.CodeBuilder: java.io.OutputStream getOutputStream(javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.opsli.plugins.waf.util.SQLFilterKit: java.lang.String stripSQL(java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.utils.FieldUtil: java.lang.String underlineToHump(java.lang.String)>-><java.lang.StringBuilder: int length()>
<org.opsli.modulars.gentest.carinfo.service.impl.TestCarServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.TestCarMapperImpl getTestCarMapperImpl()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List transformMs2Ts(java.util.List)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder builder()>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: void <clinit>()>-><java.util.HashMap: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.x509.AVA: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.Tok: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonLock redissonLock(org.opsli.plugins.redisson.RedissonManager)>-><org.opsli.plugins.redisson.RedissonLock: void <init>(org.opsli.plugins.redisson.RedissonManager)>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.gentest.carinfo.service.impl.TestCarServiceImpl: void <init>()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper build()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry: java.lang.Object antMatchers(java.lang.String[])>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><cn.hutool.json.JSONUtil: cn.hutool.json.JSONObject parseObj(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictDetailModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList: int size()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List getExtendsBeanList(java.util.List,java.lang.Class)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Generator getGenerator()>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getUserAgent()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List getFieldTypes()>-><org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.opsli.plugins.security.exception.handler.AuthEntryHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.opsli.plugins.security.exception.AuthException)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getErrorMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.cglib.core.Signature: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByMobile(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isBlank(java.lang.CharSequence)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.VerificationCodeUtil: void checkMobileCode(java.lang.String,java.lang.String,java.lang.String)>-><org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByEmail(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.core.base.dto.LoginUserDto: java.lang.String getLoginFrom()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.boot.ansi.AnsiBackground: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><org.opsli.api.wrapper.system.menu.MenuModel: void setType(java.lang.String)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.io.ByteArrayInputStream: void close()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int getDatabase()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.core.util.ReflectUtil: boolean hasField(java.lang.Class,java.lang.String)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper insertAndDetail(org.opsli.modulars.generator.template.wrapper.GenTemplateAndDetailModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getLabel()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<javax.servlet.ServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getNo()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.context.Context1: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.write.builder.ExcelWriterSheetBuilder writerSheet(java.lang.Integer,java.lang.String)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getType()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void setHost(java.lang.String)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: boolean isEnableDemo()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.common.utils.CheckStrength: int countLetter(java.lang.String,int)>-><java.lang.String: char[] toCharArray()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.api.wrapper.system.user.UserRoleRefModel: java.lang.String getDefRoleId()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<javassist.bytecode.ParameterAnnotationsAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setIzManual(java.lang.Boolean)>
<org.opsli.common.exception.JwtException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.LinkedList: java.lang.Object get(int)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean removeIf(java.util.function.Predicate)>
<org.opsli.plugins.security.utils.PasswordUtil: boolean matches(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String,java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String subBetween(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.entity.BaseEntity: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByMobile(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(javax.servlet.http.HttpServletRequest,java.lang.Double)>-><org.opsli.common.utils.IPUtil: java.lang.String getClientIdBySingle(javax.servlet.http.HttpServletRequest)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.PrintGridlinesRecord: java.lang.String toString()>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: org.opsli.api.wrapper.system.dict.DictDetailModel getModel()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayList$SubList: int size()>
<org.opsli.plugins.redis.RedisPlugin: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String,int)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.ValueOperations opsForValue()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper copy(org.opsli.modulars.generator.template.wrapper.GenTemplateCopyModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.handler.AuthErrorHandler: void <init>()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByEmail(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.utils.OrgUtil: void handleOrgIdGroupCondition(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.ChronoField: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.core.eventbus.SpringEventBus: void <init>()>-><org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: void setName(java.lang.String)>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.common.utils.RateLimiterUtil: java.util.Map lambda$enter$0(java.lang.Double,java.lang.String)>-><com.google.common.util.concurrent.RateLimiter: com.google.common.util.concurrent.RateLimiter create(double)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.DoubleAdder: java.lang.String toString()>
<org.opsli.modulars.generator.table.service.impl.GenTableServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl getGenTableColumnServiceImpl()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.lang.Class getModelClass()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateAvatar(org.opsli.api.wrapper.system.user.UserAvatarModel)>-><org.opsli.api.wrapper.system.user.UserModel: void <init>()>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.compiler.CompileError: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.role.service.impl.RoleMenuRefServiceImpl: void <init>()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.opsli.plugins.excel.ExcelPlugin: java.util.List getExtendsBeanList(java.util.List,java.lang.Class)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.Map getJavaFieldTypes()>-><org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.modulars.generator.importable.service.DatabaseTableService getDatabaseTableService()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByEmail(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.Vector: boolean removeIf(java.util.function.Predicate)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Arrays$ArrayList: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.classic.LoggerContext: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByUsername(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.redis.scripts.RedisScriptCache: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.springframework.data.redis.core.RedisTemplate redisTemplate()>-><org.springframework.data.redis.core.RedisTemplate: void setHashKeySerializer(org.springframework.data.redis.serializer.RedisSerializer)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.stat.ast.Define: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getId()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder: org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder addListener(org.opsli.plugins.security.handler.LoginAccessSuccessListener)>-><java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateAvatar(org.opsli.api.wrapper.system.user.UserAvatarModel)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setId(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.tools.common.bean.VerificationCodeBean: void <init>(org.opsli.plugins.email.EmailPlugin,org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.utils.UserUtil: java.util.List getOrgByCurrUser()>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.Provider: java.lang.String toString()>
<synthetic.method.TenantMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.web.LoginByCodeRestController: void <init>()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor$CallbackResult: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.collect.ImmutableEnumSet: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.CryptoUtil: java.lang.String symmetricEncryptToStr(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: void <init>(com.fasterxml.classmate.TypeResolver)>-><com.fasterxml.classmate.TypeResolver: void <init>()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.String: int length()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.IsoFields$Unit: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERUniversalString: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void pageHelperBegin()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map,java.lang.String,org.opsli.core.persistence.querybuilder.conf.WebQueryConf)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.plugins.waf.util.SQLFilterKit: java.lang.String stripSQL(java.lang.String)>-><org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$StateCodeEnum: java.lang.String getMsg()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)>-><java.lang.String: int hashCode()>
<org.opsli.core.cache.SecurityCache: void hAllPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.Map)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getPrincipal()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.core.utils.CaptchaUtil: void validate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder builder()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.RegularImmutableList: int size()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>-><org.opsli.core.utils.UserTokenUtil: java.lang.String getRequestToken(javax.servlet.http.HttpServletRequest)>
<javassist.bytecode.ParameterAnnotationsAttribute: javassist.bytecode.annotation.Annotation[][] getAnnotations()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.String toString()>
<org.opsli.core.filters.aspect.SearchHisAop: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$1: boolean hasNext()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void clearCache(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserAllPerms(java.lang.String)>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<org.opsli.core.base.service.impl.CrudServiceImpl: java.lang.Class getInnerModelClazz()>-><org.springframework.core.GenericTypeResolver: java.lang.Class[] resolveTypeArguments(java.lang.Class,java.lang.Class)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder data(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><reactor.util.context.ContextN: java.lang.Object get(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition combine(org.opsli.core.api.ApiVersionCondition)>-><org.opsli.core.api.ApiVersionCondition: int getApiVersion()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.PasswordRev4Record: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><java.lang.Package: java.lang.String getName()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.sql.Timestamp: long getTime()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String getDescription()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.baomidou.mybatisplus.extension.service.IService: long count(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>-><java.util.Optional: java.util.Optional empty()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList: int size()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: org.opsli.plugins.generator.strategy.create.CodeBuilder valueOf(java.lang.String)>-><java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: int length()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.generator.msg.GeneratorMsg: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Map)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.core.general.StartPrint: void errorPrint(java.lang.String)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.utils.ExcelUtil: java.util.List radExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String)>-><org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyList: int size()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDriverClassName()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.web.LoginByAccountRestController: void <init>()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.common.msg.ValidatorMsg: void <clinit>()>-><org.opsli.common.msg.ValidatorMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.net.URISyntaxException: java.lang.String getMessage()>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getCredentials()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.json.JSONArray: java.lang.String toString()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getCodeTitleBrief()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor: void executeTaskAndCallback(java.util.concurrent.Callable,java.util.function.Function)>-><com.google.common.util.concurrent.AbstractListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setTenantId(java.lang.String)>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setUsername(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper delAll(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.FieldInfo: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List sortWrappers(java.util.List)>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateSelf(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setMobile(java.lang.String)>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setTenantId(java.lang.String)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.alibaba.excel.read.builder.ExcelReaderSheetBuilder: com.alibaba.excel.read.metadata.ReadSheet build()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getTenantId()>
<org.opsli.plugins.redisson.RedissonManager: void <init>(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByEmail(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String getDescription()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void <init>(org.opsli.plugins.security.properties.AuthProperties,org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl,org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl,org.opsli.core.security.service.UidUserDetailDetailServiceImpl)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl getAccessDeniedHandlerImpl()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: org.springframework.security.authentication.AuthenticationManager authenticationManagerBean()>-><org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter: org.springframework.security.authentication.AuthenticationManager authenticationManagerBean()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.EncryptProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.EncryptProperties: java.lang.String getKey()>
<org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int parseInt(java.lang.String)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: void <init>()>-><org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper enableAccount(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void <init>()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.springframework.data.redis.connection.RedisSentinelConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><java.lang.Integer: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.plugins.redisson.annotation.DistributedLockHandler: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redisson.RedissonLock getRedissonLock()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.collection.ListUtil: java.util.List list(boolean)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.http.HttpStatus: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.plugins.security.provider.UsernamePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks getDefaultPreAuthenticationChecks()>
<javassist.CannotCompileException: void <init>(java.lang.Throwable)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.bouncycastle.asn1.DERBitString: org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.enums.LoginModelType: void <clinit>()>-><org.opsli.common.enums.LoginModelType: void <init>(java.lang.String,int)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.core.utils.DictUtil: java.util.Map lambda$getDictList$2(java.lang.String,java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><org.opsli.plugins.redis.RedisPlugin: java.util.Set zReverseRange(java.lang.String,long,long)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.filters.interceptor.MybatisCryptoInterceptor: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.json.JSONObject: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.provider.EmailPasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$EmptyList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.text.ParsePosition: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserIdByToken()>-><org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder accountNonLocked(boolean)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.PermissionCollection: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.msg.JwtMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.AbstractList: boolean add(java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getUsername()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.BoundSheetRecord: java.lang.String toString()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder msg(java.lang.String)>
<org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Package: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.CtClassType: void addMethod(javassist.CtMethod)>
<org.opsli.plugins.security.UserDetailModel: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder builder()>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: void <init>()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: void <init>()>
<cn.hutool.core.convert.impl.EnumConverter: java.lang.Enum tryConvertEnum(java.lang.Object,java.lang.Class)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: org.opsli.plugins.redisson.enums.RedissonType getType()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getRoleId()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setId(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><java.lang.System: long currentTimeMillis()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><synthetic.method.HttpServletRequestImpl: java.lang.String getHeader(java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl getGenTableColumnServiceImpl()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><org.opsli.core.base.service.impl.CrudServiceImpl: boolean deleteAll(java.lang.String[])>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler: java.util.List access$702(org.opsli.plugins.security.handler.LoginHandler,java.util.List)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector$Itr: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1Boolean: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spi.service.contexts.SecurityContext securityContext()>-><springfox.documentation.spi.service.contexts.SecurityContextBuilder: springfox.documentation.spi.service.contexts.SecurityContextBuilder securityReferences(java.util.List)>
<org.opsli.core.autoconfigure.conf.CorsConfig: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(java.lang.Integer,java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String filterParamString(java.lang.String)>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.springframework.data.redis.core.RedisTemplate redisTemplate()>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties: java.util.Map getDatasource()>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String addPrefixIfNot(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: java.lang.Void lambda$execute$0(java.util.concurrent.CountDownLatch,org.opsli.common.thread.AsyncProcessor$CallbackResult)>-><java.lang.Boolean: boolean booleanValue()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.Collections$SynchronizedCollection: boolean removeIf(java.util.function.Predicate)>
<org.opsli.plugins.security.exception.handler.AuthEntryHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.opsli.plugins.security.exception.AuthException)>-><org.opsli.plugins.security.exception.AuthException: java.lang.Integer getCode()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.role.RoleModel getUserDefRoleByUserId(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.exception.EmptyException: void <init>()>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.api.ApiVersionCondition: int compareTo(java.lang.Object,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.api.ApiVersionCondition: int compareTo(org.opsli.core.api.ApiVersionCondition,javax.servlet.http.HttpServletRequest)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserNameByToken(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.autoconfigure.conf.SecurityConfig: org.springframework.security.authentication.AuthenticationManager authenticationManager()>-><org.springframework.security.authentication.ProviderManager: void setEraseCredentialsAfterAuthentication(boolean)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.common.utils.RateLimiterUtil: java.util.Map lambda$enter$0(java.lang.Double,java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: void <init>()>
<org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>-><org.opsli.plugins.generator.enums.JavaType: org.opsli.plugins.generator.enums.JavaType[] values()>
<org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.Integer getCode()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isLetter(java.lang.CharSequence)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.core.msg.CoreMsg: java.lang.Integer getCode()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory: java.lang.String toString()>
<org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto build()>-><org.opsli.core.base.dto.LoginUserDto: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><cn.hutool.json.JSONArray: boolean isEmpty()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.IsoFields$Field$1: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: void <init>()>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ObjRecord: java.lang.String toString()>
<org.opsli.api.wrapper.gentest.user.TestUserModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.plugins.generator.enums.DataBaseType getDbType()>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateEmail(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.plugins.generator.enums.DataBaseType getDbType()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties: java.util.Map getDataSourceInfoMap()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.TenantUtil: void <init>()>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String getPassword()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByEmail(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isBlank(java.lang.CharSequence)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.options.service.impl.SysOptionsServiceImpl: void <init>()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void setUserName(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.AtomicIntegerArray: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean delete(java.lang.String)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: boolean removeById(java.io.Serializable)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void init()>-><org.springframework.context.support.AbstractApplicationContext: java.util.Map getBeansOfType(java.lang.Class)>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long increment(java.lang.String)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Long increment(java.lang.String,long)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: boolean isEnableDemo()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.data.redis.core.DefaultSetOperations: java.lang.Boolean isMember(java.lang.Object,java.lang.Object)>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.modulars.generator.table.web.GenTableRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Long increment(java.lang.String)>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserTokenUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getUserName()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setEnableSwitchTenant(java.lang.String)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.common.utils.Props: void load()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.common.utils.IPUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><synthetic.method.HttpServletRequestImpl: java.lang.String getRemoteAddr()>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.msg.CoreMsg: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Web: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.core.utils.ExcelUtil: org.opsli.core.utils.ExcelUtil getInstance()>
<org.opsli.core.listener.ApplicationFailedEventListener: void onApplicationEvent(org.springframework.boot.context.event.ApplicationFailedEvent)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getIzTenantAdmin()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder tenantId(java.lang.String)>
<org.opsli.core.general.StartPrint: void errorPrint(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(java.lang.Integer,java.lang.String,java.lang.Throwable)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.opsli.core.autoconfigure.properties.CacheProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType getTypeByStr(java.lang.String)>-><cn.hutool.core.lang.Validator: boolean isMobile(java.lang.CharSequence)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.ClassPool: javassist.ClassPath appendSystemPath()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile: java.io.InputStream getInputStream()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder: org.opsli.core.base.controller.BaseRestController$ExcelExportCache build()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper: void <init>()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.core.msg.CoreMsg: java.lang.Integer getCode()>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByCode(java.lang.String)>-><java.util.stream.ReferencePipeline: java.util.Optional findFirst()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object ge(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.security.eventbus.AbstractSpringSecuritySecurityEventBus: void setApplicationContext(org.springframework.context.ApplicationContext)>-><org.opsli.plugins.security.eventbus.AbstractSpringSecuritySecurityEventBus: void scanConsumer(java.lang.String)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType getTypeByStr(java.lang.String)>-><cn.hutool.core.lang.Validator: boolean isEmail(java.lang.CharSequence)>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder: org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder type(java.lang.String)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getTables()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: void setIzDef(java.lang.String)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.TabIdRecord: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: java.lang.String get(java.lang.String)>
<org.opsli.plugins.cache.service.EhCachePluginImpl: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.SelectionRecord: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$findMenuTree$1(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getComponent()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.filter.WafFilter: void <init>()>
<org.opsli.core.utils.UserUtil: boolean refreshUserMenus(java.lang.String)>-><org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findListByParentId(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean delete(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Byte: java.lang.String toString()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.util.zip.ZipEntry: void <init>(java.lang.String)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<javax.servlet.ServletRequestWrapper: java.util.Map getParameterMap()>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.TabularType: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder: org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder defRoleId(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByEmail(java.lang.String,java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String blankToDefault(java.lang.CharSequence,java.lang.String)>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.filter.WafFilter: void setUrlExclusion(java.util.Set)>
<org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>
<org.opsli.common.utils.IPUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.text.CharSequenceUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: boolean containsInterceptor(org.apache.ibatis.session.Configuration,org.apache.ibatis.plugin.Interceptor)>-><java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getIcon()>
<org.opsli.common.utils.FieldUtil: java.lang.String getFileName(org.opsli.common.utils.FieldUtil$SFunction)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.channel.AbstractChannel: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: void <clinit>()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><org.opsli.api.wrapper.system.menu.MenuModel: void setHidden(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(int,java.lang.String)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.Arrays$ArrayList: boolean contains(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DecimalStyle: java.lang.String toString()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.common.utils.FieldUtil: java.lang.String upperFirstLetter(java.lang.String)>-><java.lang.String: java.lang.String toUpperCase()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto()>-><org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.logs.service.impl.LogsServiceImpl: void <init>()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder data(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.WSBoolRecord: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: void <init>(java.lang.String,int,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.lang.Validator: boolean isIpv6(java.lang.CharSequence)>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.common.enums.ExcelOperate: void <clinit>()>-><org.opsli.common.enums.ExcelOperate: void <init>(java.lang.String,int)>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientIdBySingle(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.net.NetUtil: java.lang.String getMultistageReverseProxyIp(java.lang.String)>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: void callEntry_synthetic()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: com.jfinal.kit.Kv createKv(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><com.jfinal.kit.Kv: com.jfinal.kit.Kv by(java.lang.Object,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: boolean refreshUserAllPerms(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.logs.OperationLogModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: void instance(com.github.pagehelper.PageInfo,java.util.List)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.CacheProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.CacheProperties: java.lang.String getPrefix()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Object sPop(java.lang.String)>-><org.springframework.data.redis.core.DefaultSetOperations: java.lang.Object pop(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getDictValue()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.common.utils.FieldUtil: java.lang.String upperFirstLetter(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.properties.AuthProperties: void <init>()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long del(java.util.Collection)>-><org.springframework.data.redis.core.RedisTemplate: java.lang.Long delete(java.util.Collection)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><ch.qos.logback.classic.Logger: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getHidden()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.JWTBizUtil: java.util.Date getExpiredDateFromToken(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.core.util.ReflectUtil: boolean hasField(java.lang.Class,java.lang.String)>
<sun.security.provider.SeedGenerator$1: java.lang.Void run()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.gentest.user.TestUserModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><jdk.net.ExtendedSocketOptions$ExtSocketOption: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientIdBySingle(javax.servlet.http.HttpServletRequest)>
<io.netty.resolver.dns.DnsServerAddressStreamProviders: void <clinit>()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<org.opsli.modulars.system.menu.service.impl.MenuServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.MenuMapperImpl getMenuMapperImpl()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.provider.MobilePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.service.LoadUserDetailServiceFactory getLoadUserDetailServiceFactory()>
<org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: java.util.List getFiles(java.lang.String)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.SingletonImmutableList: int size()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.RegularImmutableList: java.lang.Object get(int)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><java.lang.Class: int getModifiers()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<org.opsli.core.utils.CaptchaUtil: void validate(java.lang.String,java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.utils.PasswordUtil: boolean isCredentialsNonExpired(java.lang.String,int)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.core.msg.TokenMsg: void <clinit>()>-><org.opsli.core.msg.TokenMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder code(int)>
<org.opsli.plugins.redisson.RedissonManager: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><java.lang.String: boolean endsWith(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.WriteProtectRecord: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.Year: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.convert.support.GenericConversionService$ConvertersForPair: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: void verifyBySign(java.lang.String,java.lang.String)>-><cn.hutool.core.codec.Base64: java.lang.String encode(java.lang.CharSequence)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.TenantUtil: org.opsli.api.wrapper.system.tenant.TenantModel getTenant(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void post(java.lang.Object)>-><com.google.common.eventbus.EventBus: void post(java.lang.Object)>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper enableTenant(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.TimeInterval timer()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object in(java.lang.Object,java.util.Collection)>
<org.opsli.common.msg.ValidatorMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.plugins.excel.listener.BatchExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.String toString()>
<org.opsli.common.utils.FieldUtil: java.lang.String upperFirstLetter(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByArithmetic: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getErrorMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Character$Subset: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.SubList$1: boolean hasNext()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.core.listener.ApplicationReadyEventListener: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean isNumeric(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictModel)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.context.Context0: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.Map getJavaFieldTypesBySafety()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.core.persistence.Page: void pageHelperBegin()>-><org.opsli.core.persistence.Page: void pageHelperBegin(boolean)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<org.opsli.common.utils.UniqueStrGeneratorUtils: java.lang.String generator(long)>-><org.opsli.common.utils.HashIdsUtil: java.lang.String encode(long[])>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isNotEmpty(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateAvatar(org.opsli.api.wrapper.system.user.UserAvatarModel)>-><org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.common.enums.LoginFromEnum: boolean lambda$getByCode$0(java.lang.String,org.opsli.common.enums.LoginFromEnum)>-><org.opsli.common.enums.LoginFromEnum: java.lang.String getType()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><cn.hutool.json.JSONObject: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String getSuperAdmin()>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.Docket securitySchemes(java.util.List)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.core.msg.JwtMsg: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.CompletableFuture: java.lang.String toString()>
<synthetic.method.SysLoginLogsMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.FormatRecord: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.jwt.JWT: cn.hutool.jwt.JWT addPayloads(java.util.Map)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>-><com.baomidou.mybatisplus.extension.service.IService: boolean updateById(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$StateCodeEnum: java.lang.String getMsg()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.core.filters.interceptor.MybatisAutoFillInterceptor: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<register-finalize <org.opsli.common.enums.LoginLimitRefuse: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.ehcache.config.units.MemoryUnit: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.jca.ProviderConfig: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.WeakHashMap$Entry: java.lang.String toString()>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserNameByToken()>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><kotlin.collections.AbstractCollection: boolean contains(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.convert.support.GenericConversionService: java.lang.String toString()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel: java.lang.String getFileName()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,cn.hutool.core.lang.tree.TreeNodeConfig)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getTenantIdByToken()>-><org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>
<org.opsli.core.utils.OrgUtil: void lambda$null$2(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.common.utils.FieldUtil: java.lang.String underlineToHump(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateSelf(org.opsli.api.wrapper.system.user.UserModel)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>-><org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.utils.Props: void load()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.EnumMap$1: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String getSystemStarterTime()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<register-finalize <org.opsli.common.enums.AlertType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginCodeModel,org.opsli.modulars.system.login.dto.LoginCodeModel)>-><org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth$Login getLogin()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>-><java.lang.String: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.plugins.redis.msg.RedisMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByName(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><com.google.common.collect.ImmutableCollection: boolean removeIf(java.util.function.Predicate)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper enableAccount(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>
<org.opsli.core.utils.UserUtil: java.util.List getOrgByCurrUser()>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.util.CellReference: java.lang.String toString()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: void <init>()>-><org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientAddress(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<org.opsli.common.enums.DictType: void <clinit>()>-><org.opsli.common.enums.DictType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String encode(long[])>-><org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<register-finalize <org.opsli.plugins.generator.enums.DataBaseType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.lang.Integer: int intValue()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.ImmutableList: java.util.Iterator iterator()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void <init>(org.opsli.plugins.security.properties.AuthProperties,org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl,org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl,org.opsli.core.security.service.UidUserDetailDetailServiceImpl)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl getAuthenticationEntryPointImpl()>
<cn.hutool.core.map.CaseInsensitiveMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)>-><java.util.regex.Matcher: boolean find()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource(java.lang.String)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper createCrypto(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Vector$Itr: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.SSTRecord: java.lang.String toString()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: java.lang.Object get(int)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.utils.CaptchaUtil: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.plugins.redis.RedisPlugin: java.lang.Long sSize(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.context.support.DelegatingMessageSource: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.conf.WafConfig: void <init>()>-><org.opsli.plugins.waf.properties.WafProperties: void <init>()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder username(java.lang.String)>
<org.apache.commons.beanutils.converters.AbstractConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><cn.hutool.core.util.ClassUtil: java.util.Set scanPackageBySuper(java.lang.String,java.lang.Class)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$3(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.Integer getCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.ImmutableDescriptor: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.core.general.StartPrint: java.lang.String getBasePath()>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.gentest.carinfo.TestCarModel)>-><java.lang.Boolean: boolean booleanValue()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void <init>(java.util.List,org.opsli.plugins.pagehelper.PageHelperProperties)>-><org.redisson.RedissonPriorityBlockingDeque: void <init>(org.redisson.command.CommandAsyncExecutor,java.lang.String,org.redisson.api.RedissonClient)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictModel)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><org.opsli.api.wrapper.system.menu.MenuModel: void <init>()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$StateCodeEnum: int getCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getPackageName()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.alibaba.excel.read.processor.DefaultAnalysisEventProcessor: void endSheet(com.alibaba.excel.context.AnalysisContext)>-><org.opsli.plugins.excel.listener.ExcelListener: void doAfterAllAnalysed(com.alibaba.excel.context.AnalysisContext)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.JSON: java.lang.Object parseObject(byte[],java.nio.charset.Charset,java.lang.reflect.Type,com.alibaba.fastjson.parser.ParserConfig,com.alibaba.fastjson.parser.deserializer.ParseProcess,int,com.alibaba.fastjson.parser.Feature[])>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.core.env.MissingRequiredPropertiesException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.redisson.cluster.ClusterPartition: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getParameterMapStr()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getId()>
<org.opsli.plugins.security.handler.LoginHandler$Builder: void <init>()>-><org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><com.google.common.cache.LocalCache$LocalManualCache: void put(java.lang.Object,java.lang.Object)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$StateCodeEnum: java.lang.String getMsg()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.oss.OssStorageFactory: void handleInit(java.util.Set)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long sRemove(java.lang.String,java.lang.Object[])>-><org.springframework.data.redis.core.RedisTemplate: org.springframework.data.redis.core.SetOperations opsForSet()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<org.opsli.common.utils.FieldUtil: java.lang.String getFileName(org.opsli.common.utils.FieldUtil$SFunction)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.OpsliApplication: void main(java.lang.String[])>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchOneself()>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void <init>()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.nodes.NodeTuple: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper delAll(org.opsli.api.base.encrypt.EncryptModel)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.UserTokenUtil: void init(org.opsli.core.autoconfigure.properties.GlobalProperties,org.opsli.plugins.redis.RedisPlugin)>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Auth getAuth()>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getInfoById(java.lang.String)>-><org.opsli.core.utils.UserUtil: java.util.List getUserRolesByUserId(java.lang.String)>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: java.lang.Class getEntityClass()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getType()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.event.BadCredentialsEvent: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.opsli.core.utils.OrgUtil: void lambda$null$4(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.Clock$SystemClock: java.lang.String toString()>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.email.exception.EmailPluginException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.autoconfigure.properties.CacheProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><java.io.ByteArrayInputStream: void <init>(byte[])>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getNo()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.Flux: java.lang.String toString()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void shutdown()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object likeLeft(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.redisson.properties.RedissonProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.security.provisioning.MutableUser: java.lang.String getUsername()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler: java.lang.Class getModelType()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: org.opsli.api.base.result.ResultWrapper createMenu(java.lang.String,java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object get()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.Integer getCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateAvatar(org.opsli.api.wrapper.system.user.UserAvatarModel)>-><org.opsli.api.wrapper.system.user.UserAvatarModel: java.lang.String getImgUrl()>
<org.opsli.core.cache.SecurityCache$CacheStatus: void <clinit>()>-><org.opsli.core.cache.SecurityCache$CacheStatus: void <init>(java.lang.String,int)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.base.entity.BaseEntity transformM2T(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.core.eventbus.AbstractSpringEventBus: void scanConsumer(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: java.util.Map getBeansOfType(java.lang.Class)>
<org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String getErrorMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.constant.ErrorConstant: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List transformTs2Ms(java.util.List)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: java.lang.String toString()>
<org.opsli.plugins.security.service.LoadUserDetailServiceFactory: void <init>()>-><org.springframework.boot.web.servlet.context.AnnotationConfigServletWebApplicationContext: void <init>()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyBySpec: com.wf.captcha.base.Captcha createCaptcha()>-><com.wf.captcha.base.Captcha: void setCharType(int)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long increment(java.lang.String,long)>-><org.springframework.data.redis.core.DefaultValueOperations: java.lang.Long increment(java.lang.Object,long)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.context.Context5: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.redis.lock.RedisLockImpl: void <init>()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.dto.LoginUserDto: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.format.CellNumberFormatter$Special: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<org.opsli.plugins.sms.SmsFactory: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$StateCodeEnum: int getCode()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><cn.hutool.core.map.MapProxy: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: int indexOf(int)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String getDefaultPass()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.api.wrapper.system.user.UserRoleRefModel: java.lang.String[] getRoleIds()>
<org.opsli.plugins.excel.listener.ExcelListener: void <init>()>-><java.util.ArrayList: void <init>()>
<synthetic.method.LogsMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateBy(java.lang.String)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Float: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.extension.service.IService: java.lang.Object getOne(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables()>-><org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findTables(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.StyleRecord: java.lang.String toString()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByArithmetic: void <init>(org.opsli.core.utils.CaptchaUtil$1)>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByArithmetic: void <init>()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler: void <init>()>-><java.lang.Object: void <init>()>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper getTenantByUsable(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder before()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.plugins.sms.service.impl.AliYunSmsServiceImpl: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByEmail(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String format(java.lang.CharSequence,java.lang.Object[])>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.core.msg.CoreMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<reactor.util.context.Context3: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><org.opsli.core.persistence.Page: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper getQueryWrapper()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.data.redis.core.DefaultValueOperations: void set(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.modulars.generator.table.wrapper.GenTableModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.generator.enums.CodeType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.common.enums.LoginModelType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean canEqual(java.lang.Object)>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<register-finalize <org.opsli.common.enums.ValidatorType: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: com.google.common.util.concurrent.RateLimiter getRateLimiter()>
<com.alibaba.druid.pool.DruidDataSource: void setConnectProperties(java.util.Properties)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><cn.hutool.json.JSONObject: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getType()>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getParameter(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateAvatar(org.opsli.api.wrapper.system.user.UserModel)>-><synthetic.method.UserMapperImpl: boolean updateAvatar(org.opsli.modulars.system.user.entity.SysUser)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.alibaba.excel.util.CollectionUtils: boolean isEmpty(java.util.Collection)>
<org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: boolean createMenu(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.modulars.tools.common.bean.VerificationCodeBean: void <init>(org.opsli.plugins.email.EmailPlugin,org.opsli.core.autoconfigure.properties.GlobalProperties)>-><synthetic.method.SingletonFactory: org.opsli.plugins.email.service.EmailPluginImpl getEmailPluginImpl()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: org.springframework.security.authentication.AuthenticationManager authenticationManager()>-><cn.hutool.extra.spring.SpringUtil: java.util.Map getBeansOfType(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean updateUser(org.opsli.api.wrapper.system.user.UserModel)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.Vector: boolean contains(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean refreshUserAllPerms(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void <init>()>-><org.opsli.modulars.system.login.web.LoginByAccountRestController: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean updateUser(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateEmail(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.modulars.tools.searchhis.web.SearchHisRestController: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><cn.hutool.core.text.CharSequenceUtil: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.gson.internal.bind.TypeAdapters$33: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><reactor.core.publisher.FluxOnAssembly$OnAssemblyException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.extension.service.IService: boolean update(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getTenantIdByToken()>-><org.opsli.core.utils.UserTokenUtil: java.lang.String getTenantIdByToken(java.lang.String)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.modulars.generator.table.wrapper.GenTableModel)>-><org.opsli.plugins.generator.exception.GeneratorException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><cn.hutool.core.date.TimeInterval: long interval()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePage(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.sms.SmsConfig: void <init>()>-><java.lang.Object: void <init>()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper transformT2M(org.opsli.core.base.entity.BaseEntity)>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.Parsed: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.common.utils.CheckStrength: org.opsli.common.utils.CheckStrength$LEVEL getPasswordLevel(java.lang.String)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateSelf(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.String getId()>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>-><org.springframework.web.servlet.config.annotation.WebMvcConfigurer: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.provider.UsernamePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getPassword()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String unWrap(java.lang.CharSequence,java.lang.String,java.lang.String)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder code(int)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.opsli.plugins.excel.listener.ExcelListener: void <init>()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.common.UnicodeString$FormatRun: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.ResourceBundle$CacheKey: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.utils.JWTBizUtil: void verifyBySign(java.lang.String,java.lang.String)>-><cn.hutool.jwt.JWTValidator: cn.hutool.jwt.JWTValidator validateAlgorithm(cn.hutool.jwt.signers.JWTSigner)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.plugins.excel.msg.ExcelMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<reactor.util.context.Context4: void checkKeys(java.lang.Object[])>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.modulars.system.SystemMsg: void <clinit>()>-><org.opsli.modulars.system.SystemMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.properties.CacheProperties: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Optional: boolean isPresent()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.core.utils.JWTBizUtil: java.lang.String generateAccessToken(org.opsli.core.base.dto.LoginUserDto,java.lang.String,java.lang.Integer)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.exception.handler.AuthEntryHandlerImpl: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.security.provider.MobileCodeAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.service.LoadUserDetailServiceFactory getLoadUserDetailServiceFactory()>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object like(java.lang.Object,java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.TypeDescription: java.lang.String toString()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.Class: java.lang.Package getPackage()>
<org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getTypeCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<synthetic.method.TestMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><javax.xml.stream.FactoryConfigurationError: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$UnmodifiableCollection: int size()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.web.LoginByAccountRestController: void captcha(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.plugins.security.provider.EmailPasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.eventbus.SpringSecurityEventBus getSpringSecurityEventBus()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$SingletonList: int size()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$SubList: int size()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.excel.listener.BatchExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String hash(long,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.oss.enums.OssStorageType: org.opsli.plugins.oss.enums.OssStorageType[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.opsli.core.utils.OptionsUtil: org.opsli.api.wrapper.system.options.OptionsModel getOptionByCode(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper getFieldTypes()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Double castToDouble(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.plugins.redisson.conf.RedissonConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<register-finalize <org.opsli.plugins.excel.msg.ExcelMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.comments.CommentLine: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping getRequestMappingHandlerMapping()>-><org.opsli.core.api.ApiRequestMappingHandlerMapping: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: java.lang.String toString()>
<register-finalize <org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.generator.enums.JavaType: java.util.List getPkgList(java.util.List)>-><java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>-><java.util.LinkedHashMap: java.util.Set keySet()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.security.web.header.Header: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List radExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String)>-><org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: org.opsli.plugins.excel.ExcelPlugin access$200()>
<org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: java.lang.String myInterceptor(org.apache.ibatis.session.SqlSessionFactory)>-><org.opsli.core.filters.interceptor.MybatisAutoFillInterceptor: void <init>()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.core.persistence.Page: org.opsli.core.persistence.Page$PageData getPageData()>-><com.github.pagehelper.PageSerializable: java.util.List getList()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.GridsetRecord: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder builder()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder: void <init>()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.alibaba.excel.ExcelWriter: com.alibaba.excel.ExcelWriter write(java.util.List,com.alibaba.excel.write.metadata.WriteSheet)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.common.utils.ZipUtils$3: void <init>(int)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><cn.hutool.json.JSONObject: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><org.opsli.common.utils.CheckStrength$StringUtils: int sizeOfInt(int)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getMobile()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String addPrefixIfNot(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserIdByToken()>-><org.opsli.core.utils.UserTokenUtil: java.lang.String getUserIdByToken(java.lang.String)>
<org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: void setAuthenticated(boolean)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByTenant(org.opsli.core.persistence.Page)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><synthetic.method.ProceedingJoinPointImpl: void setArgs_synthetic(java.lang.Object[])>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isBlank(java.lang.CharSequence)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>
<org.opsli.core.utils.ExcelUtil: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.gentest.carinfo.TestCarModel)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.Boolean getIzApi()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.utils.ExcelUtil: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,org.opsli.plugins.excel.listener.BatchExcelListener)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.io.OutputStream getOutputStream(javax.servlet.http.HttpServletResponse,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.LinkedList: int size()>
<java.util.AbstractList: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: java.lang.String generate(java.util.Map,java.lang.String,java.lang.Integer)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime date()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.security.properties.AuthProperties: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.springframework.boot.convert.NumberToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.VerificationCodeUtil: void checkCertificate(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: void <init>(java.lang.Class)>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.stackmap.TypeData: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><cn.hutool.core.convert.Convert: java.lang.Long toLong(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.PropertyValue: java.lang.String toString()>
<java.lang.Throwable: void <init>(java.lang.Throwable)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<register-finalize <org.opsli.core.msg.CoreMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void demoError()>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getTenantIdByToken(java.lang.String)>-><org.opsli.core.utils.JWTBizUtil: org.opsli.core.base.dto.LoginUserDto getLoginUserFromToken(java.lang.String)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginModel,org.opsli.modulars.system.login.dto.LoginModel)>-><org.opsli.modulars.system.login.dto.LoginModel: java.lang.String getPassword()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.eventbus.EventBus: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientAddressBySingle(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.net.NetUtil: java.lang.String getMultistageReverseProxyIp(java.lang.String)>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.plugins.security.utils.PasswordUtil: boolean isCredentialsNonExpired(java.lang.String,int)>-><cn.hutool.core.date.DateUtil: int compare(java.util.Date,java.util.Date)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void <clinit>()>-><org.opsli.common.utils.Props: void <init>(java.lang.String)>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.ArrayList$SubList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchOneself()>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.utils.SearchHisUtil: java.util.Set getSearchHis(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ColumnInfoRecord: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.awt.HeadlessException: java.lang.String getMessage()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.EscherAggregate: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getModuleName()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.springframework.util.MultiValueMapAdapter: java.lang.Object get(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Generator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<jdk.internal.org.objectweb.asm.ClassWriter: java.lang.String getCommonSuperClass(java.lang.String,java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>-><org.opsli.common.msg.ValidatorMsg: void setFieldName(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.text.AttributeEntry: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: java.lang.Object getPrincipal()>
<reactor.util.context.Context3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getPermissions()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>-><cn.hutool.core.codec.Base64: java.lang.String encode(java.lang.CharSequence)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isUpperCase(java.lang.CharSequence)>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.utils.CaptchaUtil: boolean delCaptcha(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.util.ParameterizedTypeInformation: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.expression.spel.ast.StringLiteral: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>-><cn.hutool.core.convert.Convert: java.lang.String toStr(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor$1: void onSuccess(java.lang.Object)>-><org.opsli.common.thread.AsyncProcessor$CallbackResult: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Vector: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.core.text.CharSequenceUtil: boolean isWrap(java.lang.CharSequence,java.lang.String)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void delByTableIds(java.lang.String[])>-><com.baomidou.mybatisplus.extension.service.IService: boolean remove(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper getDictListByCode(java.lang.String)>-><org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>
<java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByMobile(java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: java.lang.Object getOne(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler build()>-><org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder: java.util.List access$400(org.opsli.plugins.security.handler.LoginHandler$Builder$BeforeListenerBuilder)>
<synthetic.method.SysAreaMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><org.opsli.common.utils.UniqueStrGeneratorUtils: java.lang.String generator(long)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.lettuce.core.masterreplica.RedisMasterReplicaNode: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.common.enums.ValidatorType: void <clinit>()>-><org.opsli.common.enums.ValidatorType: void <init>(java.lang.String,int)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.plugins.waf.filter.WafFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>-><org.springframework.web.filter.CompositeFilter$VirtualFilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getById(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper get(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.Collections$SingletonList: java.lang.Object get(int)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.modulars.generator.template.wrapper.GenTemplateModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.common.utils.MessUtil: java.util.List getPlaceholderList(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.oss.msg.OssMsg: java.lang.Integer getCode()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>-><java.lang.Double: java.lang.Double valueOf(double)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.generator.importable.ImportTableUtil: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.AbstractList$Itr: boolean hasNext()>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.opsli.common.thread.AsyncProcessor$CallbackResult: void <init>()>
<org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String getAddress()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper updateOptions(java.util.Map)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.BackupRecord: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.Collection: boolean removeIf(java.util.function.Predicate)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: org.redisson.config.Config createConfig(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.common.enums.LoginLimitRefuse: void <clinit>()>-><org.opsli.common.enums.LoginLimitRefuse: void <init>(java.lang.String,int)>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.common.utils.OutputStreamUtil: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse)>-><javax.servlet.http.HttpServletResponseWrapper: void setHeader(java.lang.String,java.lang.String)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.plugins.generator.utils.EnjoyUtil: java.lang.String renderByStr(java.lang.String,com.jfinal.kit.Kv)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.google.common.collect.RegularImmutableList: java.lang.Object get(int)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><javax.servlet.http.HttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthException: java.lang.Integer getCode()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.Docket groupName(java.lang.String)>
<org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String getDescription()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.SingletonImmutableList: java.util.Iterator iterator()>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.font.Decoration$DecorationImpl: java.lang.String toString()>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.SingletonImmutableList: int size()>
<org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.stat.TextToken: java.lang.String toString()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Collections$SingletonList: int size()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String getDefaultPass()>
<org.opsli.core.holder.UserContextHolder: void <clinit>()>-><com.alibaba.ttl.TransmittableThreadLocal: void <init>()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByEmail(java.lang.String)>-><org.opsli.modulars.system.SystemMsg: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: void <init>(com.fasterxml.classmate.TypeResolver)>-><synthetic.method.SingletonFactory: org.opsli.core.autoconfigure.properties.GlobalProperties getGlobalProperties()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.lock.RedisLockImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.core.utils.CaptchaUtil: void <clinit>()>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyByArithmetic: void <init>(org.opsli.core.utils.CaptchaUtil$1)>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><cn.hutool.core.text.CharSequenceUtil: boolean isBlank(java.lang.CharSequence)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String hash(long,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><org.opsli.plugins.excel.exception.ExcelPluginException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getParent(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><cn.hutool.core.date.DateUtil: java.lang.String format(java.util.Date,java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.SQLDataAop: void <init>()>-><java.lang.Object: void <init>()>
<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getModuleName()>
<org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: java.util.List getByTableId(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.NumTok: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.common.enums.ValidatorType: org.opsli.common.enums.ValidatorType[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.opsli.common.enums.VerificationTypeEnum: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><java.lang.Runtime: java.lang.Runtime getRuntime()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: java.lang.Object next()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: org.springframework.security.core.Authentication lambda$login$0(org.opsli.modulars.system.login.dto.LoginModel,org.opsli.modulars.system.login.dto.LoginModel)>-><org.springframework.security.authentication.UsernamePasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper getDictListByCode(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.common.utils.IPUtil: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: boolean refreshUserMenus(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void demoError()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: boolean isEnableDemo()>
<org.opsli.modulars.system.user.service.impl.UserOrgRefServiceImpl: void <init>()>-><com.baomidou.mybatisplus.extension.service.impl.ServiceImpl: void <init>()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.TokenProperties: java.lang.String getSecret()>
<org.opsli.plugins.security.handler.OtherErrorHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateAvatar(org.opsli.api.wrapper.system.user.UserAvatarModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateAvatar(org.opsli.api.wrapper.system.user.UserModel)>
<org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl: void commence(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><cn.hutool.json.JSONArray: boolean add(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.plugins.excel.listener.BatchExcelListener: void <init>()>-><java.util.ArrayList: void <init>()>
<org.opsli.core.autoconfigure.properties.CacheProperties: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder: org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder roleIds(java.lang.String[])>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$2$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.ObjectInstance: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.buffer.PoolChunkList: java.lang.String toString()>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><java.lang.StringBuilder: void <init>()>
<org.apache.poi.openxml4j.opc.internal.ContentType: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.generator.enums.CodeType: org.opsli.plugins.generator.enums.CodeType[] values()>-><java.lang.Object: java.lang.Object clone()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.alibaba.excel.read.builder.ExcelReaderBuilder: com.alibaba.excel.ExcelReader build()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.Map lambda$getTemplateDetailList$0(java.lang.String,java.lang.String)>-><com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>
<org.opsli.core.utils.VerificationCodeUtil: java.lang.String checkCode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>-><java.lang.Long: long parseLong(java.lang.String)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.lang.Object get(int)>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder loginIp(java.lang.String)>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><com.google.common.util.concurrent.RateLimiter: com.google.common.util.concurrent.RateLimiter create(double)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><org.springframework.core.io.buffer.LimitedDataBufferList: boolean removeIf(java.util.function.Predicate)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><io.netty.util.collection.IntObjectHashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.Integer getDictSort()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.VCenterRecord: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.ImmutableCollection: boolean removeIf(java.util.function.Predicate)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: java.lang.Long sPut(java.lang.String,java.lang.String[])>-><org.springframework.data.redis.core.DefaultSetOperations: java.lang.Long add(java.lang.Object,java.lang.Object[])>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.String: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.plugins.security.SecurityConfig: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.generator.database.mysql.MySqlSyncBuilder: void <init>()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Arrays$ArrayList: int size()>
<org.opsli.modulars.system.SystemMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String)>-><org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getTenantId()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<java.util.AbstractList: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.common.enums.VerificationTypeEnum: java.lang.String getType()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><cn.hutool.json.JSONArray: java.lang.Object get(int)>
<org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>-><com.google.common.cache.LocalCache$LocalManualCache: void invalidate(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.autoconfigure.conf.MyBatisPlusConfig: java.lang.String myInterceptor(org.apache.ibatis.session.SqlSessionFactory)>-><org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.Configuration getConfiguration()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void pub(org.opsli.common.utils.FieldUtil$SFunction,java.lang.String)>-><java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.security.exception.AuthException: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getErrorMessage()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.math.BigDecimal: java.lang.String toString()>
<org.opsli.modulars.system.logs.web.LoginLogsRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: java.lang.Void lambda$execute$0(java.util.concurrent.CountDownLatch,org.opsli.common.thread.AsyncProcessor$CallbackResult)>-><org.opsli.common.thread.AsyncProcessor$CallbackResult: java.lang.Boolean getSuccess()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean uniqueVerificationByNo(org.opsli.api.wrapper.system.user.UserModel)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder msg(java.lang.String)>
<register-finalize <org.opsli.plugins.oss.OssStorageFactory: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder: org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder parameterMapStr(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><cn.hutool.core.convert.Convert: java.lang.Object convert(java.lang.Class,java.lang.Object)>
<org.opsli.common.utils.IPUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.text.CharSequenceUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findAllOptions()>-><org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>
<org.opsli.api.wrapper.system.user.UserModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: com.google.common.util.concurrent.RateLimiter getRateLimiter()>
<com.google.common.collect.SingletonImmutableSet: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.common.utils.DefPatternPool: void <clinit>()>-><cn.hutool.core.lang.SimpleCache: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.write.builder.ExcelWriterBuilder write(java.io.OutputStream,java.lang.Class)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayList: int size()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.TblPtg: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Vector: int size()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.utils.DictUtil: java.util.Map lambda$getDictList$2(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.opsli.core.autoconfigure.properties.EncryptProperties: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.alibaba.excel.read.processor.DefaultAnalysisEventProcessor: void dealData(com.alibaba.excel.context.AnalysisContext)>-><org.opsli.plugins.excel.listener.BatchExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List sortWrappers(java.util.List)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.EnumMap: int entryHashCode(int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$1: boolean hasNext()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.listener.ExcelListener: void <init>()>-><com.alibaba.excel.event.AnalysisEventListener: void <init>()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: char charAt(int)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: org.opsli.common.thread.AsyncProcessor getProcessor(java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.common.utils.Props: java.util.List getList(java.lang.String,java.util.List)>-><org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.Double getQps()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.opsli.plugins.redisson.properties.RedissonProperties: org.opsli.plugins.redisson.enums.RedissonType getType()>
<org.opsli.core.autoconfigure.properties.ApiPathProperties: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><org.springframework.web.multipart.commons.CommonsMultipartFile: java.io.InputStream getInputStream()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$1: java.lang.Object next()>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getUserName()>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getTableId()>
<org.opsli.plugins.redisson.enums.RedissonType: void <clinit>()>-><org.opsli.plugins.redisson.enums.RedissonType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel getModel()>
<org.opsli.core.utils.DistributedLockUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.ExcelUtil: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.opsli.core.utils.ExcelUtil$ExcelUtilSingletonHolder: org.opsli.plugins.excel.ExcelPlugin access$200()>
<org.opsli.modulars.system.tenant.service.impl.TenantServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserServiceImpl getUserServiceImpl()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.HeadersConfigurer: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig frameOptions()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.alibaba.fastjson.JSONArray: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthException: void <init>(java.lang.Integer,java.lang.String)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getPassWord()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder: org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder userId(java.lang.String)>
<org.springframework.web.servlet.mvc.condition.AbstractRequestCondition: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: boolean validationHandle(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper$1: int read()>-><java.io.ByteArrayInputStream: int read()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.springframework.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateEmail(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.slf4j.event.Level: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.common.utils.MessUtil: java.util.List getPlaceholderList(java.lang.String)>-><java.util.ArrayList: void <init>()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getCodeTitleBrief()>
<java.util.AbstractList: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder timestamp(long)>
<org.opsli.core.security.filter.JwtAuthenticationTokenFilter: org.opsli.plugins.security.exception.AuthException lambda$doFilterInternal$0()>-><org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.generator.SqlSyncUtil: void <init>()>
<org.opsli.common.utils.RateLimiterUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.lang.String handleReplace(java.lang.String,org.opsli.modulars.generator.logs.wrapper.GenBuilderModel)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<synthetic.method.MenuMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.apache.commons.beanutils.converters.ArrayConverter: java.util.Collection convertToCollection(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><com.google.common.util.concurrent.RateLimiter: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.MBeanNotificationInfo: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.Hashtable$Entry: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getAuthorName()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.options.OptionsModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: void <init>()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.CryptoUtil: java.lang.String symmetricEncryptToStr(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String addPrefixIfNot(java.lang.CharSequence,java.lang.CharSequence)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.opsli.core.eventbus.AbstractSpringEventBus: void setApplicationContext(org.springframework.context.ApplicationContext)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map,java.lang.String)>-><java.lang.Object: void <init>()>
<org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getDictName()>
<org.opsli.plugins.security.handler.LoginHandler$Builder$AccessDeniedListenerBuilder: void <init>(org.opsli.plugins.security.handler.LoginHandler$Builder)>-><java.lang.Object: void <init>()>
<org.opsli.common.enums.AlertType: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(int,java.lang.String)>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ProtectRecord: java.lang.String toString()>
<org.opsli.plugins.security.eventbus.AbstractSpringSecuritySecurityEventBus: void scanConsumer(java.lang.String)>-><java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.plugins.security.provider.EmailPasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><synthetic.method.SingletonFactory: org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks getDefaultPostAuthenticationChecks()>
<org.opsli.modulars.system.logs.web.LogsRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.logs.LogsModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: springfox.documentation.builders.ApiInfoBuilder title(java.lang.String)>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.msg.RedisMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getId()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.CalcCountRecord: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.opsli.plugins.waf.conf.WafConfig: org.springframework.boot.web.servlet.FilterRegistrationBean wafFilterRegistration()>-><org.opsli.plugins.waf.properties.WafProperties: java.util.Set getUrlPatterns()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>
<org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void <init>(java.util.Collection)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper del(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.encrypt.EncryptModel: java.lang.String getEncryptData()>
<org.opsli.common.utils.RateLimiterUtil: java.util.Map lambda$enter$0(java.lang.Double,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.util.context.Context3: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.FooterRecord: java.lang.String toString()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.http.server.reactive.ServletServerHttpRequest: void <init>(org.springframework.util.MultiValueMap,javax.servlet.http.HttpServletRequest,javax.servlet.AsyncContext,java.lang.String,org.springframework.core.io.buffer.DataBufferFactory,int)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void <clinit>()>-><com.google.common.collect.Maps: java.util.HashMap newHashMap()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper setCode(int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.tenant.service.impl.TenantServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void <init>()>-><org.opsli.modulars.system.login.web.LoginByCodeRestController: void <init>()>
<org.springframework.cglib.core.WeakCacheKey: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.core.general.StartPrint: java.lang.String getBasePath()>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String addPrefixIfNot(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayList$Itr: boolean hasNext()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void configurePathMatch(org.springframework.web.servlet.config.annotation.PathMatchConfigurer)>-><org.opsli.core.autoconfigure.properties.ApiPathProperties: java.lang.String getGlobalPrefix()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder msg(java.lang.String)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><cn.hutool.json.JSONArray: java.lang.Object get(int)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void <clinit>()>-><org.opsli.common.utils.Props: java.util.List getList(java.lang.String)>
<org.opsli.common.msg.ValidatorMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findListByCus(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getRemoteAddr()>
<org.opsli.modulars.generator.importable.ImportTableUtil: java.util.List findColumns(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getDbName()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: java.util.List defaultToken()>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap: java.lang.String toString()>
<org.opsli.modulars.generator.table.web.GenTableRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.common.api.ResultVoMap: void <init>()>-><org.springframework.http.HttpStatus: int value()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateSelf(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void initImportTable()>-><org.opsli.core.utils.SpringContextHolder: java.lang.Object getBean(java.lang.Class)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<com.alibaba.druid.pool.DruidAbstractDataSource: void setConnectionInitSqls(java.util.Collection)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.beans.PropertyBatchUpdateException: java.lang.String getMessage()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserNameByToken()>-><org.opsli.core.utils.UserTokenUtil: java.lang.String getUserNameByToken(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.filters.aspect.ValidatorAop: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.security.Provider$UString: java.lang.String toString()>
<org.opsli.modulars.system.logs.web.OperationLogRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.core.env.PropertySource: java.lang.String toString()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedList: java.lang.Object get(int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><ch.qos.logback.classic.Logger: void error(java.lang.String)>
<javassist.bytecode.ParameterAnnotationsAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.sms.service.impl.AliYunSmsServiceImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto()>-><org.opsli.core.holder.UserContextHolder: java.util.Optional getToken()>
<org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: void setAuthenticated(boolean)>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setRealName(java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Vector: java.util.Iterator iterator()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.SubList: int size()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getEnable()>
<org.opsli.modulars.generator.importable.ImportTableUtil: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.core.autoconfigure.properties.DbSourceProperties getDbSourceProperties()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder code(int)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.ServletResponseWrapper: void setCharacterEncoding(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.modulars.gentest.user.service.impl.TestUserServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.TestUserMapperImpl getTestUserMapperImpl()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.modulars.system.SystemMsg: java.lang.String getMessage()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.awt.AppContext: java.lang.String toString()>
<org.opsli.modulars.generator.importable.entity.DatabaseTable: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.api.base.result.ResultWrapper: void <init>(java.lang.String,int,java.lang.Object,long)>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: org.opsli.plugins.redisson.enums.RedissonType getType()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.security.handler.LoginHandler: void fireBeforeEvent(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<javassist.bytecode.ParameterAnnotationsAttribute: javassist.bytecode.annotation.Annotation[][] getAnnotations()>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$2(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean canEqual(java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: boolean validationHandle(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.String: java.lang.String toLowerCase()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean isNumeric(java.lang.String)>-><java.lang.String: int length()>
<org.opsli.core.cache.SecurityCache: void <clinit>()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setUserAgent(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.modulars.generator.importable.ImportTableUtil: org.opsli.plugins.generator.enums.DataBaseType getDbType()>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.modulars.system.logs.event.OperationLogEvent: void <init>(org.opsli.modulars.system.logs.service.IOperationLogService)>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.logs.service.impl.OperationLogServiceImpl getOperationLogServiceImpl()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder timestamp(long)>
<org.opsli.api.wrapper.system.user.UserPassword: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<java.util.LinkedList: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.eventbus.AbstractSpringEventBus: void lambda$scanConsumer$0(java.lang.String,org.opsli.core.eventbus.IEventConsumer)>-><org.opsli.core.eventbus.SpringEventBus: void addConsumer(java.lang.Object)>
<org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getTypeCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getComponent()>
<org.opsli.common.utils.UniqueStrGeneratorUtils: java.lang.String generator(long)>-><java.lang.StringBuilder: void <init>()>
<com.alibaba.fastjson.JSONPath$RegMatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Collections$EmptyList: int size()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByCheckOld(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.plugins.security.utils.PasswordUtil: boolean matches(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String,java.lang.String)>
<org.opsli.plugins.redis.scripts.RedisScriptCache: boolean putScript(org.opsli.plugins.redis.scripts.enums.RedisScriptsEnum,java.lang.String)>-><javax.xml.xpath.XPathException: void printStackTrace()>
<com.alibaba.fastjson.JSONPath$RlikeSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.dict.DictDetailModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.core.persistence.Page findPage(org.opsli.core.persistence.Page)>-><com.baomidou.mybatisplus.extension.service.IService: java.util.List list(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><cn.hutool.json.JSONUtil: cn.hutool.json.JSONObject parseObj(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.core.filters.aspect.SearchHisAop: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.general.StartPrint: void errorPrint(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<cn.hutool.core.util.StrUtil: java.lang.String str(java.lang.Object,java.nio.charset.Charset)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.alibaba.excel.ExcelReader: com.alibaba.excel.ExcelReader read(com.alibaba.excel.read.metadata.ReadSheet[])>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void addConsumer(java.lang.Object)>-><com.google.common.eventbus.EventBus: void register(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<java.text.AttributeEntry: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.CommonObjectDataSubRecord: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void clearCache(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GenTemplateUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.stream.Collectors: java.util.stream.Collector toList()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.common.utils.IPUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getHeader(java.lang.String)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.msg.CoreMsg: java.lang.Integer getCode()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.handler.codec.dns.DnsOpCode: java.lang.String toString()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Vector: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><org.opsli.api.wrapper.system.menu.MenuModel: void setMenuName(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.font.EAttribute: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getOrg()>-><org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getOrgByUserId(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.common.utils.OutputStreamUtil: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><java.lang.Enum: java.lang.String name()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.ExpPtg: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateSelf(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setEmail(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$ValuesIterator: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map)>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><org.opsli.plugins.excel.exception.ExcelPluginException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>-><java.lang.String: int length()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: void <clinit>()>-><com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder timestamp(long)>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><com.alibaba.fastjson.JSONArray: boolean contains(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><java.util.Collections$SingletonList: boolean contains(java.lang.Object)>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.beans.FeatureDescriptor: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.autoconfigure.properties.EncryptProperties: void <init>()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource(java.lang.String)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>-><cn.hutool.core.convert.Convert: java.lang.String toStr(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.core.utils.SearchHisUtil: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.plugins.redis.RedisPlugin getRedisPlugin()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.EnumMap$EntryIterator$Entry: java.lang.String toString()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.lang.Double: double doubleValue()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.CaptchaUtil: void <init>()>
<org.opsli.core.api.ApiVersionCondition: void <clinit>()>-><java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void delByTableId(java.lang.String)>-><com.baomidou.mybatisplus.extension.service.IService: boolean remove(com.baomidou.mybatisplus.core.conditions.Wrapper)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.utils.DictUtil: java.util.List handleDictList(java.util.Map,java.lang.String)>-><java.util.HashMap: java.util.Set entrySet()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>-><java.lang.Character: boolean isUpperCase(char)>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByBean(java.lang.Object)>-><org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByCode(java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.cache.service.EhCachePluginImpl: void <init>()>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><java.lang.Integer: int intValue()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.logs.event.OperationLogEvent: void <init>(org.opsli.modulars.system.logs.service.IOperationLogService)>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getUrl()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper resetPasswordById(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(org.opsli.common.base.msg.BaseMsg)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.utils.DictUtil: java.util.Map lambda$getDictList$2(java.lang.String,java.lang.String)>-><com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Vector: java.lang.Object get(int)>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><com.google.common.util.concurrent.Striped$PowerOfTwoStriped: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.AbstractConstant: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.gentest.user.service.impl.TestUserServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.opsli.core.filters.aspect.ValidatorAop: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.api.wrapper.system.dict.DictModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: void setRemoteAddr(java.lang.String)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setPassword(java.lang.String)>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.wrapper.system.menu.MenuModel getGenMenuModel()>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setId(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: int getCode()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.pqc.crypto.xmss.DefaultXMSSOid: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.Class: int getModifiers()>
<org.opsli.plugins.security.exception.handler.AccessDeniedHandlerImpl: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)>-><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void setPort(java.lang.Integer)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: void <init>()>-><org.opsli.common.thread.AsyncProcessExecutorByWait: org.opsli.common.thread.AsyncProcessor getProcessor(java.lang.String)>
<org.opsli.api.wrapper.system.user.UserRoleRefModel: org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder builder()>-><org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.lang.Object get(int)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.common.enums.LoginFromEnum: org.opsli.common.enums.LoginFromEnum getByBean(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><com.github.pagehelper.PageInterceptor: void setProperties(java.util.Properties)>
<org.opsli.common.utils.OutputStreamUtil: void exceptionResponse(java.lang.String,javax.servlet.http.HttpServletResponse)>-><cn.hutool.core.io.IoUtil: void close(java.io.Closeable)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getPrincipal()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.read.builder.ExcelReaderSheetBuilder readSheet()>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.filters.aspect.ValidatorAop: void <init>()>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.redis.scripts.RedisScriptCache: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.Math: double ceil(double)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.DictUtil: void <init>()>-><org.springframework.data.redis.core.RedisTemplate: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void <init>(java.util.List,org.opsli.plugins.pagehelper.PageHelperProperties)>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.core.msg.CoreMsg: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.generator.template.wrapper.GenTemplateAndDetailModel: void <init>()>-><org.opsli.api.base.warpper.ApiWrapper: void <init>()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.io.InvalidClassException: java.lang.String getMessage()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONPath$StringOpSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.msg.ValidatorMsg: java.lang.String getMessage()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getTableId()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.Collections$1: java.lang.Object next()>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.slf4j.helpers.NOPLogger: void warn(java.lang.String,java.lang.Object[])>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><cn.hutool.core.lang.Validator: boolean isChinese(java.lang.CharSequence)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.resolver.ResolverTuple: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList: java.lang.Object get(int)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper enableAccount(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.Double getQps()>
<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.github.pagehelper.PageSerializable: java.util.List getList()>
<org.opsli.plugins.security.authentication.AfterAuthenticationToken: void <init>(java.lang.Object,java.lang.Object,java.util.Collection)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.StringRecord: java.lang.String toString()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.UserDetailModel$UserDetailModelBuilder: void <init>()>-><java.lang.Object: void <init>()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.alibaba.excel.read.metadata.ReadBasicParameter: void setHeadRowNumber(java.lang.Integer)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.Duration: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.Area2DPtgBase: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.TreeMap$Entry: java.lang.String toString()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.carinfo.web.TestCarRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<com.jfinal.template.expr.ast.Compare: java.lang.Boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobilePasswordAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.util.List toList(java.lang.Class,java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<register-finalize <org.opsli.plugins.redis.msg.RedisMsg: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$findMenuTree$1(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder accessToken(java.lang.String)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserOrgRefServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.org.service.impl.SysOrgServiceImpl getSysOrgServiceImpl()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getRealName()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.context.support.AbstractApplicationContext: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getType()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Excel: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><org.opsli.core.utils.VerificationCodeUtil: void checkMobileCode(java.lang.String,java.lang.String,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.temporal.ChronoUnit: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>-><javax.servlet.ServletResponseWrapper: java.io.PrintWriter getWriter()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserOrgRefModel getUserDefOrgByUserId(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder: void <init>()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean delete(java.lang.String)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.EncryptProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><org.springframework.security.authentication.ProviderManager: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><cn.hutool.json.JSONArray: boolean contains(java.lang.Object)>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.core.persistence.querybuilder.conf.WebQueryConf: void <init>()>-><java.util.HashMap: void <init>()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<javax.management.ImmutableDescriptor: javax.management.ImmutableDescriptor union(javax.management.Descriptor[])>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder builder()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.ArrayList: boolean contains(java.lang.Object)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getDescription()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List getTemplateDetailList(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.CollectionLikeType: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.WindowTwoRecord: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRoleRefRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.alibaba.excel.read.metadata.ReadBasicParameter: void setHeadRowNumber(java.lang.Integer)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel queryByMobile(java.lang.String)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.EnumMap: boolean containsMapping(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<synthetic.method.GenTableColumnMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<com.jfinal.template.stat.ast.Case: boolean execIfMatch(java.lang.Object,com.jfinal.template.Env,com.jfinal.template.stat.Scope,com.jfinal.template.io.Writer)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.common.utils.CheckStrength$StringUtils: boolean isNumeric(java.lang.String)>-><java.lang.Character: boolean isDigit(char)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean delete(java.lang.String)>-><org.opsli.core.base.service.impl.CrudServiceImpl: boolean delete(java.lang.String)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: java.lang.Object get(int)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<io.netty.util.collection.IntObjectHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.AuthServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.utils.WebUtils: java.lang.String renderString(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.plugins.excel.ExcelPlugin: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.lang.Float castToFloat(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setUpdateBy(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.exception.handler.AuthenticationEntryPointImpl: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><reactor.core.publisher.Mono: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserNameByToken(java.lang.String)>-><org.opsli.core.utils.JWTBizUtil: org.opsli.core.base.dto.LoginUserDto getLoginUserFromToken(java.lang.String)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto: org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder builder()>
<org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><synthetic.method.UserMapperImpl: boolean updatePassword(org.opsli.api.wrapper.system.user.UserPassword)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.CodepageRecord: java.lang.String toString()>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.api.ApiVersionCondition: int hashCode()>-><org.opsli.core.api.ApiVersionCondition: int getApiVersion()>
<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: boolean lambda$getMenuAndPermsTree$0(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.ArrayList: int size()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<java.awt.font.StyledParagraph: int[] addToVector(java.lang.Object,int,java.util.Vector,int[])>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.opsli.core.base.service.impl.CrudServiceImpl: java.util.List transformMs2Ts(java.util.List)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.generator.msg.GeneratorMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<reactor.util.context.Context2: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.bouncycastle.asn1.DERPrintableString: java.lang.String toString()>
<org.opsli.plugins.generator.msg.GeneratorMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: void login(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.ValidatorUtil: void verify(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.MobileCodeAuthenticationToken: java.lang.Object getPrincipal()>
<cn.hutool.core.util.ArrayUtil: java.lang.String toString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<reactor.util.context.Context4: boolean hasKey(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.opsli.core.persistence.Page: org.opsli.core.persistence.Page$PageData getPageData()>-><org.opsli.core.persistence.Page$PageData: void <init>()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.AbstractCollection: int size()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>
<org.opsli.api.wrapper.system.user.UserRoleRefModel: void <init>(java.lang.String,java.lang.String[],java.lang.String)>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: boolean validationField(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.GlobalProperties$Web: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.io.OutputStream getOutputStream(javax.servlet.http.HttpServletResponse,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFields(java.lang.Class)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.core.utils.JWTBizUtil: void verify(java.lang.String,java.lang.String)>-><java.lang.String: byte[] getBytes()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.msg.TokenMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel: java.lang.String getType()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder code(int)>
<org.opsli.core.utils.ValidatorUtil: void checkMax(java.lang.reflect.Field,int,java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.common.utils.ZipUtils: void compress(java.util.zip.ZipOutputStream,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>
<org.opsli.common.utils.ZipUtils: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.waf.util.XSSFilterKit: java.lang.String stripXSS(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getLabel()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><java.lang.Boolean: boolean booleanValue()>
<org.opsli.plugins.security.eventbus.AbstractSpringSecuritySecurityEventBus: void lambda$scanConsumer$0(java.lang.String,org.opsli.plugins.security.eventbus.ISecurityEventConsumer)>-><org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void addConsumer(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.UserTokenUtil: org.opsli.plugins.security.exception.AuthException lambda$logout$4()>-><org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: org.opsli.modulars.generator.table.wrapper.GenTableAndColumnModel getModel()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Vector: boolean removeIf(java.util.function.Predicate)>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.String: void <init>(byte[])>
<org.opsli.modulars.system.options.web.SysOptionsRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object notIn(java.lang.Object,java.lang.Object[])>
<org.opsli.plugins.redis.scripts.RedisScriptCache: void <init>()>-><java.util.concurrent.ConcurrentHashMap: void <init>()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<cn.hutool.json.JSONUtil: java.lang.Object wrap(java.lang.Object,cn.hutool.json.JSONConfig)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><cn.hutool.core.map.MapProxy: java.lang.Object get(java.lang.Object)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.lang.String getParameter(java.lang.String)>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil$1: void <clinit>()>-><org.opsli.common.enums.ExcelOperate: org.opsli.common.enums.ExcelOperate[] values()>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: java.util.Map lambda$enter$0(java.lang.Double,java.lang.String)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: void setQps(java.lang.Double)>
<org.opsli.core.utils.DictUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><java.lang.Boolean: boolean booleanValue()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.stackmap.BasicBlock: java.lang.String toString()>
<com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController: void init(org.springframework.security.authentication.AuthenticationManager,org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler,org.opsli.modulars.system.login.handler.before.LoginModelVerifyCaptchaBeforeHandler,org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler,org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginModelClearCaptchaSuccessHandler,org.opsli.modulars.system.login.handler.success.LoginSuccessLogHandler,org.opsli.plugins.security.handler.AuthServiceErrorHandler,org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler,org.opsli.plugins.security.handler.OtherErrorHandler,org.opsli.plugins.security.handler.AuthErrorHandler,org.opsli.plugins.security.handler.SecurityErrorHandler)>-><org.opsli.plugins.security.handler.LoginHandler$Builder: org.opsli.plugins.security.handler.LoginHandler$Builder$AccessSuccessListenerBuilder accessSuccess()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.Vector: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.openmbean.CompositeDataSupport: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void <init>(org.opsli.modulars.system.user.mapper.UserMapper,org.opsli.modulars.system.role.service.IRoleService,org.opsli.modulars.system.user.service.IUserRoleRefService,org.springframework.security.crypto.password.PasswordEncoder)>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl getUserRoleRefServiceImpl()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javax.management.MBeanOperationInfo: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><javassist.bytecode.ParameterAnnotationsAttribute: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getOrg()>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.plugins.security.eventbus.SpringSecurityEventBus: void <init>()>-><com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>
<org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getAuthorName()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getTemplateId()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.LoginHandler: void fireSuccessEvent(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.handler.LoginAccessSuccessListener: java.lang.Class getModelType()>
<org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>-><org.opsli.core.cache.SecurityCache: boolean remove(org.springframework.data.redis.core.RedisTemplate,java.lang.String[])>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.opsli.api.base.warpper.ApiWrapper: java.lang.Boolean getIzManual()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.Sym: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.UserUtil: boolean refreshUser(org.opsli.api.wrapper.system.user.UserModel)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.apache.commons.beanutils.ConvertUtilsBean: java.lang.Object convert(java.lang.Object,java.lang.Class)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.core.msg.CoreMsg: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.google.common.collect.ImmutableSet$RegularSetBuilderImpl: com.google.common.collect.ImmutableSet$SetBuilderImpl insertInHashTable(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper insert(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setCreateTime(java.util.Date)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserRoleRefModel$UserRoleRefModelBuilder: org.opsli.api.wrapper.system.user.UserRoleRefModel build()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.URLConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getByPermissions(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.context.expression.MapAccessor$MapAccessException: java.lang.String getMessage()>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.alibaba.fastjson.JSONArray: int size()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.zone.ZoneOffsetTransition: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.modulars.generator.importable.service.MySQLDatabaseTableServiceImpl: void <init>()>-><synthetic.method.SingletonFactory: synthetic.method.MySQLDatabaseTableMapperImpl getMySQLDatabaseTableMapperImpl()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefRole(java.lang.String)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<java.util.EnumMap: boolean removeMapping(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.menu.service.impl.MenuServiceImpl: void <init>()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<reactor.util.context.Context1: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: void <init>(org.opsli.modulars.system.user.mapper.UserMapper,org.opsli.modulars.system.role.service.IRoleService,org.opsli.modulars.system.user.service.IUserRoleRefService,org.springframework.security.crypto.password.PasswordEncoder)>
<org.opsli.core.cache.SecurityCache: void put(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.Object,boolean)>-><com.google.common.cache.LocalCache$LocalManualCache: void invalidate(java.lang.Object)>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean canEqual(java.lang.Object)>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><org.opsli.common.utils.CheckStrength$StringUtils: boolean isNumeric(java.lang.String)>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.common.enums.ExcelOperate: org.opsli.common.enums.ExcelOperate[] values()>-><java.lang.Object: java.lang.Object clone()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<reactor.util.context.Context2: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserUtil: boolean refreshUserOrgs(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: boolean hasNext()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictDetailModel)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><org.opsli.common.utils.FieldUtil: java.lang.String underlineToHump(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser(java.lang.String,boolean)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.core.utils.UserUtil: boolean refreshUserDefOrg(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: int hashCode()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.opsli.core.utils.ExcelUtil: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.locale.provider.RuleBasedBreakIterator: java.lang.String toString()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void logout(java.lang.String)>-><org.opsli.core.utils.UserUtil: boolean refreshUserRoles(java.lang.String)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<reactor.util.context.Context5: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.Iterators$9: boolean hasNext()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.Iterators$9: java.lang.Object next()>
<reactor.util.context.Context3: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.general.StartPrint: void errorPrint(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.ClassPool: javassist.CtClass makeClass(java.lang.String,javassist.CtClass)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder code(int)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><org.opsli.common.utils.HashIdsUtil: java.lang.String consistentShuffle(java.lang.String,java.lang.String)>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String toString()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><cn.hutool.core.text.CharSequenceUtil: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void <init>(int,int)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenLogsModel: java.lang.String getTableType()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getMenuName()>
<org.opsli.common.utils.RateLimiterUtil: void main(java.lang.String[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>-><cn.hutool.core.collection.ListUtil: java.util.List empty()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.error.Mark: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.usermodel.HSSFName: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.parser.ParseContext: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: java.lang.Object getPrincipal()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessExecutorByWait: boolean execute()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.ProtectionRev4Record: java.lang.String toString()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder data(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.opsli.common.exception.JwtException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.alibaba.fastjson.JSONArray: java.lang.Object get(int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.data.redis.connection.DefaultStringTuple: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg,java.lang.Throwable)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: int getCode()>
<java.util.Hashtable: boolean contains(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.spring.web.plugins.Docket createRestApi()>-><springfox.documentation.spring.web.plugins.Docket: springfox.documentation.spring.web.plugins.Docket apiInfo(springfox.documentation.service.ApiInfo)>
<org.opsli.plugins.oss.OssStorageFactory: org.opsli.plugins.oss.service.OssStorageService getHandle()>-><org.opsli.core.utils.OptionsUtil: org.opsli.api.wrapper.system.options.OptionsModel getOptionByCode(java.lang.String)>
<org.opsli.common.utils.HashIdsUtil: java.lang.String _encode(long[])>-><org.opsli.common.utils.HashIdsUtil: java.lang.String consistentShuffle(java.lang.String,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.IterationRecord: java.lang.String toString()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.AbstractList: java.util.Iterator iterator()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.utils.HashIdsUtil: java.lang.String consistentShuffle(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder: org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder subName(java.lang.String)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.modulars.generator.template.wrapper.GenTemplateModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getRedirect()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: boolean hasNext()>
<reactor.util.context.Context4: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><javassist.ClassPool: void importPackage(java.lang.String)>
<org.opsli.core.base.service.impl.CrudServiceImpl: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper addHandler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: void <init>(org.opsli.core.persistence.querybuilder.chain.QueryBuilderChain)>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry authenticated()>
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.apache.commons.beanutils.converters.CharacterConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$ExcelExportCache$ExcelExportCacheBuilder: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.reader.ReaderException: java.lang.String toString()>
<org.opsli.core.utils.DictUtil: int lambda$sortDictWrappers$3(org.opsli.api.wrapper.system.dict.DictWrapper,org.opsli.api.wrapper.system.dict.DictWrapper)>-><org.opsli.api.wrapper.system.dict.DictWrapper: org.opsli.api.wrapper.system.dict.DictDetailModel getModel()>
<synthetic.method.GenTableMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.properties.GlobalProperties$Auth: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.generator.exception.GeneratorException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getPermissions()>
<org.opsli.plugins.security.handler.LoginHandler: void login(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.web.LoginCommonRestController: void <init>(org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.common.utils.FieldUtil: java.lang.String humpToUnderline(java.lang.String)>
<reactor.util.context.Context5: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: void lambda$handleDataPermsCondition$1(org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType,java.lang.String,java.util.List,java.lang.String,java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.reflect.Constructor: java.lang.String toString()>
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><java.util.ArrayList$Itr: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<com.alibaba.fastjson.JSONObject: boolean containsKey(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: void setDriverClassName(java.lang.String)>
<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.modulars.system.SystemMsg: java.lang.String getMessage()>
<com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.YearMonth: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getPrincipal()>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><synthetic.method.ProceedingJoinPointImpl: java.lang.Object[] getArgs()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: void <init>()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getModuleName()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.StringJoiner: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.eventbus.SpringEventBus: void <init>()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.plugins.generator.enums.CodeType: org.opsli.plugins.generator.enums.CodeType getCodeType(java.lang.String)>-><org.opsli.plugins.generator.enums.CodeType: org.opsli.plugins.generator.enums.CodeType[] values()>
<reactor.util.context.Context4: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.Iterators$1: boolean hasNext()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><java.lang.Class: java.lang.Package getPackage()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.security.authentication.EmailCodeAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>
<org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getAlwaysShow()>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>-><com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>
<org.apache.commons.beanutils.converters.StringConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.excel.exception.ExcelPluginException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.Vector$Itr: boolean hasNext()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getUrl()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.PasswordRecord: java.lang.String toString()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void <clinit>()>-><java.lang.Class: java.lang.Package getPackage()>
<org.opsli.core.utils.ExcelUtil: void <init>(org.opsli.core.utils.ExcelUtil$1)>-><org.opsli.core.utils.ExcelUtil: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.alibaba.fastjson.JSONPath$MatchSegement: boolean apply(com.alibaba.fastjson.JSONPath,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void callEntry_synthetic()>-><org.opsli.modulars.system.login.web.LoginByAccountRestController$$SpringCGLIB: void login(org.opsli.api.base.encrypt.EncryptModel)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.factory.support.NullBean: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessExecutorByWait: org.opsli.common.thread.AsyncProcessor getProcessor(java.lang.String)>-><org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>
<org.opsli.plugins.generator.database.mysql.MySqlSyncBuilder: void <clinit>()>-><org.opsli.common.utils.Props: java.util.List getList(java.lang.String)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><org.apache.commons.collections.FastHashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<org.opsli.modulars.system.login.handler.before.LoginModelVerifyTempLockedBeforeHandler: void handle(java.lang.Object)>-><org.opsli.core.msg.TokenMsg: java.lang.Integer getCode()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>-><java.lang.System: long currentTimeMillis()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void <init>(java.lang.String,int)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.SubList$1: boolean hasNext()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.lang.Object get(int)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getSuccessResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper build()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><java.lang.Long: long longValue()>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: java.lang.Object castToLocalDateTime(java.lang.Object,java.lang.String)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.DumperOptions$Version: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getParent(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: java.util.Iterator iterator()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.springframework.web.multipart.MultipartFileResource: java.lang.String getFilename()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.chrono.AbstractChronology: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor: void init(java.lang.String)>-><java.lang.Runtime: void addShutdownHook(java.lang.Thread)>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper build()>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: void <init>()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><org.opsli.common.thread.AsyncProcessor: org.slf4j.Logger access$000()>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><org.opsli.core.autoconfigure.properties.GlobalProperties: org.opsli.core.autoconfigure.properties.GlobalProperties$Excel getExcel()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<java.util.EnumMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.awt.image.DirectColorModel: java.lang.String toString()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.ServletInputStream getInputStream()>-><org.springframework.util.StreamUtils: java.lang.String copyToString(java.io.InputStream,java.nio.charset.Charset)>
<org.opsli.core.utils.OptionsUtil: org.opsli.api.wrapper.system.options.OptionsModel getOptionByCode(java.lang.String)>-><org.opsli.core.cache.CacheUtil: java.lang.String formatKey(java.lang.String)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.core.msg.JwtMsg: java.lang.Integer getCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>
<java.util.EnumMap: boolean equals(java.util.EnumMap)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.apache.commons.collections.FastHashMap: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.reflect.annotation.TypeAnnotation: java.lang.String toString()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper get(org.opsli.modulars.generator.table.wrapper.GenTableModel)>-><org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class)>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: void setRoleId(java.lang.String)>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.properties.GlobalProperties: int hashCode()>-><java.lang.String: int hashCode()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.UserUtil: java.util.List getMenuListByUserId(java.lang.String)>-><org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String getTypeCode()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.persistence.Page: void setQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.opsli.plugins.generator.SqlSyncUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.common.utils.Props: void load()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.alibaba.fastjson.serializer.ToStringSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.login.handler.error.BizServiceErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.common.exception.ServiceException: java.lang.Integer getCode()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.plugins.security.utils.PasswordUtil: boolean matches(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redisson.conf.RedissonConfig: org.opsli.plugins.redisson.RedissonManager redissonManager(org.opsli.plugins.redisson.properties.RedissonProperties)>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<cn.hutool.core.convert.impl.DateConverter: java.util.Date convertInternal(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.authentication.AfterAuthenticationToken: java.lang.Object getPrincipal()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserIdByToken(java.lang.String)>-><org.opsli.core.utils.JWTBizUtil: org.opsli.core.base.dto.LoginUserDto getLoginUserFromToken(java.lang.String)>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><java.lang.Integer: int intValue()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.core.msg.JwtMsg: java.lang.Integer getCode()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<com.zaxxer.hikari.util.DriverDataSource: void <init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.test.TestModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: java.util.Map getParameterMap()>
<org.opsli.modulars.system.logs.event.OperationLogEvent: void <init>(org.opsli.modulars.system.logs.service.IOperationLogService)>-><java.lang.Object: void <init>()>
<org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String getUrl()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.handler.AuthErrorHandler: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.email.exception.EmailPluginException: void <init>(java.lang.Integer,java.lang.String)>-><org.opsli.common.exception.ServiceException: void <init>(java.lang.Integer,java.lang.String)>
<org.opsli.core.base.controller.BaseRestController$1: void <init>(org.opsli.core.base.controller.BaseRestController,org.opsli.api.wrapper.system.user.UserModel,java.util.Date)>-><org.opsli.plugins.excel.listener.BatchExcelListener: void <init>()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><com.google.common.collect.ImmutableList$SubList: java.lang.Object get(int)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.text.CharSequenceUtil: boolean isNotBlank(java.lang.CharSequence)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.common.msg.CommonMsg: java.lang.String getMessage()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.serializer.SerialContext: void toString(java.lang.StringBuilder)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<org.opsli.plugins.pagehelper.PageHelperAutoConfiguration: void afterPropertiesSet()>-><org.redisson.RedissonList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntrySetIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.asm.Type: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<com.google.common.collect.ImmutableList: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$1: void <clinit>()>-><org.opsli.common.enums.LoginModelType: org.opsli.common.enums.LoginModelType[] values()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String getUserIdByToken()>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><ch.qos.logback.classic.Logger: void info(java.lang.String)>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><cn.hutool.json.JSONObject: java.lang.Object get(java.lang.Object)>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.springframework.boot.convert.CharSequenceToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.utils.UserTokenUtil: void verify(java.lang.String)>-><org.opsli.core.utils.UserTokenUtil: java.util.Optional getLoginUserDto(java.lang.String)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setIzExistOrg(java.lang.String)>
<org.opsli.core.cache.SecurityCache: void hAllPut(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.Map)>-><com.google.common.cache.LocalCache$LocalManualCache: void invalidate(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.time.Instant: java.lang.String toString()>
<org.opsli.common.utils.WrapperUtil: java.lang.Object transformInstance(java.lang.Object,java.lang.Class,boolean)>-><java.util.MissingFormatArgumentException: java.lang.String getMessage()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.Iterators$1: java.lang.Object next()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: boolean isNonExist(java.lang.String)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><org.opsli.core.filters.aspect.LimiterAop: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getSubModuleName()>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.IllegalFormatFlagsException: java.lang.String getMessage()>
<org.springframework.data.redis.connection.RedisClusterConfiguration: void <init>(org.springframework.core.env.PropertySource)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime date()>
<org.opsli.modulars.system.login.web.LoginByAccountRestController$1: void <clinit>()>-><java.lang.Enum: int ordinal()>
<org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.alibaba.fastjson.serializer.JodaCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.springframework.boot.convert.StringToPeriodConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.common.utils.FieldUtil: java.lang.String upperFirstLetter(java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><cn.hutool.core.convert.Convert: java.lang.String toStr(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.boot.ansi.Ansi8BitColor: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.modulars.system.login.vo.AuthAccessTokenDto$AuthAccessTokenDtoBuilder: org.opsli.modulars.system.login.vo.AuthAccessTokenDto build()>-><org.opsli.modulars.system.login.vo.AuthAccessTokenDto: void <init>(java.lang.String,java.lang.Long)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>
<reactor.util.context.Context2: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.core.utils.DictUtil: java.util.List getDictList(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedCheckedException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTree()>-><java.util.Collections$UnmodifiableCollection: boolean removeIf(java.util.function.Predicate)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.core.base.service.impl.CrudServiceImpl: java.lang.Class getInnerModelClazz()>-><java.lang.Object: java.lang.Class getClass()>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper del(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.opsli.api.wrapper.system.user.UserModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.user.UserModel: java.lang.String getEmail()>
<org.opsli.core.base.service.impl.CrudServiceImpl: org.opsli.api.base.warpper.ApiWrapper save(org.opsli.api.base.warpper.ApiWrapper)>-><org.opsli.api.base.warpper.ApiWrapper: org.opsli.api.base.warpper.ApiWrapper setId(java.lang.String)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.opsli.plugins.oss.enums.OssStorageType: org.opsli.plugins.oss.enums.OssStorageType getType(java.lang.String)>-><org.opsli.plugins.oss.enums.OssStorageType: org.opsli.plugins.oss.enums.OssStorageType[] values()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByMobile(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String format(java.lang.CharSequence,java.lang.Object[])>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Arrays$ArrayList: java.lang.Object get(int)>
<com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.common.exception.TokenException lambda$logout$1()>-><org.opsli.common.exception.TokenException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<io.netty.resolver.dns.DnsServerAddressStreamProviders: void <clinit>()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.opsli.common.utils.Props: void load()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: java.lang.Object get(int)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.util.Vector: java.lang.Object get(int)>
<reactor.util.function.Tuple2: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.excel.listener.BatchExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>-><java.util.ArrayList: boolean add(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.core.utils.TreeBuildUtil: void <clinit>()>-><java.util.LinkedList: boolean add(java.lang.Object)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void delByTableId(java.lang.String)>-><org.opsli.core.persistence.querybuilder.GenQueryBuilder: void <init>()>
<com.google.common.collect.SingletonImmutableSet: int hashCode()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>-><org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder msg(java.lang.String)>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: org.opsli.api.wrapper.system.dict.DictDetailModel getModel()>
<com.google.common.util.concurrent.Futures$CallbackListener: void run()>-><org.opsli.common.thread.AsyncProcessor$1: void onSuccess(java.lang.Object)>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.test.service.impl.TestServiceImpl: void <init>()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: int hashCode()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.Enum: int ordinal()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper createCrypto(java.lang.String)>-><opsli.plugins.crypto.CryptoPlugin: opsli.plugins.crypto.strategy.CryptoAsymmetricService getAsymmetric()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.cache.CacheUtil: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.MulBlankRecord: java.lang.String toString()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.plugins.security.exception.AuthException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.common.utils.Props: java.lang.Object getObject(java.lang.String[])>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>
<org.opsli.modulars.system.logs.event.LoginLogEvent: void <init>(org.opsli.modulars.system.user.service.IUserService,org.opsli.modulars.system.logs.service.ILoginLogsService)>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserServiceImpl getUserServiceImpl()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: void callEntry_synthetic()>-><synthetic.method.HttpServletRequestImpl: void <init>()>
<org.opsli.plugins.generator.utils.GenTemplateUtil: java.util.List handleDictList(java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<synthetic.method.MySQLDatabaseTableMapperImpl: void <init>()>-><java.lang.Object: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.TenantUtil: void <init>()>
<org.opsli.plugins.excel.ExcelPlugin: java.io.OutputStream getOutputStream(java.lang.String,javax.servlet.http.HttpServletResponse,com.alibaba.excel.support.ExcelTypeEnum)>-><java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.text.DigitList: java.lang.String toString()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer headers()>
<org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String getCodeTitle()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: int hashCode()>
<org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String getType()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getMenuTrees(java.util.List,java.lang.String[],java.lang.String,int)>-><org.opsli.core.utils.TreeBuildUtil: java.util.List build(java.util.List,java.lang.String,cn.hutool.core.lang.tree.TreeNodeConfig)>
<javax.management.modelmbean.DescriptorSupport: java.lang.String[] getFields()>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<register-finalize <org.opsli.common.utils.CheckStrength$LEVEL: void <clinit>()>-><java.lang.ref.Finalizer: void register(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.expression.spel.standard.TokenKind: java.lang.String toString()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.http.HttpServletRequest getOrgRequest(javax.servlet.http.HttpServletRequest)>-><org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper: javax.servlet.http.HttpServletRequest getOrgRequest()>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: void create(org.opsli.modulars.generator.logs.wrapper.GenLogsModel,javax.servlet.http.HttpServletResponse)>-><kotlin.collections.AbstractCollection: boolean isEmpty()>
<org.opsli.core.utils.UserUtil: boolean isHasUpdateTenantPerms(org.opsli.api.wrapper.system.user.UserModel)>-><kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><org.opsli.plugins.generator.msg.GeneratorMsg: java.lang.Integer getCode()>
<java.util.AbstractList: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.google.common.collect.SingletonImmutableList: java.lang.String toString()>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.hssf.record.FilePassRecord: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><java.util.UnknownFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void handlerValue(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper,java.lang.String,java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object likeRight(java.lang.Object,java.lang.Object)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreePageByLazy(java.lang.String)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.apache.commons.beanutils.converters.NumberConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.alibaba.excel.ExcelReader: com.alibaba.excel.ExcelReader read(com.alibaba.excel.read.metadata.ReadSheet[])>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks: void <init>()>
<org.opsli.core.utils.ValidatorUtil: void check(java.lang.reflect.Field,org.opsli.common.enums.ValidatorType[],java.lang.Object)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: java.util.List getUserAllPermsByUserId(java.lang.String)>-><org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper importTables(java.lang.String)>-><org.opsli.plugins.generator.exception.GeneratorException: void <init>(org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><java.lang.String: java.lang.String toLowerCase()>
<com.alibaba.fastjson.parser.DefaultJSONParser: void parseArray(java.lang.reflect.Type,java.util.Collection,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.plugins.waf.util.SQLFilterKit: java.lang.String stripSQL(java.lang.String)>-><org.springframework.util.StringUtils: boolean isEmpty(java.lang.Object)>
<cn.hutool.json.serialize.JSONWriter: cn.hutool.json.serialize.JSONWriter writeObjValue(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.opsli.common.utils.HashIdsUtil: void <init>(java.lang.String,int,java.lang.String)>-><java.lang.String: java.lang.String valueOf(char)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)>-><org.springframework.web.servlet.config.annotation.InterceptorRegistry: org.springframework.web.servlet.config.annotation.InterceptorRegistration addInterceptor(org.springframework.web.servlet.HandlerInterceptor)>
<org.opsli.modulars.test.web.TestRestController: org.opsli.api.base.result.ResultWrapper insert(org.opsli.api.wrapper.test.TestModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<reactor.util.context.Context1: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Collections$SynchronizedCollection: java.lang.String toString()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper createCrypto(java.lang.String)>-><opsli.plugins.crypto.strategy.impl.CryptoAsymmetricServiceImpl: opsli.plugins.crypto.model.CryptoAsymmetric createKeyModel(opsli.plugins.crypto.enums.CryptoAsymmetricType)>
<org.opsli.core.utils.CaptchaUtil: void <clinit>()>-><org.opsli.core.utils.CaptchaUtil$CaptchaStrategyBySpec: void <init>(org.opsli.core.utils.CaptchaUtil$1)>
<org.opsli.modulars.system.logs.factory.UserLoginLogFactory: org.opsli.api.wrapper.system.logs.LoginLogsModel getUserLoginModel(javax.servlet.http.HttpServletRequest,org.opsli.api.wrapper.system.user.UserModel,boolean)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.opsli.modulars.system.login.web.LoginCommonRestController: org.opsli.api.base.result.ResultWrapper logout(javax.servlet.http.HttpServletRequest)>-><java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.sql.Date: java.lang.String toString()>
<com.alibaba.fastjson.serializer.DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.lettuce.core.metrics.CommandMetrics: java.lang.String toString()>
<org.opsli.plugins.excel.listener.ExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(org.opsli.common.base.msg.BaseMsg)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getCustomResultWrapper(java.lang.Object,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.slf4j.helpers.NOPLogger: void error(java.lang.String)>
<org.opsli.modulars.system.role.web.RoleRestController: void exportExcel(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType getConditionType(java.lang.String)>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType: org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler$ConditionType[] values()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.opsli.plugins.security.handler.AuthErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getCustomResultWrapper(int,java.lang.String)>
<org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>-><java.util.concurrent.LinkedBlockingDeque: void <init>(int)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper$ResultWrapperBuilder builder()>
<org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getParentIds()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getByPermissions(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper setMsg(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.core.utils.CryptoUtil: void <init>()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration$LoadingMap: java.lang.Object get(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>-><java.util.Collections$SingletonList: boolean contains(java.lang.Object)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.read.builder.ExcelReaderSheetBuilder readSheet(java.lang.String)>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: java.lang.Object lambda$getUserDefOrgByUserId$11(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.common.thread.ThreadPoolFactory: java.util.concurrent.ExecutorService createInitThreadPool(int,int,long,java.util.concurrent.TimeUnit,int,java.lang.String,java.util.concurrent.RejectedExecutionHandler)>-><com.alibaba.ttl.threadpool.TtlExecutors: java.util.concurrent.ExecutorService getTtlExecutorService(java.util.concurrent.ExecutorService)>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.modulars.system.user.service.impl.UserServiceImpl getUserServiceImpl()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.opsli.modulars.system.login.handler.success.LoginSuccessAfterVerifyHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.resolver.dns.DefaultDnsCache: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: boolean hasNext()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: boolean hasNext()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><java.lang.Enum: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<org.opsli.core.autoconfigure.conf.SwaggerConfig: springfox.documentation.service.ApiInfo apiInfo()>-><springfox.documentation.builders.ApiInfoBuilder: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper enableAccount(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.CryptoUtil: java.lang.Object asymmetricDecryptToObj(java.lang.String)>
<org.opsli.common.utils.CheckStrength$LEVEL: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<java.text.AttributeEntry: int hashCode()>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: java.util.Optional excelExportAuth(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><io.netty.util.collection.IntObjectHashMap$2$1: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryTenantHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Compare: java.lang.Object eq(java.lang.Object,java.lang.Object)>
<org.opsli.plugins.excel.ExcelPlugin: com.alibaba.excel.ExcelReader getReader(org.springframework.web.multipart.MultipartFile,org.opsli.plugins.excel.listener.ExcelListener)>-><java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.opsli.plugins.security.properties.AuthProperties: org.opsli.plugins.security.properties.AuthProperties$UrlExclusion getUrlExclusion()>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.alibaba.fastjson.JSONArray: java.lang.Object get(int)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.util.MissingFormatWidthException: java.lang.String getMessage()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean enableAccount(java.lang.String,java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper: void <init>()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.SubList$1: java.lang.Object next()>
<org.opsli.modulars.system.options.web.SysOptionsRestController: org.opsli.api.base.result.ResultWrapper findAllOptions()>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><kotlin.collections.AbstractList: java.util.Iterator iterator()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><kotlin.collections.AbstractList$IteratorImpl: java.lang.Object next()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><com.google.common.collect.RegularImmutableList: int size()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper findMenuTreeByLazy(java.lang.String,java.lang.String)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: int hashCode()>
<reactor.util.context.Context5: reactor.util.context.Context put(java.lang.Object,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.sms.msg.SmsMsgCodeEnum: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.opsli.common.utils.WrapperUtil: java.util.List transformInstance(java.util.Collection,java.lang.Class,boolean)>-><com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<com.sun.jmx.interceptor.DefaultMBeanServerInterceptor: void rethrow(java.lang.Throwable)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: java.lang.Object next()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.Engine: java.lang.String toString()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.opsli.plugins.excel.ExcelPlugin: java.util.List readExcel(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int)>-><com.alibaba.excel.EasyExcelFactory: com.alibaba.excel.read.builder.ExcelReaderBuilder read(java.io.InputStream,java.lang.Class,com.alibaba.excel.read.listener.ReadListener)>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><ch.qos.logback.classic.Logger: void error(java.lang.String)>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.generator.column.service.impl.GenTableColumnServiceImpl: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue$WeakIterator: java.lang.Object next()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.exception.AuthServiceException: void <init>(org.opsli.plugins.security.exception.errorcode.BaseAuthMsg)>-><org.opsli.plugins.security.exception.errorcode.AuthErrorCodeEnum: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean resetPassword(org.opsli.api.wrapper.system.user.UserPassword)>-><org.opsli.api.wrapper.system.user.UserPassword: java.lang.String getUserId()>
<org.opsli.plugins.excel.msg.ExcelMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.Long: java.lang.Long valueOf(long)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Collections$1: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean put(java.lang.String,java.lang.Object,long,java.util.concurrent.TimeUnit)>-><org.yaml.snakeyaml.error.MarkedYAMLException: java.lang.String getMessage()>
<org.opsli.common.utils.RateLimiterUtil: boolean enter(java.lang.String,java.lang.String,java.lang.Double)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.plugins.waf.msg.WafMsg: java.lang.Integer getCode()>-><java.lang.Integer: java.lang.Integer valueOf(int)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<reactor.util.context.Context3: java.lang.Object get(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<cn.hutool.core.map.CaseInsensitiveLinkedMap: java.lang.Object customKey(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.modulars.system.dict.web.DictDetailRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.dict.DictDetailModel)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.opsli.modulars.generator.template.web.GenTemplateDetailRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.channel.ReflectiveChannelFactory: java.lang.String toString()>
<org.opsli.core.utils.excel.factory.ModelFactoryHelper: org.opsli.core.utils.excel.factory.AbstractModelHelper getModelHelper(java.lang.Class)>-><java.lang.reflect.Method: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><synthetic.method.ProceedingJoinPointImpl: void <init>()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserOrgRefRestController: void <init>()>-><java.lang.Object: void <init>()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigInteger castToBigInteger(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.plugins.security.vo.AuthResultWrapper: org.opsli.plugins.security.vo.AuthResultWrapper getErrorResultWrapper(java.lang.Object)>-><org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder: org.opsli.plugins.security.vo.AuthResultWrapper$AuthResultWrapperBuilder msg(java.lang.String)>
<org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String getDescription()>
<org.opsli.common.utils.CheckStrength: int checkPasswordStrength(java.lang.String)>-><org.opsli.common.utils.CheckStrength$StringUtils: boolean isCharEqual(java.lang.String)>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handler(java.lang.Class,org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>
<org.opsli.core.cache.SecurityCache: java.lang.Object getCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><cn.hutool.core.convert.Convert: java.lang.String[] toStrArray(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.apache.commons.beanutils.BeanUtilsBean: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<java.util.EnumMap$Values: boolean remove(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.ImportTableUtil: void <init>()>-><java.lang.Object: void <init>()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.String convertToString(java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.plugins.waf.util.XSSFilterKit: java.lang.String stripXSS(java.lang.String)>-><java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><java.util.EnumMap: java.lang.Object get(java.lang.Object)>
<org.opsli.core.log.aspect.OperateLogAspect: void <init>()>-><synthetic.method.SingletonFactory: org.opsli.core.eventbus.SpringEventBus getSpringEventBus()>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.Vector$Itr: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.Vector: java.util.Iterator iterator()>
<org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper$1: void <init>(org.opsli.plugins.waf.servlet.WafHttpServletRequestWrapper,java.io.ByteArrayInputStream)>-><javax.servlet.ServletInputStream: void <init>()>
<com.alibaba.fastjson.serializer.SerializeFilterable: java.lang.Object processValue(com.alibaba.fastjson.serializer.JSONSerializer,com.alibaba.fastjson.serializer.BeanContext,java.lang.Object,java.lang.String,java.lang.Object,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.opsli.api.wrapper.system.menu.MenuModel: int hashCode()>
<org.opsli.core.eventbus.AbstractSpringEventBus: void scanConsumer(java.lang.String)>-><java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>
<cn.hutool.core.collection.CollUtil: int lambda$create$0(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updatePasswordByForget(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean equals(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: boolean canEqual(java.lang.Object)>
<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>-><org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><java.lang.RuntimeException: void <init>(java.lang.String)>
<org.opsli.modulars.tools.oss.web.OssRestController: org.opsli.api.base.result.ResultWrapper upload(org.springframework.web.multipart.MultipartHttpServletRequest)>-><com.jfinal.template.expr.ast.RangeArray$RangeList: java.lang.Object get(int)>
<org.opsli.core.security.service.UidUserDetailDetailServiceImpl: java.util.Optional loadUserByPrincipal(java.lang.Object)>-><com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.common.thread.AsyncProcessor: void lambda$init$0()>-><org.slf4j.helpers.NOPLogger: void info(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Short: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object hGet(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.lang.String,java.util.function.Function)>-><org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><java.util.Collections: java.util.List singletonList(java.lang.Object)>
<org.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.jfinal.template.expr.ast.Id: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.awt.geom.Curve: java.lang.String toString()>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><org.springframework.web.util.pattern.PatternParseException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.web.LoginCommonRestController$$SpringCGLIB: org.opsli.api.base.result.ResultWrapper slipCount(java.lang.String)>-><org.opsli.core.filters.aspect.LimiterAop: void <init>()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.opsli.modulars.system.login.handler.success.LoginClearErrorSuccessHandler: void <init>(org.opsli.plugins.redis.RedisPlugin)>
<org.opsli.plugins.security.provider.MobilePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder: void <init>()>
<org.opsli.modulars.system.menu.web.MenuRestController: java.util.List getBeanMapList(java.util.List,java.lang.String[])>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.handler.success.LoginCodeModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.dto.LoginUserDto$LoginUserDtoBuilder: org.opsli.core.base.dto.LoginUserDto build()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.springframework.expression.spel.ast.Literal: java.lang.String toString()>
<com.alibaba.fastjson.util.TypeUtils: java.math.BigDecimal castToBigDecimal(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.common.utils.ListDistinctUtil: java.util.List distinct(java.util.List)>-><java.util.IllegalFormatWidthException: java.lang.String getMessage()>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String toString()>
<org.opsli.core.utils.ExcelUtil: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,org.opsli.plugins.excel.listener.BatchExcelListener)>-><org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,org.opsli.plugins.excel.listener.BatchExcelListener)>
<io.netty.util.collection.IntObjectHashMap: boolean containsValue(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<javax.management.modelmbean.DescriptorSupport: boolean isValid()>-><org.opsli.plugins.security.exception.AuthServiceException: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.ehcache.shadow.org.terracotta.statistics.GeneralOperationStatistic: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.opsli.api.wrapper.system.menu.MenuModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.WebUtils: void renderErrorByAlert(javax.servlet.http.HttpServletResponse,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.plugins.security.authentication.EmailPasswordAuthenticationToken: void setAuthenticated(boolean)>-><org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)>
<org.opsli.modulars.generator.logs.service.impl.GenLogsServiceImpl: org.opsli.modulars.generator.logs.wrapper.GenLogsModel getByTableId(java.lang.String)>-><java.util.Collections$EmptyList: java.lang.Object get(int)>
<com.alibaba.fastjson.serializer.AppendableSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.listener.ApplicationReadyEventListener: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper createQueryWrapper(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.lang.Object get(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function,boolean)>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel: java.lang.String getPath()>
<org.opsli.core.autoconfigure.conf.SecurityConfig: void initAuthorizeRequests(org.springframework.security.config.annotation.web.builders.HttpSecurity)>-><org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer accessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.wrapper.system.user.UserModel insert(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.api.wrapper.system.user.UserModel: void setPasswordLevel(java.lang.String)>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.persistence.querybuilder.WebQueryBuilder: void <init>(java.lang.Class,java.util.Map,java.lang.String,org.opsli.core.persistence.querybuilder.conf.WebQueryConf)>-><java.lang.Object: void <init>()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<org.opsli.core.autoconfigure.conf.SpringWebMvcConfig: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.UserUtil: boolean refreshUserAllPerms(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<org.opsli.core.utils.DictUtil: void <init>()>-><org.opsli.modulars.system.dict.web.DictDetailRestController: void <init>()>
<org.opsli.plugins.security.handler.OtherErrorHandler: boolean handle(java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Exception)>-><org.springframework.cglib.core.ReflectUtils$6: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.SubList: java.util.Iterator iterator()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>-><com.alibaba.fastjson.support.config.FastJsonConfig: com.alibaba.fastjson.serializer.SerializeFilter[] getSerializeFilters()>
<org.opsli.core.utils.UserUtil: boolean updateUser(org.opsli.api.wrapper.system.user.UserModel)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.opsli.plugins.excel.listener.BatchExcelListener: void invoke(java.lang.Object,com.alibaba.excel.context.AnalysisContext)>-><org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><org.apache.ibatis.session.Configuration$StrictMap: java.lang.Object get(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.api.ApiRequestMappingHandlerMapping: void <init>()>-><org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: void <init>()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$KeySet$1: boolean hasNext()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.plugins.oss.OssStorageFactory: org.opsli.plugins.oss.service.OssStorageService getHandle()>-><org.opsli.common.enums.OptionsType: java.lang.String getCode()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.DefaultJSONParser: java.lang.Object parseObject(java.util.Map,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><java.util.IllegalFormatCodePointException: java.lang.String getMessage()>
<org.opsli.modulars.system.tenant.web.TenantRestController: org.opsli.api.base.result.ResultWrapper exportExcelAuth(java.lang.String,javax.servlet.http.HttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.core.persistence.Page findPageByCus(org.opsli.core.persistence.Page)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.plugins.redis.RedisPlugin: boolean expire(java.lang.String,long,java.util.concurrent.TimeUnit)>-><java.nio.file.FileSystemException: java.lang.String getMessage()>
<org.opsli.core.utils.UserTokenUtil: java.lang.String createAccessToken(org.opsli.core.base.dto.LoginUserDto)>-><java.lang.Long: long longValue()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.nio.CharBuffer: java.lang.String toString()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String getUserId()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><io.netty.util.collection.IntObjectHashMap$MapIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: void <init>()>-><org.opsli.core.base.controller.BaseRestController: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.text.FieldPosition: java.lang.String toString()>
<org.opsli.plugins.generator.utils.GeneratorHandleUtil: org.opsli.modulars.generator.logs.wrapper.GenBuilderModel handleData(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,java.util.List)>-><kotlin.collections.AbstractList$SubList: java.lang.Object get(int)>
<org.opsli.core.base.controller.BaseRestController: void demoError()>-><org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>-><org.opsli.plugins.security.exception.AuthServiceException: int hashCode()>
<com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>-><org.opsli.api.wrapper.system.dict.DictWrapper: int hashCode()>
<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.opsli.core.base.dto.LoginUserDto: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.apache.poi.ss.formula.ptg.NameXPtg: java.lang.String toString()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><java.lang.Throwable: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: java.lang.String getParameterMapStr()>
<org.opsli.common.utils.ZipUtils: void toZip(java.util.List,java.io.OutputStream)>-><com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
<java.awt.font.StyledParagraph: void addFont(java.lang.Object,int)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.excel.metadata.CellData: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.common.msg.CommonMsg: void <clinit>()>-><org.opsli.common.msg.CommonMsg: void <init>(java.lang.String,int,int,java.lang.String)>
<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>-><org.opsli.plugins.security.exception.AuthException: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map getAllHashCacheObject(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: java.util.Map createCode(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,org.opsli.modulars.generator.template.wrapper.GenTemplateDetailModel,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.PasswordUtil: java.lang.String encode(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String)>-><java.lang.String: java.lang.String valueOf(long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<org.opsli.plugins.redisson.properties.RedissonProperties: int hashCode()>-><java.lang.Enum: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Collections$UnmodifiableMap: java.lang.String toString()>
<reactor.util.function.Tuple2: int hashCode()>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: int hashCode()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String toString()>
<cn.hutool.core.util.ObjectUtil: boolean isNull(java.lang.Object)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.lang.Thread: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updatePasswordByNotCheckOld(org.opsli.api.wrapper.system.user.ToUserPassword)>-><org.opsli.api.wrapper.system.user.ToUserPassword: java.lang.String getNewPassword()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><javassist.compiler.CompileError: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.resolver.dns.SingletonDnsServerAddresses: java.lang.String toString()>
<org.opsli.common.thread.AsyncProcessor$1: void onFailure(java.lang.Throwable)>-><java.util.IllegalFormatConversionException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: java.util.List handleTreeHasChildren(java.util.List,java.util.function.Function)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.security.utils.PasswordUtil: boolean matches(org.springframework.security.crypto.password.PasswordEncoder,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.opsli.modulars.generator.logs.web.GenLogsRestController: void create(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: java.util.List findList(com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUser()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: boolean hasNext()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper getUserByUsername(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: java.lang.String format(java.lang.CharSequence,java.lang.Object[])>
<org.opsli.plugins.excel.ExcelPlugin: void readExcelByListener(org.springframework.web.multipart.MultipartFile,java.lang.Class,java.lang.String,int,org.opsli.plugins.excel.listener.BatchExcelListener)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.modulars.system.menu.service.impl.MenuServiceImpl: void <init>()>-><org.opsli.core.base.service.impl.CrudServiceImpl: void <init>()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.cglib.core.WeakCacheKey: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type,int)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
<cn.hutool.core.convert.impl.ArrayConverter: java.lang.Object convertObjectToArray(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: java.lang.String toString()>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserBySource()>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper getMenuAndPermsTree(java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapper(java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController: void excelExport(java.lang.String,javax.servlet.http.HttpServletResponse)>-><java.util.HashMap: void <init>()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.lettuce.core.event.metrics.CommandLatencyEvent: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserEmail(org.opsli.api.wrapper.system.user.UpdateUserEmailModel)>-><org.opsli.common.enums.VerificationTypeEnum: java.lang.String getType()>
<org.opsli.core.general.StartPrint: java.lang.String getBasePath()>-><java.lang.StringBuilder: void <init>()>
<javax.security.auth.Subject$SecureSet: boolean remove(java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.RedisPlugin: boolean sHashKey(java.lang.String,java.lang.Object)>-><org.springframework.expression.ExpressionException: java.lang.String getMessage()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: java.lang.String toString()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.stream.Nodes$LongFixedNodeBuilder: java.lang.String toString()>
<org.springframework.data.redis.core.AbstractOperations: byte[] rawValue(java.lang.Object)>-><org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: byte[] serialize(java.lang.Object)>
<org.opsli.plugins.redisson.RedissonManager$RedissonConfigFactory: void <init>()>-><java.util.UnknownFormatFlagsException: java.lang.String getMessage()>
<org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><kotlin.collections.AbstractList$SubList: java.lang.Object get(int)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.opsli.core.base.controller.BaseRestController$ExcelExportCache: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: int hashCode()>
<org.opsli.core.utils.ValidatorUtil: void checkMin(java.lang.reflect.Field,int,java.lang.Object)>-><ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.filters.aspect.ValidatorAop: void validation(org.aspectj.lang.JoinPoint)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.core.utils.SearchHisUtil: void putSearchHis(javax.servlet.http.HttpServletRequest,java.util.List)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<org.opsli.core.utils.CaptchaUtil: void createCaptcha(java.lang.String,java.io.OutputStream)>-><org.opsli.core.utils.ThrowExceptionUtil: void isThrowException(boolean,org.opsli.common.base.msg.BaseMsg)>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: int size()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.opsli.api.wrapper.system.dict.DictWrapper: java.lang.String toString()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchTenant(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.query.QueryWrapper: void <init>()>
<org.opsli.core.persistence.querybuilder.chain.QueryDataPermsHandler: com.baomidou.mybatisplus.core.conditions.query.QueryWrapper handleDataPermsCondition(org.opsli.core.persistence.querybuilder.conf.WebQueryConf,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserRoleRefServiceImpl: boolean setRoles(org.opsli.api.wrapper.system.user.UserRoleRefModel)>-><org.opsli.common.enums.DictType: java.lang.String getValue()>
<org.opsli.plugins.generator.SqlSyncUtil: void initSyncStrategy()>-><cn.hutool.core.util.ClassUtil: java.util.Set scanPackageBySuper(java.lang.String,java.lang.Class)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.apache.commons.collections.FastHashMap$CollectionView$CollectionViewIterator: java.lang.Object next()>
<org.opsli.modulars.system.login.web.LoginByCodeRestController: void <clinit>()>-><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: java.lang.Object get(int)>
<org.opsli.plugins.security.provider.MobilePasswordAuthenticationProvider: void <init>(org.opsli.plugins.security.service.LoadUserDetailServiceFactory,org.opsli.plugins.security.checker.DefaultPreAuthenticationChecks,org.opsli.plugins.security.checker.DefaultPostAuthenticationChecks,org.springframework.security.crypto.password.PasswordEncoder,org.opsli.plugins.security.eventbus.SpringSecurityEventBus)>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper switchOneself()>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String getAlwaysShow()>
<org.opsli.core.utils.UserTokenUtil: long getSlipCount(java.lang.String)>-><java.lang.Enum: java.lang.String name()>
<org.opsli.core.eventbus.SpringEventBus: void <init>()>-><com.google.common.eventbus.AsyncEventBus: void <init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler)>
<org.opsli.modulars.generator.template.web.GenTemplateRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.modulars.generator.template.wrapper.GenTemplateModel)>-><org.opsli.plugins.generator.utils.GeneratorHandleUtil: void judgeGeneratorEnable(org.opsli.core.autoconfigure.properties.GlobalProperties)>
<org.opsli.core.msg.JwtMsg: void <init>(java.lang.String,int,int,java.lang.String)>-><java.lang.Enum: void <init>(java.lang.String,int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: boolean equals(java.lang.Object)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper findPageByTenant(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><cn.hutool.json.JSONArray: java.util.Iterator iterator()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.io.WriteAbortedException: java.lang.String getMessage()>
<org.opsli.plugins.generator.strategy.create.CodeBuilder: void build(org.opsli.modulars.generator.logs.wrapper.GenBuilderModel,javax.servlet.http.HttpServletResponse)>-><org.springframework.core.NestedIOException: java.lang.String getMessage()>
<org.opsli.modulars.system.login.handler.success.LoginModelCreateAccessTokenHandler: void handle(java.lang.Object,org.springframework.security.core.Authentication,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.opsli.plugins.security.utils.IpaddrUtil: java.lang.String getClientIdBySingle(javax.servlet.http.HttpServletRequest)>
<org.opsli.plugins.excel.ExcelPlugin: void writeExcel(javax.servlet.http.HttpServletResponse,java.util.List,java.lang.String,java.lang.String,java.lang.Class,com.alibaba.excel.support.ExcelTypeEnum)>-><java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><com.alibaba.fastjson.support.config.FastJsonConfig: com.alibaba.fastjson.parser.deserializer.ParseProcess getParseProcess()>
<org.opsli.common.utils.IPUtil: java.lang.String getClientId(javax.servlet.http.HttpServletRequest)>-><cn.hutool.core.lang.Validator: boolean isIpv6(java.lang.CharSequence)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.opsli.plugins.security.exception.AuthServiceException: boolean equals(java.lang.Object)>
<org.opsli.modulars.gentest.user.web.TestUserRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>-><org.opsli.core.base.controller.BaseRestController: org.opsli.api.base.result.ResultWrapper importExcel(org.springframework.web.multipart.MultipartHttpServletRequest)>
<org.apache.commons.beanutils.converters.FileConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: java.lang.String toString()>
<org.opsli.modulars.system.menu.web.MenuRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.menu.MenuModel)>-><org.opsli.core.base.controller.BaseRestController: void demoError()>
<org.opsli.common.enums.DictType: boolean hasDict(java.lang.String,java.lang.String)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.opsli.core.utils.OrgUtil: void lambda$null$0(java.lang.String,com.baomidou.mybatisplus.core.conditions.query.QueryWrapper)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><cn.hutool.core.convert.Convert: java.lang.String toStr(java.lang.Object)>
<org.opsli.plugins.redis.conf.RedisPluginConfig: org.springframework.data.redis.core.RedisTemplate redisTemplate()>-><org.springframework.data.redis.core.RedisAccessor: void setConnectionFactory(org.springframework.data.redis.connection.RedisConnectionFactory)>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper delAll(org.opsli.api.base.encrypt.EncryptModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean deleteAll(java.lang.String[])>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.opsli.plugins.redis.RedisPlugin: boolean expireAt(java.lang.String,java.util.Date)>-><com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<org.opsli.core.utils.UserUtil: java.lang.Object lambda$getUserRolesByUserId$6(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.opsli.core.filters.interceptor.UserAuthInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.opsli.core.holder.UserContextHolder: void setToken(java.lang.String)>
<com.alibaba.fastjson.serializer.StringCodec: java.lang.Object deserialze(com.alibaba.fastjson.parser.DefaultJSONParser,java.lang.reflect.Type,java.lang.Object)>-><org.opsli.modulars.system.user.entity.SysUserRoleRef: java.lang.String toString()>
<org.opsli.core.cache.SecurityCache: java.util.Map hGetAll(org.springframework.data.redis.core.RedisTemplate,java.lang.String,java.util.function.Function)>-><org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
<org.opsli.core.utils.UserUtil: org.opsli.api.wrapper.system.user.UserModel getUserByUserName(java.lang.String)>-><cn.hutool.core.text.CharSequenceUtil: boolean isEmpty(java.lang.CharSequence)>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.opsli.api.wrapper.system.logs.LoginLogsModel: int hashCode()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg,java.lang.Throwable)>-><opsli.plugins.crypto.msg.CryptoMsg: java.lang.Integer getCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.opsli.api.wrapper.system.menu.MenuModel: java.lang.String toString()>
<org.opsli.core.api.ApiVersionCondition: org.opsli.core.api.ApiVersionCondition getMatchingCondition(javax.servlet.http.HttpServletRequest)>-><java.util.regex.Matcher: java.lang.String group(int)>
<org.opsli.core.utils.OptionsUtil: java.util.Map convertOptionsMap(java.util.List)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.core.filters.aspect.LimiterAop: void limiterHandle(org.aspectj.lang.JoinPoint)>-><java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>
<org.opsli.modulars.system.user.web.UserRestController: org.opsli.api.base.result.ResultWrapper updateSelf(org.opsli.api.wrapper.system.user.UserModel)>-><org.opsli.modulars.system.user.service.impl.UserServiceImpl: org.opsli.api.base.warpper.ApiWrapper update(org.opsli.api.base.warpper.ApiWrapper)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: java.lang.String toString()>
<org.opsli.modulars.system.role.web.RoleRestController: org.opsli.api.base.result.ResultWrapper update(org.opsli.api.wrapper.system.role.RoleModel)>-><org.opsli.api.base.result.ResultWrapper: org.opsli.api.base.result.ResultWrapper getSuccessResultWrapperByMsg(java.lang.String)>
<org.opsli.core.utils.ExcelUtil: cn.hutool.json.JSONObject getFieldsDict(cn.hutool.json.JSONObject)>-><cn.hutool.json.JSONUtil: boolean isNull(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.opsli.modulars.generator.logs.wrapper.GenBuilderModel: boolean equals(java.lang.Object)>
<org.opsli.plugins.generator.utils.EnjoyUtil: java.lang.String renderByStr(java.lang.String,com.jfinal.kit.Kv)>-><com.jfinal.template.Engine: com.jfinal.template.Engine setDevMode(boolean)>
<org.opsli.modulars.system.dict.web.DictRestController: org.opsli.api.base.result.ResultWrapper delAll(java.lang.String)>-><com.baomidou.mybatisplus.core.conditions.interfaces.Func: java.lang.Object in(java.lang.Object,java.util.Collection)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<com.alibaba.fastjson.util.TypeUtils: java.lang.String castToString(java.lang.Object)>-><org.opsli.plugins.redisson.properties.RedissonProperties: java.lang.String toString()>
<org.opsli.core.base.service.impl.CrudServiceImpl: boolean insertBatch(java.util.List)>-><com.google.common.collect.ImmutableList$SubList: int size()>
<org.apache.commons.beanutils.converters.ClassConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)>-><org.opsli.common.utils.RateLimiterUtil$RateLimiterInner: java.lang.String toString()>
<org.opsli.modulars.generator.table.web.GenTableRestController: org.opsli.api.base.result.ResultWrapper findPage(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>-><java.lang.Integer: int intValue()>
<com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.modulars.generator.importable.entity.DatabaseColumn: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.modulars.system.user.entity.SysUserRoleRef: void <init>()>-><java.lang.Object: void <init>()>
<org.opsli.core.utils.ExcelUtil: java.util.List handleDatas(java.util.List,java.lang.Class,org.opsli.common.enums.ExcelOperate)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: boolean updateUserMobile(org.opsli.api.wrapper.system.user.UpdateUserMobileModel)>-><com.baomidou.mybatisplus.core.conditions.update.Update: java.lang.Object set(java.lang.Object,java.lang.Object)>
<org.opsli.core.base.controller.BaseRestController$1: void saveData(java.util.List)>-><io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue$WeakIterator: java.lang.Object next()>
<org.opsli.core.autoconfigure.properties.DbSourceProperties: void setDataSourceInfoMap(com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties)>-><cn.hutool.core.convert.Convert: java.lang.Integer toInt(java.lang.Object)>
<org.opsli.common.exception.ServiceException: void <init>(org.opsli.common.base.msg.BaseMsg)>-><opsli.plugins.crypto.msg.CryptoMsg: java.lang.Integer getCode()>
<org.opsli.core.base.controller.BaseRestController: void handleTreeHasChildren(java.util.List,java.util.Map)>-><java.util.SubList$1: boolean hasNext()>
<org.opsli.core.utils.UserUtil: java.lang.Object lambda$getOrgListByUserId$8(java.lang.String,java.lang.String)>-><org.opsli.api.base.result.ResultWrapper: boolean isSuccess(org.opsli.api.base.result.ResultWrapper)>
<org.opsli.plugins.excel.listener.ExcelListener: boolean checkObjAllFieldsIsNull(java.lang.Object)>-><java.lang.Throwable: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.opsli.core.autoconfigure.properties.DbSourceProperties$DataSourceInfo: boolean equals(java.lang.Object)>
<reactor.util.context.Context2: boolean hasKey(java.lang.Object)>-><org.opsli.plugins.security.exception.AuthException: boolean equals(java.lang.Object)>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><org.yaml.snakeyaml.tokens.Token$ID: java.lang.String toString()>
<org.opsli.modulars.system.user.service.impl.UserServiceImpl: void clearCache(java.util.List)>-><com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()>
<org.opsli.plugins.redis.jsonserializer.FastJson2JsonRedisSerializer: java.lang.Object deserialize(byte[])>-><java.util.Vector: java.lang.String toString()>
