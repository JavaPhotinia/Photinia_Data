<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Collections$UnmodifiableCollection: int size()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.JavaObjectData: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.env.PropertySource: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><ch.qos.logback.classic.spi.ClassPackagingData: int hashCode()>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>-><com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayList: boolean isEmpty()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getKey()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><org.springframework.core.annotation.MergedAnnotations: org.springframework.core.annotation.MergedAnnotations from(java.lang.Object,java.lang.annotation.Annotation[],org.springframework.core.annotation.RepeatableContainers)>
<org.springframework.core.annotation.MergedAnnotationCollectors: java.util.stream.Collector toAnnotationSet()>-><java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.HashMap$EntrySet: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.FunctionSQL: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.EnumMap$Values: int size()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: boolean add(java.lang.Object)>-><io.undertow.util.HeaderValues: boolean add(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.TemporaryVariable: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.util.collections.WeakHashSet: boolean isEmpty()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><org.jruby.util.collections.WeakHashSet: boolean isEmpty()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.core.io.Resource getResourceByPath(java.lang.String)>-><org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource: void <init>(java.lang.String,java.lang.ClassLoader)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint: void <init>()>-><net.bytebuddy.description.type.TypeList$Generic$Empty: void <init>()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: java.lang.String getString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><org.springframework.http.server.reactive.HttpHeadResponseDecorator: void <init>(org.springframework.http.server.reactive.ServerHttpResponse)>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getKey()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: void <init>(javax.sql.DataSource)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><org.springframework.core.annotation.AnnotationsScanner: boolean hasPlainJavaAnnotationsOnly(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.util.RecursiveComparator$Pair: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><com.thoughtworks.xstream.core.util.WeakCache: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.StringLiteral: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.beans.PropertyDescriptor: int hashCode()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object get(java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: int hit()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTFinalEndpoint: java.lang.String follow(java.lang.String)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.TreeMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.boot.convert.CollectionToDelimitedStringConverter: java.lang.Object convert(java.util.Collection,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: boolean isEmpty()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.EnumMap$Values: int size()>
<java.lang.Object: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringValues: int hashCode()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.passes.CompilerPass: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.core.style.DefaultToStringStyler: void styleField(java.lang.StringBuilder,java.lang.String,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleValue(java.lang.StringBuilder,java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.Collections$EmptySet: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.IdentityHashMap: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.MBeanParameterInfo: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$Values: void clear()>-><com.google.common.collect.Maps$TransformedEntriesMap: void clear()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.imageio.ImageTypeSpecifier: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfParameterizedType: int hashCode()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Collections$SingletonSet: int size()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>
<io.undertow.util.HeaderValues: java.lang.Object remove(int)>-><io.undertow.util.HeaderValues: java.lang.String remove(int)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<org.jruby.javasupport.JavaClass: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><org.springframework.validation.AbstractBindingResult: java.util.List getAllErrors()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getCredentials()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><org.springframework.http.HttpRequest: org.springframework.http.HttpMethod getMethod()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.BasicPermission: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.UnboxedFixnum: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.misc.Signal: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<com.google.common.collect.Maps$TransformedEntriesMap: java.util.Set createEntrySet()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: void <init>(com.google.common.collect.Maps$TransformedEntriesMap)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: void <init>(javax.sql.DataSource)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint: java.lang.String decode(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.AbstractSet: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORLogin: void <init>()>-><com.fasterxml.jackson.core.util.InternCache: void <init>()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.validation.FieldError: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.base.AbstractInstant: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray()>
<org.jruby.util.JRubyClassLoader: void terminateJarIndexCacheEntries()>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: java.util.Collection retrieveComments(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.stored.StoredXssComments: java.util.Collection retrieveComments()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.flywaydb.core.internal.util.Pair: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: boolean isEmpty()>
<io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><org.jruby.RubyHash$BaseSet: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.Row: boolean equals(java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<java.security.Provider: void implPutAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.beans.factory.config.RuntimeBeanReference: int hashCode()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.awt.Color: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.x509.RDN: int hashCode()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean removeFirstOccurrence(java.lang.Object)>-><io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: java.util.Iterator iterator()>-><io.undertow.util.HeaderValues: java.util.ListIterator iterator(int,boolean)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.DateTimeType: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SynchronizedMap: java.util.Set entrySet()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfTypeVariable: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.java.proxies.ArrayJavaProxy: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubySymbol: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><io.undertow.util.HeaderValues: int size()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext get(javax.servlet.http.HttpServletRequest)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.LinkedHashMap$LinkedValues: void clear()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.invoke.LambdaForm$Name: int hashCode()>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotatedElementUtils: org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><org.springframework.core.annotation.AnnotatedElementUtils: org.springframework.core.annotation.MergedAnnotations getAnnotations(java.lang.reflect.AnnotatedElement)>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.JumboEnumSet: boolean isEmpty()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.annotation.MergedAnnotation from(java.lang.Object,java.lang.annotation.Annotation)>-><org.springframework.core.annotation.AnnotationTypeMappings: org.springframework.core.annotation.AnnotationTypeMappings forAnnotationType(java.lang.Class)>
<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Class getTargetType()>-><org.springframework.core.ResolvableType: java.lang.Class resolve()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onClose()>-><org.springframework.context.support.AbstractApplicationContext: void onClose()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.servlet.spec.HttpSessionImpl: io.undertow.servlet.spec.HttpSessionImpl forSession(io.undertow.server.session.Session,javax.servlet.ServletContext,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: void <init>(io.undertow.server.session.Session,javax.servlet.ServletContext,boolean,io.undertow.servlet.handlers.ServletRequestContext)>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.util.Rfc6265CookieSupport: void validateCookieValue(java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.awt.Point: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.AbstractCollection: java.lang.String toString()>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.AbstractMap: java.lang.String toString()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.jruby.anno.TypePopulator$ReflectiveTypePopulator: void addBoundMethodsUnlessOmited(org.jruby.Ruby,java.lang.String,java.util.List)>-><io.undertow.util.HeaderValues: int size()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.AbstractMap$1: void clear()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.lang.String resolveRequestUri(reactor.netty.http.server.HttpServerRequest)>-><reactor.netty.http.server.HttpServerRequest: java.lang.String uri()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.core.style.DefaultToStringStyler: void styleIdentityHashCode(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.awt.image.ColorModel: int hashCode()>
<com.google.common.collect.TransformedIterator: java.lang.Object next()>-><com.google.common.collect.Multimaps$Keys$1: java.lang.Object transform(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Assignment: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hibernate.engine.query.spi.QueryPlanCache$HQLQueryPlanKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.locale.BaseLocale: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>-><java.net.URI: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.lang.ProcessEnvironment$StringValues: int size()>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: boolean containsKey(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>-><com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>
<java.util.EnumMap: int entryHashCode(int)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object)>-><org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<io.undertow.util.HeaderMap: void resize()>-><java.lang.AssertionError: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.TreeMap: void putAll(java.util.Map)>-><java.util.Collections$SynchronizedSortedMap: java.util.Comparator comparator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$UnmodifiableSet: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.thoughtworks.xstream.io.path.Path: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Collections$SynchronizedCollection: void clear()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.jruby.ir.representations.CFG: org.jruby.dirgra.DirectedGraph build(org.jruby.ir.instructions.Instr[])>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForDescriptionArray: int hashCode()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderMap put(io.undertow.util.HttpString,java.lang.String)>-><io.undertow.util.HeaderValues: boolean add(java.lang.String)>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: void <init>(reactor.netty.http.server.HttpServerRequest,org.springframework.core.io.buffer.NettyDataBufferFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<io.undertow.servlet.spec.HttpSessionImpl: io.undertow.servlet.spec.HttpSessionImpl forSession(io.undertow.server.session.Session,javax.servlet.ServletContext,boolean)>-><io.undertow.servlet.handlers.ServletRequestContext: io.undertow.servlet.handlers.ServletRequestContext current()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractList: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues$1: java.lang.String next()>-><io.undertow.util.HeaderValues: java.lang.String get(int)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.lessons.Hint: java.lang.String toString()>-><org.owasp.webgoat.lessons.Hint: java.lang.String getAssignmentPath()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.ArraysParallelSortHelpers$FJObject$Merger: void compute()>-><org.springframework.core.OrderComparator: int compare(java.lang.Object,java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean isEmpty()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.util.LinkedMultiValueMap: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz: boolean[] getResults()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Locale: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.imageio.ImageTypeSpecifier: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ast.SymbolNode: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap: boolean isEmpty()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyModule: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.util.ByteList: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation synthesizeAnnotation(java.lang.annotation.Annotation,java.lang.reflect.AnnotatedElement)>-><org.springframework.core.annotation.AbstractMergedAnnotation: java.lang.annotation.Annotation synthesize()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredXssComments: void <init>()>-><com.fasterxml.jackson.core.util.InternCache: void <init>()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.thoughtworks.xstream.io.path.Path: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.SecureKey: int hashCode()>
<java.util.Collections$UnmodifiableSortedSet: java.util.Comparator comparator()>-><java.util.Collections$SynchronizedSortedSet: java.util.Comparator comparator()>
<java.util.Spliterators$1Adapter: boolean hasNext()>-><java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.nio.ByteBuffer: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>
<io.undertow.server.handlers.cache.LRUCache$CacheEntry: void <init>(java.lang.Object,java.lang.Object,long,io.undertow.server.handlers.cache.LRUCache$1)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: void <init>(java.lang.Object,java.lang.Object,long)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.lang.Float: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: int size()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.flywaydb.core.internal.database.base.Schema: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>-><java.util.ArrayDeque: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)>-><java.text.SimpleDateFormat: java.lang.String toPattern()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.XOREncodingAssignment: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyThread: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.jruby.RubyHash$BaseSet: void clear()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.String: boolean startsWith(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.flywaydb.core.api.Location: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadRetrieval: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: void <init>()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>-><java.lang.Object: java.lang.String toString()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfParameterizedType: int hashCode()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.passes.CompilerPass: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.sql.DriverInfo: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues$1: void set(java.lang.Object)>-><io.undertow.util.HeaderValues$1: void set(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.text.ParsePosition: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.lang.String getString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hibernate.engine.query.spi.NamedParameterDescriptor: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.aop.framework.AopProxyUtils: java.lang.Class[] completeProxiedInterfaces(org.springframework.aop.framework.AdvisedSupport,boolean)>-><java.lang.Class: java.lang.Class[] getInterfaces()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys: java.util.Iterator entryIterator()>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.util.LinkedMultiValueMap: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hibernate.engine.query.spi.NamedParameterDescriptor: int hashCode()>
<java.util.AbstractMap: int hashCode()>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.validation.BindException: java.lang.String getMessage()>
<org.springframework.core.style.DefaultToStringStyler: void styleEnd(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.flywaydb.core.internal.util.Pair: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.security.web.util.matcher.RegexRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray(java.lang.Object[])>-><java.util.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: int size()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.service.LabelDebugService getLabelDebugService()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.Boolean: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.flywaydb.core.api.Location: int hashCode()>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.jruby.RubyHash$BaseIterator: java.lang.Object next()>
<org.jruby.ir.representations.CFG: org.jruby.dirgra.DirectedGraph build(org.jruby.ir.instructions.Instr[])>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues$1: void set(java.lang.String)>-><io.undertow.util.HeaderValues: java.lang.String set(int,java.lang.String)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.awt.Color: boolean equals(java.lang.Object)>
<java.util.stream.AbstractTask: void compute()>-><java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.jruby.javasupport.JavaArray: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><io.undertow.server.HttpServerExchange: io.undertow.util.HeaderMap getResponseHeaders()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<io.undertow.servlet.spec.ServletPrintWriterDelegate$1: io.undertow.servlet.spec.ServletPrintWriterDelegate run()>-><io.undertow.servlet.spec.ServletPrintWriterDelegate: sun.misc.Unsafe access$000()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Vector: boolean isEmpty()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.JapaneseImperialCalendar: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<org.owasp.webwolf.FileServer: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.AbstractList: void clear()>-><com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$MappingList: int size()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: int hashCode()>
<io.undertow.util.HeaderValues: boolean offerLast(java.lang.String)>-><io.undertow.util.HeaderValues: void offerLastMultiValue(java.lang.String,int,java.lang.String[])>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.cglib.core.Signature: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet$6: void <init>(javax.security.auth.Subject$SecureSet,java.util.Iterator)>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTFinalEndpoint: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.SecureDefaultsAssignment: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpSessionImpl$UnwrapSessionAction: io.undertow.server.session.Session run()>-><io.undertow.servlet.spec.HttpSessionImpl: io.undertow.server.session.Session getSession()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.ProcessEnvironment$StringEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set findTimedAnnotations(java.lang.reflect.AnnotatedElement)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Date: boolean equals(java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: java.lang.String getString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getSessionId()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Byte: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.UUID: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.PropertyValue: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.AllPermission: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.util.Set entrySet()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter)>
<org.springframework.core.annotation.AnnotatedElementUtils: org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><org.springframework.core.annotation.MergedAnnotationSelectors: org.springframework.core.annotation.MergedAnnotationSelector firstDirectlyDeclared()>
<org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>-><com.google.common.collect.Maps$TransformedEntriesMap: java.util.Set createEntrySet()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.BeanMetadataAttribute: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.AttributeEntry: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: javax.servlet.ServletContext getServletContext()>-><org.springframework.web.context.support.ServletContextAwareProcessor: javax.servlet.ServletContext getServletContext()>
<io.undertow.util.HeaderValues: java.lang.String get(int)>-><java.lang.AssertionError: void <init>()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(sun.security.ssl.ProtocolVersion)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setStatus(int)>-><io.undertow.servlet.spec.HttpServletResponseImpl: boolean responseStarted()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Vector: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyHash$ConvertingEntry: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationTypeMapping: java.util.Map resolveAliasedForTargets()>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound: boolean equals(java.lang.Object)>
<io.undertow.servlet.api.ServletInfo: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.ArrayType: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Collection getLongTaskTimerSamples(javax.servlet.http.HttpServletRequest,java.lang.Object,java.util.Set)>-><java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.path_traversal.ProfileUploadFix: void <init>(java.lang.String,org.owasp.webgoat.session.WebSession)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.secure_password.SecurePasswordsAssignment getSecurePasswordsAssignment()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractList$Itr: boolean hasNext()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: java.lang.String getString()>
<java.util.AbstractList: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$SynchronizedMap: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfParameterizedType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.springframework.http.ResponseEntity ok(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.chrome_dev_tools.NetworkLesson: org.springframework.http.ResponseEntity ok(java.lang.String)>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: void <init>(org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver,org.springframework.beans.factory.config.DependencyDescriptor,org.springframework.beans.factory.support.DefaultListableBeanFactory,java.lang.String)>-><java.lang.Object: void <init>()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.html_tampering.HtmlTamperingTask: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>-><java.security.Provider$Service: java.security.Provider getProvider()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: java.lang.String value()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)>-><org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><io.undertow.util.HeaderValues: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.ssrf.SSRFTask2 getSSRFTask2()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hibernate.internal.util.compare.ComparableComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<java.util.SubList: void removeRange(int,int)>-><java.util.Vector: void removeRange(int,int)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyBasicObject: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<sun.security.ssl.SSLSessionImpl: int hashCode()>-><sun.security.ssl.SessionId: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>-><com.google.common.collect.Maps: com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)>
<org.springframework.http.HttpRequest: org.springframework.http.HttpMethod getMethod()>-><org.springframework.http.server.reactive.ReactorServerHttpRequest: java.lang.String getMethodValue()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection: int hashCode()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.TreeMap$Values: int size()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.TreeMap$Values: int size()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.DateTimeZone: int hashCode()>
<io.undertow.servlet.spec.ServletPrintWriterDelegate: sun.misc.Unsafe getUnsafe0()>-><java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.TextNode: int hashCode()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: void <init>()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubySymbol: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.reflect.Method: java.lang.String getName()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getServletName()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry: int hashCode()>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: java.lang.String getRedirectUrl()>-><org.springframework.security.web.util.UrlUtils: java.lang.String buildFullRequestUrl(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><ch.qos.logback.core.joran.spi.ElementSelector: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.convert.support.ObjectToOptionalConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: boolean isEmpty()>
<java.util.AbstractSet: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.util.collections.WeakHashSet: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.MBeanNotificationInfo: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.text.DigitList: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.jruby.RubyModule: boolean defineAnnotatedMethod(java.lang.String,java.util.List,org.jruby.runtime.MethodFactory)>-><io.undertow.util.HeaderValues: int size()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.Fixnum: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.util.ObjectUtils: java.lang.Object[] toObjectArray(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SingletonMap: java.util.Set entrySet()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.http.HttpEntity: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.AbstractServerHttpRequest: void <init>(java.net.URI,java.lang.String,org.springframework.http.HttpHeaders)>-><org.springframework.http.HttpHeaders: org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)>
<java.lang.Object: java.lang.String toString()>-><java.security.UnresolvedPermission: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><org.jruby.util.collections.WeakHashSet: int size()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$TransformedEntriesMap: void clear()>-><java.util.Collections$UnmodifiableMap: void clear()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.nulabinc.zxcvbn.matchers.SpatialMatcher: java.util.List spatialMatchHelper(java.lang.String,com.nulabinc.zxcvbn.matchers.Keyboard)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.io.FilePermission: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Date: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hibernate.engine.query.spi.NamedParameterDescriptor: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.AbstractMap$1: int size()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForEnumerationDescription: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.AbstractMap$1: int size()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.jruby.util.collections.WeakHashSet: void clear()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyNil: int hashCode()>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.util.Set keySet()>
<com.google.common.collect.Multimaps$Keys: int distinctElements()>-><com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.validation.BindException: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$TransformedEntriesMap$1: void <init>(com.google.common.collect.Maps$TransformedEntriesMap)>-><com.google.common.collect.Maps$EntrySet: void <init>()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.TabularType: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hibernate.boot.model.relational.Namespace$Name: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.String: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.ArrayDeque: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.security.web.header.Header: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.BigIntegerNode: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.AbstractCollection: void clear()>-><io.micrometer.shaded.org.pcollections.IntTreePMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Float: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Float: int hashCode()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer extractPathWithinApplication(org.springframework.http.server.PathContainer,org.springframework.http.server.PathContainer)>-><org.springframework.http.server.DefaultPathContainer: java.util.List elements()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.EnumMap$KeySet: int size()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: void attachTo(javax.servlet.http.HttpServletRequest)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$EmptyMap: int hashCode()>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.chrono.BasicChronology: int hashCode()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractBeanFactory: void copyRelevantMergedBeanDefinitionCaches(org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.core.ResolvableType: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.io.Closeable,java.lang.String,java.lang.Throwable)>-><com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$Values: int size()>-><java.util.Collections$UnmodifiableMap: int size()>
<com.google.common.collect.Maps$TransformedEntriesMap: int size()>-><java.util.Collections$UnmodifiableMap: int size()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.asm.MemberSubstitution$Replacement$ForElementMatchers$Factory: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.runtime.Arity: boolean equals(java.lang.Object)>
<com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.core.annotation.AnnotatedElementUtils: org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><org.springframework.core.annotation.AnnotatedElementUtils: org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes(org.springframework.core.annotation.MergedAnnotation,boolean,boolean)>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.ResourceBundle$CacheKey: int hashCode()>
<org.jruby.util.collections.WeakHashSet: boolean equals(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.slf4j.LoggerFactory: java.util.Set findPossibleStaticLoggerBinderPathSet()>-><java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<io.undertow.servlet.spec.SecurityActions$2: java.lang.Object run()>-><io.undertow.servlet.spec.SecurityActions$2: io.undertow.servlet.spec.HttpSessionImpl run()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.jwt.JWTVotesEndpoint: void <init>()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType getContentType()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson getVulnerableComponentsLesson()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: void <init>(javax.servlet.http.Cookie)>
<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>-><java.lang.Error: void <init>(java.lang.String)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.ClobDataID: int hashCode()>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>-><java.util.ArrayDeque: java.lang.Object[] toArray()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.StringBuilder: void <init>()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: void setString(int,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForTypeDescription: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>-><java.util.stream.MatchOps$MatchKind: boolean access$000(java.util.stream.MatchOps$MatchKind)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean isArrayType()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.webwolf_introduction.LandingAssignment: void <init>()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getKey()>
<java.util.LinkedHashMap$LinkedValues: void clear()>-><java.util.LinkedHashMap: void clear()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.jsoup.helper.ChangeNotifyingArrayList: void clear()>-><java.util.ArrayList: void clear()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.method.MethodDescription$AbstractBase: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.asm.Handle: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>
<javax.servlet.ServletRequestWrapper: boolean isAsyncStarted()>-><javax.servlet.ServletRequestWrapper: boolean isAsyncStarted()>
<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>-><java.util.AbstractCollection: boolean contains(java.lang.Object)>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.csrf.ForgedReviews getForgedReviews()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.web.servlet.handler.HandlerInterceptorAdapter: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.validation.BindException: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz getSqlInjectionQuiz()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfGenericArray: int hashCode()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.HashMap$KeySet: void clear()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: void clear()>
<org.jruby.ir.representations.CFG: org.jruby.dirgra.DirectedGraph build(org.jruby.ir.instructions.Instr[])>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><com.google.common.collect.Maps$Values: int size()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><org.springframework.core.annotation.RepeatableContainers: org.springframework.core.annotation.RepeatableContainers none()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.cert.Certificate: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.passes.CompilerPass: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><java.util.ArrayDeque: java.lang.Object[] toArray()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson5a: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.nulabinc.zxcvbn.matchers.Keyboard$Position: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.TimestampData: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><java.util.Arrays: java.lang.String toString(java.lang.Object[])>
<com.google.common.collect.AbstractMapEntry: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.tz.CachedDateTimeZone: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$SingletonSet: int size()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$1: java.lang.Object next()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.xss.stored.StoredXssComments: void <init>()>-><net.bytebuddy.description.type.TypeList$Generic$Empty: void <init>()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: java.lang.String getString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>-><java.text.SimpleDateFormat: java.lang.Object clone()>
<com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>-><java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<org.springframework.http.server.reactive.AbstractServerHttpResponse: void <init>(org.springframework.core.io.buffer.DataBufferFactory,org.springframework.http.HttpHeaders)>-><java.util.ArrayList: void <init>(int)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.Boolean: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.ArrayList: void <init>(java.util.Collection)>-><java.util.ArrayDeque: java.lang.Object[] toArray()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getValue()>
<java.time.format.DateTimeTextProvider$1: int compare(java.util.Map$Entry,java.util.Map$Entry)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin: void <init>(javax.sql.DataSource)>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.springframework.context.support.AbstractApplicationContext: boolean isSingleton(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.asm.MemberSubstitution: int hashCode()>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: java.lang.String toString()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Locale$LocaleKey: int hashCode()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1: java.lang.Object transform(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$1: com.google.common.collect.Multiset$Entry transform(java.util.Map$Entry)>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><ch.qos.logback.core.subst.Token: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyObject: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractSequentialList: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.List resolveManagedList(java.lang.Object,java.util.List)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><ch.qos.logback.core.status.StatusBase: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.BinaryNode: int hashCode()>
<org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<io.undertow.util.HeaderValues: java.lang.String removeFirst()>-><java.util.NoSuchElementException: void <init>()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: void <init>()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: int size()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.String toString()>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.annotation.MergedAnnotation from(java.lang.Object,java.lang.annotation.Annotation)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.jruby.javasupport.JavaArray: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.HashSet: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Long: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint: java.lang.String decode(java.lang.String)>-><java.lang.String: int lastIndexOf(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.util.RecursiveComparator$Pair: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.HashMap$KeySet: void clear()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serialize(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.html_tampering.HtmlTamperingTask: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: java.lang.String getString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.ZoneId: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForDescriptionArray: int hashCode()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.field.PreciseDurationField: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.Symbol: boolean equals(java.lang.Object)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.ArrayList$SubList: int size()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Double: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.BinaryData: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.convert.TypeDescriptor: int hashCode()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.TreeMap$Entry: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.headius.invokebinder.Signature: boolean equals(java.lang.Object)>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><com.thoughtworks.xstream.io.path.Path: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$EmptyList: int hashCode()>
<com.google.common.collect.Maps: com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function)>-><com.google.common.collect.Maps$7: void <init>(com.google.common.base.Function)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.reflect.Constructor: int hashCode()>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><org.springframework.http.server.reactive.ReactorServerHttpRequest: void <init>(reactor.netty.http.server.HttpServerRequest,org.springframework.core.io.buffer.NettyDataBufferFactory)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><com.google.common.collect.Maps$EntrySet: void clear()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.util.Assert: void state(boolean,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><jnr.constants.ConstantSet$ConstantIterator: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.math.BigDecimal: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.WeakHashMap$KeySet: int size()>
<java.lang.Object: java.lang.String toString()>-><java.nio.ByteBuffer: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.users.RegistrationController: void <init>(org.owasp.webgoat.users.UserValidator,org.owasp.webgoat.users.UserService,org.springframework.security.authentication.AuthenticationManager)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: int size()>
<org.owasp.webwolf.FileServer: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$AbstractBase: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.IRScope: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.Expression: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>-><org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI resolveBaseUrl(reactor.netty.http.server.HttpServerRequest)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.util.DerValue: int hashCode()>
<sun.security.ssl.SecureKey: int hashCode()>-><java.lang.Object: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Hashtable$ValueCollection: void clear()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateEntry(io.undertow.util.HttpString)>-><io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateEntry(io.undertow.util.HttpString)>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.validation.AbstractBindingResult: int getErrorCount()>-><java.util.LinkedList: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.field.MillisDurationField: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
<java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.TreeMap$KeySet: int size()>
<org.jruby.RubyModule$MethodClumper: void clump(java.lang.Class)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque: boolean isEmpty()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.ArrayDeque: boolean add(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.AbstractCollection: void clear()>-><io.micrometer.shaded.org.pcollections.IntTree$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Double: int hashCode()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><org.xnio.OptionMap: boolean get(org.xnio.Option,boolean)>
<io.undertow.util.HeaderValues: java.lang.String removeLast()>-><io.undertow.util.HeaderValues: java.lang.String pollLast()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: java.lang.String getString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.WeakHashMap$EntrySet: int size()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.jruby.RubyArray: void clear()>-><org.jruby.specialized.RubyArrayOneObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>
<com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: java.lang.String getString()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getValue()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.io.ClassPathResource: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.springframework.http.server.DefaultRequestPath: void validateContextPath(java.lang.String,java.lang.String)>-><java.lang.String: char charAt(int)>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleValue(java.lang.StringBuilder,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.IntervalMonthData: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.field.UnsupportedDurationField: int hashCode()>
<org.springframework.web.context.request.ServletRequestAttributes: java.lang.Object getAttribute(java.lang.String,int)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.util.RecursiveComparator$Pair: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.io.ObjectStreamClass$FieldReflectorKey: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.IdentityHashMap$Values: void clear()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,org.springframework.core.ResolvableType)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<java.util.IdentityHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.util.Set entrySet()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.logging.Level: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.time.MonthDay: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.UnboxedBoolean: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.util.collections.WeakHashSet: boolean equals(java.lang.Object)>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByName(java.lang.String)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.ResourceBundle$CacheKey: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.net.URI: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: java.util.ArrayDeque$DeqSpliterator trySplit()>-><java.util.ArrayDeque$DeqSpliterator: void <init>(java.util.ArrayDeque,int,int)>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.cglib.core.EmitUtils: void member_helper_type(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.cglib.core.EmitUtils$ParameterTyper,org.springframework.asm.Label,org.springframework.asm.Label,java.util.BitSet)>-><io.undertow.util.HeaderValues: int size()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.RubyArray: int size()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.Spliterators$1Adapter: void accept(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.persist.CachedObjectBase: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Arrays$ArrayList: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.awt.Font: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI resolveBaseUrl(reactor.netty.http.server.HttpServerRequest)>-><java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyObject: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.Symbol: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.BeanMetadataAttribute: int hashCode()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.math.BigInteger: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void <init>(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection: int hashCode()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.jruby.javasupport.binding.ClassInitializer: void setupClassMethods(java.lang.Class,org.jruby.javasupport.binding.Initializer$State)>-><io.undertow.util.HeaderValues: int size()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void <init>(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.ObjectCodec getCodec()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.Maps$Values: java.util.Iterator iterator()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.jwt.JWTSecretKeyEndpoint getJWTSecretKeyEndpoint()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.ProcessEnvironment$StringEntrySet: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.lang.ProcessEnvironment$StringKeySet: void clear()>-><java.util.HashMap$KeySet: void clear()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.stream.ForEachOps$ForEachOrderedTask: void <init>(java.util.stream.PipelineHelper,java.util.Spliterator,java.util.stream.Sink)>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: int hashCode()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<sun.security.ssl.SessionId: boolean equals(java.lang.Object)>-><sun.security.ssl.SessionId: byte[] getId()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.ssrf.SSRFTask1: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<java.util.AbstractSet: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUpload: org.springframework.http.ResponseEntity getProfilePicture()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.font.AttributeValues: int hashCode()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.JumboEnumSet: void clear()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.IntervalMonthData: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.Clock$SystemClock: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<org.springframework.http.server.reactive.AbstractServerHttpResponse: void <init>(org.springframework.core.io.buffer.DataBufferFactory,org.springframework.http.HttpHeaders)>-><java.lang.Object: java.lang.Class getClass()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.RubyArray: boolean isEmpty()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.ClobDataID: boolean equals(java.lang.Object)>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.method.ParameterDescription$AbstractBase: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLSessionImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.Collections$UnmodifiableSortedSet: java.util.Comparator comparator()>-><java.util.TreeSet: java.util.Comparator comparator()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.SubList$1: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.net.URI: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$CollectionView: void clear()>-><java.util.concurrent.ConcurrentHashMap: void clear()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.TreeMap: boolean containsKey(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.flywaydb.core.internal.resolver.ResolvedMigrationImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hibernate.engine.query.spi.QueryPlanCache$HQLQueryPlanKey: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: java.lang.String getString()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTFinalEndpoint: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>-><java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer subPath(int,int)>-><org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<io.undertow.server.handlers.cache.LRUCache: void bumpAccess(io.undertow.server.handlers.cache.LRUCache$CacheEntry)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: boolean setToken(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.RowType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.InjectionPoint: org.springframework.core.MethodParameter getMethodParameter()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.lessons.Hint: int hashCode()>-><java.lang.String: int hashCode()>
<io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getValue()>-><javax.servlet.http.Cookie: java.lang.String getValue()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Vector: void clear()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>-><java.lang.String: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$1: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.List)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: java.lang.Object getTarget()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.users.RegistrationController getRegistrationController()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Maps$EntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.http.server.DefaultRequestPath: void validateContextPath(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.Type: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.Fixnum: int hashCode()>
<org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForAnnotationDescription: boolean equals(java.lang.Object)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.security.ssl.SSLSessionContextImpl$1: java.lang.Object run()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.util.collections.WeakHashSet: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<io.undertow.util.HeaderValues: java.lang.String remove(int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleIdentityHashCode(java.lang.StringBuilder,java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForDescriptionArray: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.owasp.webgoat.webwolf_introduction.Email: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Map map()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.field.ScaledDurationField: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView start(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.controller.StartLesson: org.springframework.web.servlet.ModelAndView start()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.Maps: java.util.Map transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps: java.util.SortedMap transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap$LinkedKeySet: void clear()>-><java.util.LinkedHashMap: void clear()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object get(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.util.List get(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.NullNode: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<java.util.LinkedHashSet: void <init>(java.util.Collection)>-><java.util.Collections$EmptySet: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.IntervalSecondData: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.util.collections.WeakHashSet: int size()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.TreeMap$KeySet: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.util.ObjectIdentifier: int hashCode()>
<java.util.Comparators$NaturalOrderComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.Duration: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.TreeMap$Values: void clear()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: int size()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.security.Permissions: java.security.PermissionCollection getUnresolvedPermissions(java.security.Permission)>-><io.undertow.util.HeaderValues: int size()>
<io.undertow.util.HeaderValues: void addLast(java.lang.String)>-><java.lang.IllegalStateException: void <init>()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.core.io.Resource getResourceByPath(java.lang.String)>-><org.springframework.web.context.support.GenericWebApplicationContext: javax.servlet.ServletContext getServletContext()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.PatternEntry: boolean equals(java.lang.Object)>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint: java.lang.String decode(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.text.AttributeEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: java.sql.ResultSetMetaData getMetaData()>
<org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int getKeyHash()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class getDependencyType()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.EnumMap$EntrySet: void clear()>
<java.util.HashMap$Node: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.field.ScaledDurationField: int hashCode()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.BuddhistCalendar: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: void <init>(javax.sql.DataSource)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.FindOps$FindSink: void accept(java.lang.Object)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$AbstractBase: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<org.springframework.http.server.reactive.AbstractServerHttpRequest: void <init>(java.net.URI,java.lang.String,org.springframework.http.HttpHeaders)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.jruby.RubyArray: void clear()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: int size()>-><java.util.ArrayDeque: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.google.common.collect.Multimaps$Keys$1$1: int getCount()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.TabularType: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyMatchData: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.sql.DriverInfo: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.Period: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.springframework.core.Conventions: java.lang.Class getClassForValue(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.jruby.javasupport.JavaArray: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: java.lang.String toLowerCase()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.AbstractSet: boolean equals(java.lang.Object)>-><java.util.ArrayDeque: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isConcrete()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$Values: java.util.Iterator iterator()>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: int getRow()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$SingletonList: int size()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.expression.TypedValue: int hashCode()>
<java.util.stream.AbstractTask: void compute()>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.StringCharacterIterator: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: java.lang.String getString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.security.ssl.SecureKey: int hashCode()>-><java.security.AccessControlContext: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.time.LocalDate: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.IntervalMonthData: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<org.springframework.validation.BindException: java.lang.String getMessage()>-><org.springframework.validation.AbstractErrors: java.lang.String toString()>
<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.TemporaryVariable: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.LandingAssignment: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Multisets$EntrySet: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.thoughtworks.xstream.core.util.FastField: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: java.lang.String getString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: void clear()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.factory.support.NullBean: int hashCode()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.jruby.util.io.SelectorPool: java.nio.channels.Selector retrieveFromPool(java.nio.channels.spi.SelectorProvider)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<java.security.Provider: void implPutAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hibernate.engine.query.spi.sql.NativeSQLQuerySpecification: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI resolveBaseUrl(reactor.netty.http.server.HttpServerRequest)>-><java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.Class: java.net.URL getResource(java.lang.String)>-><java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: void copyFiles(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.Salaries: void copyFiles()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.HsqlNameManager$HsqlName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.lang.Object: java.lang.String toString()>-><org.hibernate.boot.model.relational.Namespace: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><ch.qos.logback.core.joran.spi.ElementSelector: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.interpreter.Profiler$IRCallSite: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<io.undertow.util.HeaderValues: java.lang.String get(int)>-><io.undertow.util.HeaderValues: int index(int)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.Collections$UnmodifiableSortedSet: java.util.Comparator comparator()>-><java.util.TreeMap$KeySet: java.util.Comparator comparator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><ch.qos.logback.classic.spi.ClassPackagingData: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.reflect.Method: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.chrono.BasicChronology: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge7.Assignment7: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.spec.HttpServletResponseImpl$DuplicateCookieCommitListener: void <init>(io.undertow.servlet.spec.HttpServletResponseImpl,io.undertow.servlet.spec.HttpServletResponseImpl$1)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORDiffAttributes: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.net.URL: int hashCode()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: void <init>()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.security.core.context.SecurityContextImpl: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.ProcessEnvironment$ExternalData: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.SubList: int size()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.InjectionPoint: org.springframework.core.MethodParameter getMethodParameter()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.validation.ObjectError: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<sun.text.normalizer.IntTrie: int getSurrogateOffset(char,char)>-><sun.net.idn.StringPrep$StringPrepTrieImpl: int getFoldingOffset(int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyArray: java.lang.RuntimeException concurrentModification(org.jruby.Ruby,java.lang.Exception)>
<org.owasp.webgoat.lessons.Hint: java.lang.String toString()>-><org.owasp.webgoat.lessons.Hint: java.lang.String getHint()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Character: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: java.lang.String[] toArray()>-><java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: int hashCode()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.AbstractMap$SimpleEntry: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><org.springframework.core.log.CompositeLog: boolean isDebugEnabled()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.HashSet: int size()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.insecure_login.InsecureLoginTask getInsecureLoginTask()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<io.undertow.util.HeaderValues: void addLast(java.lang.String)>-><io.undertow.util.HeaderValues: boolean offerLast(java.lang.String)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotatedElementUtils: org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.annotation.MergedAnnotation get(java.lang.Class,java.util.function.Predicate,org.springframework.core.annotation.MergedAnnotationSelector)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.annotation.MergedAnnotation withNonMergedAttributes()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson6a: void <init>()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.RubyHash$BaseCollection: java.util.Iterator iterator()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$1: byte[] resolveSigningKeyBytes(io.jsonwebtoken.JwsHeader,io.jsonwebtoken.Claims)>-><org.hsqldb.jdbc.JDBCResultSet: java.lang.String getString(int)>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.controller.StartLesson: void <init>(org.owasp.webgoat.session.WebSession,org.owasp.webgoat.session.Course)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.Collections$EmptySet: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.chrono.ISOChronology: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyBasicObject: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.TreeMap: void <init>()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForConstant: int hashCode()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.jruby.RubyArray$RubyArrayConversionIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.TreeSet: void clear()>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.TreeMap$EntrySet: int size()>
<org.springframework.aop.framework.CglibAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>-><java.lang.Class: java.lang.Class[] getInterfaces()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><com.google.common.collect.Maps$7: java.lang.Object transformEntry(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.reflect.Method[] getMethods()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><javax.security.auth.Subject$SecureSet: void clear()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.org.objectweb.asm.Type: boolean equals(java.lang.Object)>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForTypeDescription: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.BlobDataID: int hashCode()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.security.Provider$UString: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><javax.management.ObjectName: int hashCode()>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: void appendFields(org.springframework.core.style.ToStringCreator)>
<org.owasp.webgoat.idor.IDORLogin: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>-><java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.calendar.CalendarDate: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.client_side_filtering.ShopEndpoint: void <init>()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><com.google.common.collect.Maps$Values: java.util.Iterator iterator()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setStatusCode(int)>-><org.xnio.Bits: boolean allAreSet(int,int)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.asm.AsmVisitorWrapper$ForDeclaredMethods$Entry: int hashCode()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.xss.stored.StoredXssComments: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.net.InetSocketAddress: int hashCode()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.MonthDay: int hashCode()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.time.ZonedDateTime: int hashCode()>
<io.undertow.servlet.spec.ServletPrintWriterDelegate$1: java.lang.Object run()>-><io.undertow.servlet.spec.ServletPrintWriterDelegate$1: io.undertow.servlet.spec.ServletPrintWriterDelegate run()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.EnumMap$KeySet: int size()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: void setString(int,java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.TreeMap$Values: void clear()>-><java.util.TreeMap: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><jnr.constants.ConstantSet$ConstantIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyFixnum: int hashCode()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.AbstractServerHttpRequest: void <init>(java.net.URI,java.lang.String,org.springframework.http.HttpHeaders)>-><org.springframework.http.server.RequestPath: org.springframework.http.server.RequestPath parse(java.net.URI,java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><java.lang.Class: java.lang.String getName()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.SimpleTimeZone: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.JumboEnumSet: boolean isEmpty()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.util.collections.WeakHashSet: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.Collections$SetFromMap: void <init>(java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean isEmpty()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.ArrayList: void <init>(java.util.Collection)>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.hibernate.internal.util.compare.ComparableComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.temporal.WeekFields: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps$Values: int size()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Hashtable$EntrySet: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.password_reset.PasswordResetEmail: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: int size()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.ansi.Ansi8BitColor: int hashCode()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.google.common.collect.Maps$EntrySet: void clear()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Map map()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.chrono.AbstractChronology: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.x509.RDN: int hashCode()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateEntry(io.undertow.util.HttpString)>-><io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateNonEmpty(io.undertow.util.HttpString,java.lang.Object[],int,int,java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.StackTraceElement: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.util.ByteList: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfGenericArray: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.jsontype.TypeDeserializer findTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.LocalTime: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution$Replacement$Factory$Compound: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.BinaryData: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.RegexRequestMatcher: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.LocalDate: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.AbstractCollection: java.lang.String toString()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.lang.String: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.HashMap$KeySet: void clear()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.TreeMap$Values: void clear()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderMap put(io.undertow.util.HttpString,java.lang.String)>-><io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateEntry(io.undertow.util.HttpString)>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.io.ByteArrayResource: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<org.springframework.core.style.ToStringCreator: java.lang.String toString()>-><org.springframework.core.style.DefaultToStringStyler: void styleEnd(java.lang.StringBuilder,java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<synthetic.method.SingletonFactory: void <clinit>()>-><org.owasp.webgoat.assignments.LessonTrackerInterceptor: void <init>(org.owasp.webgoat.users.UserTrackerRepository,org.owasp.webgoat.session.WebSession)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.WeakHashMap$Values: int size()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><org.springframework.http.server.reactive.ReactorServerHttpResponse: void <init>(reactor.netty.http.server.HttpServerResponse,org.springframework.core.io.buffer.DataBufferFactory)>
<org.jruby.javasupport.JavaClass: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.HsqlException: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.WeakHashMap$Values: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<com.nulabinc.zxcvbn.matchers.SpatialMatcher: java.util.List spatialMatchHelper(java.lang.String,com.nulabinc.zxcvbn.matchers.Keyboard)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableCollection: int size()>-><io.undertow.util.HeaderValues: int size()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.boot.ansi.Ansi8BitColor: int hashCode()>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.time.format.DateTimeFormatterBuilder$PrefixTree getTree(java.time.format.DateTimeParseContext)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.aop.support.AbstractPointcutAdvisor: int hashCode()>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: void <init>()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.jruby.RubyHash: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.challenges.challenge1.Assignment1: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><org.jruby.RubyEnumerator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: void clear()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hibernate.engine.query.spi.QueryPlanCache$DynamicFilterKey: int hashCode()>
<org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.beans.factory.config.BeanDefinitionHolder: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><ch.qos.logback.core.subst.Node: int hashCode()>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.util.MimeType: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.field.MillisDurationField: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.AbstractList: void clear()>-><java.util.Collections$EmptyList: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.jca.ProviderConfig: int hashCode()>
<sun.security.ssl.JsseJce$1: java.lang.Void run()>-><java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><org.jruby.RubyArray: int size()>
<java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>-><io.undertow.util.HeaderValues: java.util.List subList(int,int)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: java.lang.String getString()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.password_reset.ResetLinkAssignment: void <init>()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isJavaLangObject()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap: java.util.Set entrySet()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: int hashCode()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><io.undertow.util.CopyOnWriteMap: java.util.Set entrySet()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.IdentityHashMap$Values: int size()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.util.collections.WeakHashSet: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.JavaObjectData: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><javax.management.MBeanOperationInfo: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.lang.Object: java.lang.String toString()>-><java.util.SimpleTimeZone: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.io.File: int hashCode()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateEntry(io.undertow.util.HttpString)>-><io.undertow.util.HeaderMap: void resize()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Maps$TransformedEntriesMap: boolean containsKey(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.util.TreeMap$Entry: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Vector: boolean isEmpty()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationDescription$AbstractBase: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><java.lang.reflect.Method: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Vector: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.LinkedList: int size()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.io.path.Path: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: void clear()>-><jnr.constants.ConstantSet: java.util.Iterator iterator()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyString: int hashCode()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.users.RegistrationController: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest)>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.TreeMap$EntrySet: void clear()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.Maps: java.util.Map transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps$TransformedEntriesMap: void <init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hibernate.engine.query.spi.sql.NativeSQLQuerySpecification: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.springframework.web.util.HierarchicalUriComponents: java.lang.String encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)>-><org.springframework.web.util.HierarchicalUriComponents$Type$9: boolean isAllowed(int)>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.LinkedHashMap$LinkedValues: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayDeque: boolean isEmpty()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque: java.lang.Object[] toArray()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.TabularType: int hashCode()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.WeakHashMap$Values: void clear()>-><java.util.WeakHashMap: void clear()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.zone.ZoneOffsetTransition: int hashCode()>
<com.google.common.collect.Maps$Values: int size()>-><com.google.common.collect.Maps$TransformedEntriesMap: int size()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<io.undertow.util.HeaderValues: boolean removeFirstOccurrence(java.lang.Object)>-><io.undertow.util.HeaderValues: java.lang.String remove(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.owasp.webgoat.webwolf_introduction.Email: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.javasupport.JavaClass: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.flywaydb.core.internal.util.Pair: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><io.jsonwebtoken.impl.JwtMap: java.util.Set entrySet()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.BinaryData: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.LocalDateTime: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.ArrayList: int size()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput getProfileUploadRemoveUserInput()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.javasupport.JavaObject: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyThread: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.factory.support.AbstractBeanDefinition: int hashCode()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String getAssignmentPath()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$AbstractBase: int hashCode()>
<org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: int size()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Map map()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.IRScope: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Double: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Multimaps: java.util.Collection access$000(java.util.Collection)>-><com.google.common.collect.Multimaps: java.util.Collection unmodifiableValueCollection(java.util.Collection)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><io.undertow.servlet.spec.SecurityActions$2: java.lang.Object run()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.cglib.core.ClassInfo: int hashCode()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.owasp.webgoat.webwolf_introduction.Email: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.DurationFieldType$StandardDurationFieldType: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.LocalDate: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.asm.MemberSubstitution$Replacement$Factory$Compound: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.lang.String getScheme(reactor.netty.http.server.HttpServerRequest)>-><reactor.netty.http.server.HttpServerRequest: java.lang.String scheme()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.ArrayDeque: void clear()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.deserialization.InsecureDeserializationTask getInsecureDeserializationTask()>
<com.google.common.collect.Multimaps$UnmodifiableMultimap$1: void <init>(com.google.common.collect.Multimaps$UnmodifiableMultimap)>-><java.lang.Object: void <init>()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildFullRequestUrl(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: int hashCode()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyFloat: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: java.sql.ResultSetMetaData getMetaData()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void commit()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.AttributedCharacterIterator$Attribute: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.base.AbstractPartial: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.aop.support.AbstractPointcutAdvisor: int hashCode()>
<java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: boolean remove(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><org.springframework.core.log.CompositeLog: void debug(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys: java.util.Iterator entryIterator()>-><com.google.common.collect.Multimaps$Keys$1: void <init>(com.google.common.collect.Multimaps$Keys,java.util.Iterator)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.io.File: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.FrozenString: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: void <init>()>-><com.google.common.collect.Sets$ImprovedAbstractSet: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.factory.config.BeanDefinitionHolder: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.validation.FieldError: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$1: byte[] resolveSigningKeyBytes(io.jsonwebtoken.JwsHeader,io.jsonwebtoken.Claims)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: boolean isEmpty()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.deserialization.InsecureDeserializationTask: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.core.util.FastField: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AuthenticationTrustResolverImpl: boolean isAnonymous(org.springframework.security.core.Authentication)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.template.SampleAttack: java.util.List getItemsInBasket(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.javasupport.JavaArray: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Enum: int hashCode()>
<java.util.SubList: void removeRange(int,int)>-><java.util.AbstractList: void removeRange(int,int)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.flywaydb.core.internal.database.base.Schema: int hashCode()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.nulabinc.zxcvbn.matchers.Keyboard$Position: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.field.UnsupportedDurationField: int hashCode()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.String: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<io.undertow.servlet.api.ServletInfo: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.FrozenString: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.base.AbstractInstant: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.challenges.challenge8.Assignment8: void <init>()>-><com.fasterxml.jackson.core.util.InternCache: void <init>()>
<org.jruby.util.JRubyClassLoader: void terminateJarIndexCacheEntries()>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.ArrayDeque: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.ProcessEnvironment$ExternalData: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.invoke.MethodType: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.net.SocketPermission: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.PropertyValue: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues$1: void <init>(io.undertow.util.HeaderValues,int,boolean)>-><java.lang.Object: void <init>()>
<org.jruby.specialized.RubyArrayTwoObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyBasicObject: org.jruby.Ruby getRuntime()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.ssl.SSLSessionImpl: java.lang.String getCipherSuite()>-><sun.security.ssl.SSLSessionImpl: sun.security.ssl.CipherSuite getSuite()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.lang.Object: java.lang.String toString()>-><sun.util.locale.BaseLocale: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.util.IdentityHashMap$KeySet: void clear()>-><java.util.IdentityHashMap: void clear()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues removeEntry(io.undertow.util.HttpString)>-><io.undertow.util.HttpString: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: java.lang.String getString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.aop.framework.CglibAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>-><java.lang.Class: java.lang.Class getSuperclass()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringEntrySet: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.dom4j.tree.BackedList: void clear()>-><java.util.ArrayList: void clear()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.awt.Color: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.org.objectweb.asm.Type: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.NettyHeadersAdapter: void set(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: void set(java.lang.String,java.lang.String)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.xss.CrossSiteScriptingQuiz getCrossSiteScriptingQuiz()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object get(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.jruby.specialized.RubyArrayTwoObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.Ruby: org.jruby.runtime.builtin.IRubyObject getNil()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$Values: boolean isEmpty()>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyBasicObject: org.jruby.Ruby getRuntime()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><java.lang.Package: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.springframework.expression.spel.support.StandardTypeComparator: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.AbstractList: void clear()>-><org.jruby.runtime.ObjectSpace$ObjectGroup: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.slf4j.helpers.SubstituteLogger: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.asm.MemberSubstitution$Replacement$Factory$Compound: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.thoughtworks.xstream.core.util.FastField: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.invoke.LambdaForm$Name: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.springframework.boot.convert.CollectionToDelimitedStringConverter: java.lang.Object convert(java.util.Collection,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void <init>(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableCollection: boolean isEmpty()>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.password_reset.SimpleMailAssignment: void <init>(org.springframework.web.client.RestTemplate,java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: java.lang.String getString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.undertow.util.HeaderValues: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$EmptySet: int size()>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: org.springframework.security.core.Authentication getAuthentication()>-><org.springframework.security.authentication.AuthenticationTrustResolverImpl: boolean isAnonymous(org.springframework.security.core.Authentication)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getValue()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.env.PropertySource: int hashCode()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.challenges.challenge5.Assignment5 getAssignment5()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: void <init>()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.xss.CrossSiteScriptingLesson5a getCrossSiteScriptingLesson5a()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: int size()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.WeakHashMap$KeySet: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateNonEmpty(io.undertow.util.HttpString,java.lang.Object[],int,int,java.lang.Object)>-><io.undertow.util.HeaderMap: void resize()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.util.Map$Entry next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: boolean isEmpty()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.jruby.javasupport.JavaArray: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.io.File: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.TextNode: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.PatternEntry: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.jruby.util.JRubyClassLoader: void terminateJarIndexCacheEntries()>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.util.GregorianCalendar: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.SubList: int size()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.MessageFormat: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.jruby.RubyHash$BaseCollection: void clear()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.ssrf.SSRFTask2: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.springframework.security.web.util.matcher.RegexRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SynchronizedMap: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><jnr.constants.ConstantSet$ConstantIterator: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$SynchronizedSet: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.base.AbstractDuration: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.lang.ThreadLocal: java.lang.Object setInitialValue()>-><io.undertow.servlet.core.ApplicationListeners$1: java.lang.Object initialValue()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<io.undertow.server.HttpServerExchange: java.util.Map getResponseCookies()>-><java.util.TreeMap: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.jruby.javasupport.JavaClass: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.sql.DriverInfo: int hashCode()>
<com.google.common.collect.Maps: java.util.SortedMap transformEntriesIgnoreNavigable(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps$TransformedEntriesSortedMap: void <init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge getSqlInjectionChallenge()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint: void login(java.lang.String,javax.servlet.http.HttpServletResponse)>-><io.undertow.servlet.spec.HttpServletResponseImpl: void setStatus(int)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.jwt.JWTFinalEndpoint getJWTFinalEndpoint()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.TimeData: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>-><java.lang.NullPointerException: void <init>()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.Collections$UnmodifiableCollection: int size()>-><java.util.ArrayDeque: int size()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><io.undertow.servlet.spec.ContentTypeInfo: java.lang.String getCharset()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyFixnum: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.springframework.validation.BindException: java.lang.String getMessage()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.OffsetTime: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.util.MimeType: int hashCode()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge5.Assignment5: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.factory.config.BeanExpressionContext: int hashCode()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.crypto.EncodingAssignment getEncodingAssignment()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.reflect.Proxy$Key1: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Vector$Itr: boolean hasNext()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: sun.security.ssl.SessionId getSessionId()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.flywaydb.core.internal.info.MigrationInfoImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.Provider$ServiceKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hibernate.engine.query.spi.NamedParameterDescriptor: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><sun.security.provider.PolicyFile$SelfPermission: int hashCode()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.undertow.util.CopyOnWriteMap: int size()>-><java.util.HashMap: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForAnnotationDescription: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge8.Assignment8: org.springframework.http.ResponseEntity getVotes()>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><java.net.IDN$1: java.lang.Object run()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<javax.servlet.ServletException: void <init>(java.lang.String,java.lang.Throwable)>-><java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.Object: java.lang.String toString()>-><org.hsqldb.HsqlException: int hashCode()>
<org.jruby.ir.representations.IGVCFGVisitor: void visitEdges(org.jruby.ir.representations.CFG)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.jruby.ir.representations.CFG: org.jruby.dirgra.DirectedGraph build(org.jruby.ir.instructions.Instr[])>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.locale.BaseLocale$Key: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.web.header.Header: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.flywaydb.core.api.Location: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult flag(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.csrf.CSRFFeedback: org.owasp.webgoat.assignments.AttackResult flag(java.lang.String)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.EnumMap$Values: void clear()>-><java.util.EnumMap: void clear()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.io.ByteArrayResource: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubySymbol: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.Row: int hashCode()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.html_tampering.HtmlTamperingTask getHtmlTamperingTask()>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><com.google.common.collect.Multisets$EntrySet: void clear()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.jruby.util.JRubyClassLoader: void terminateJarIndexCacheEntries()>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.UnboxedBoolean: int hashCode()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.time.format.DateTimeTextProvider$1: int compare(java.util.Map$Entry,java.util.Map$Entry)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set findTimedAnnotations(java.lang.reflect.AnnotatedElement)>-><java.util.stream.ReferencePipeline: java.lang.Object collect(java.util.stream.Collector)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.Proxy$Key1: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection: boolean equals(java.lang.Object)>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>-><java.lang.StringBuilder: void <init>(int)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.Instant: int hashCode()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<java.lang.Object: java.lang.String toString()>-><java.lang.reflect.Parameter: int hashCode()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: void <init>(javax.sql.DataSource)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.MBeanOperationInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.EnumMap$EntrySet: int size()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: int size()>
<sun.security.ssl.SSLSessionImpl: java.lang.String toString()>-><sun.security.ssl.SSLSessionImpl: java.lang.String getCipherSuite()>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<io.undertow.util.Rfc6265CookieSupport: void validateDomain(java.lang.String)>-><java.util.BitSet: boolean get(int)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Date: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.CurrentScope: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildFullRequestUrl(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Hashtable$Entry: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.beans.factory.support.AbstractBeanDefinition: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: io.undertow.server.handlers.Cookie setVersion(int)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.io.support.EncodedResource: int hashCode()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType getReferencedType()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashSet: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String)>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.StreamSpliterators$DistinctSpliterator: void accept(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$Builder: void _addPropertyIndex(java.lang.String,java.lang.Integer)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyHash$ConvertingEntry: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><jnr.constants.ConstantSet$ConstantIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8 getSqlInjectionLesson8()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Optional: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.jruby.RubyHash$BaseIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.asm.Type: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$EntrySet: void clear()>-><java.util.IdentityHashMap: void clear()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult stealTheCheese(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.ssrf.SSRFTask1: org.owasp.webgoat.assignments.AttackResult stealTheCheese(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.BinaryNode: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><sun.security.x509.Extension: int hashCode()>
<com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.math.BigDecimal: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.AbstractList: java.util.ListIterator listIterator(int)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: void clear()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: java.lang.String getString()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.context.support.ApplicationListenerDetector: int hashCode()>
<org.owasp.webgoat.assignments.LessonTrackerInterceptor: void <init>(org.owasp.webgoat.users.UserTrackerRepository,org.owasp.webgoat.session.WebSession)>-><java.lang.Object: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Comparators$NaturalOrderComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<com.google.common.collect.Multisets$EntrySet: void clear()>-><com.google.common.collect.Multimaps$Keys: void clear()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.RegularEnumSet: int size()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a getSqlInjectionLesson6a()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableMap: java.util.Collection values()>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Collection values()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.io.InputStreamResource: int hashCode()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.flywaydb.core.internal.info.MigrationInfoImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.webwolf_introduction.Email: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><org.springframework.security.authentication.AbstractAuthenticationToken: boolean isAuthenticated()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.idor.IDORDiffAttributes: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyString: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: java.lang.String getString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.HashMap$EntrySet: void clear()>
<java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>-><java.util.stream.MatchOps$MatchKind: boolean access$100(java.util.stream.MatchOps$MatchKind)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.tz.FixedDateTimeZone: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfTypeVariable: int hashCode()>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.jar.Manifest: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.FrozenString: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.RubyArray: boolean isEmpty()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<java.util.Hashtable$EntrySet: void clear()>-><java.security.Provider: void clear()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword: void <init>(org.springframework.web.client.RestTemplate,java.lang.String)>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><io.micrometer.core.instrument.Tags$ArrayIterator: java.lang.Object next()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<io.undertow.util.HeaderValues: java.lang.String remove(int)>-><java.lang.AssertionError: void <init>()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.lang.Object: java.lang.String toString()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.time.Duration: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext$ServerManager: reactor.core.publisher.Mono handle(org.springframework.http.server.reactive.ServerHttpRequest,org.springframework.http.server.reactive.ServerHttpResponse)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.util.RecursiveComparator$Pair: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><org.springframework.http.server.DefaultPathContainer: java.util.List elements()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$UnmodifiableSet: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.ArrayType: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.validation.BindException: java.lang.Object getTarget()>-><org.springframework.validation.BeanPropertyBindingResult: java.lang.Object getTarget()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.AbstractList$Itr: java.lang.Object next()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object extractValue(org.springframework.core.annotation.AnnotationAttributes)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.javasupport.JavaClass: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.TimeData: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.Object: java.lang.String toString()>-><java.awt.Font: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.web.header.Header: int hashCode()>
<org.springframework.http.server.DefaultRequestPath: void validateContextPath(java.lang.String,java.lang.String)>-><java.lang.String: int length()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.WeakCache$CacheKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String)>
<java.util.Collections$SynchronizedSortedMap: java.util.Comparator comparator()>-><java.util.TreeMap: java.util.Comparator comparator()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.validation.BindException: int hashCode()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: java.lang.String getString()>
<io.undertow.servlet.api.ServletInfo: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.jar.Attributes: boolean isEmpty()>
<java.util.AbstractMap$1: void clear()>-><java.util.AbstractMap: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.security.Provider: java.util.Set entrySet()>
<org.springframework.core.style.DefaultToStringStyler: void styleIdentityHashCode(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.util.ObjectUtils: java.lang.String getIdentityHexString(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation: void <init>()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.javasupport.JavaConstructor: int hashCode()>
<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: void set(java.lang.Object,java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.LinkedList$ListItr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap: java.util.Set entrySet()>
<java.util.Collections$EmptySet: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<java.lang.Object: java.lang.String toString()>-><java.lang.Character$Subset: int hashCode()>
<io.undertow.util.HeaderValues: java.lang.String remove(int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.chrono.BuddhistChronology: int hashCode()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)>-><java.lang.String: java.lang.String substring(int)>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildFullRequestUrl(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>
<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: java.lang.String getFileLocation(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.FileServer: java.lang.String getFileLocation()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getKey()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.String getKey()>
<io.undertow.util.HeaderValues$1: java.lang.String next()>-><java.util.NoSuchElementException: void <init>()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: void close()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Double: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter)>-><java.lang.Object: void <init>()>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.misc.Signal: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationDescription$AbstractBase: boolean equals(java.lang.Object)>
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>-><java.security.Provider$ServiceKey: boolean matches(java.lang.String,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.springframework.http.HttpHeaders: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: void putAll(java.util.Map)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.calendar.Era: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.ObjectName: int hashCode()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.font.AttributeValues: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.BooleanNode: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.ProtectionDomain$WeakProtectionDomainKey: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.javasupport.JavaConstructor: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.TreeMap$KeySet: void clear()>
<org.springframework.cglib.core.EmitUtils$4: void processCase(int,org.springframework.asm.Label)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.AbstractCollection: void clear()>-><java.util.Iterator: void remove()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.zip.ZipEntry: int hashCode()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.Constructor: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Hashtable$ValueCollection: void clear()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.ImmutableDescriptor: int hashCode()>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.http_basics.HttpBasicsLesson: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.UnboxedFixnum: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.TreeMap$KeySet: void clear()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.tz.FixedDateTimeZone: int hashCode()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object get(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.StringLiteral: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: java.lang.String toString()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.logging.Level$KnownLevel: void add(java.util.logging.Level)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractList: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: java.sql.ResultSetMetaData getMetaData()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Character$Subset: int hashCode()>
<java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: boolean containsKey(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.DecimalFormat: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.jruby.RubyHash$BaseSet: java.util.Iterator iterator()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.cglib.core.Signature: int hashCode()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><java.util.ArrayDeque: boolean contains(java.lang.Object)>
<io.undertow.util.Rfc6265CookieSupport: void validateCookieValue(java.lang.String)>-><java.lang.String: char charAt(int)>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.context.support.ServletContextResource: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void <init>(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hibernate.boot.model.relational.Namespace: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.http.HttpEntity: int hashCode()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.owasp.webgoat.lessons.Assignment: int hashCode()>
<io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>-><java.lang.System: long currentTimeMillis()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.CodeSigner: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: java.lang.Object[] toArray(java.lang.Object[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$1: boolean hasNext()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap: java.util.Set entrySet()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.EnumMap: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: java.lang.String getString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable: java.util.Set entrySet()>
<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service tryGet(int)>-><java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.Platform: java.util.SortedMap mapsTransformEntriesSortedMap(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps: java.util.NavigableMap transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.dom4j.tree.BackedList: void clear()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.security.core.userdetails.User: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.Label: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.RequestPath: org.springframework.http.server.RequestPath parse(java.net.URI,java.lang.String)>-><org.springframework.http.server.DefaultRequestPath: void <init>(java.net.URI,java.lang.String)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: java.sql.ResultSet executeQuery()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.LongNode: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><java.lang.Double: int hashCode()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: int size()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.tz.CachedDateTimeZone: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.method.MethodDescription$AbstractBase: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfTypeVariable: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.chrono.GJChronology: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.TemporaryVariable: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfTypeVariable: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.dom4j.tree.BackedList: void clear()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<java.util.ArrayDeque$DeqSpliterator: void <init>(java.util.ArrayDeque,int,int)>-><java.lang.Object: void <init>()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues: boolean add(java.lang.String)>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.hibernate.metamodel.model.domain.NavigableRole: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedList$ListItr: boolean hasNext()>
<java.util.Collections$UnmodifiableCollection$1: void <init>(java.util.Collections$UnmodifiableCollection)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><java.util.WeakHashMap$Entry: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$1: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter)>-><java.util.AbstractSet: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.Duration: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.FileServer: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.server.HttpServerExchange: java.util.Map getResponseCookies()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.IdentityHashMap$Values: int size()>
<java.lang.Object: java.lang.String toString()>-><sun.font.AttributeValues: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.IRScope: int hashCode()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable: boolean isEmpty()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.AbstractList: void clear()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.io.ClassPathResource: int hashCode()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.csrf.ForgedReviews: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.MessageFormat: int hashCode()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.csrf.CSRFFeedback: void <init>()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.util.TreeMap$Entry: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.Label: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.io.Closeable,java.lang.String)>-><com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.SimpleType: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.factory.config.RuntimeBeanReference: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$Record: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.ansi.Ansi8BitColor: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.aop.framework.AopProxyUtils: java.lang.Class[] completeProxiedInterfaces(org.springframework.aop.framework.AdvisedSupport,boolean)>-><java.lang.Class: boolean isInterface()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: io.netty.handler.codec.http.HttpHeaders access$100(org.springframework.http.server.reactive.NettyHeadersAdapter)>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.style.ToStringCreator: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Boolean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.RuleBasedCollator: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.ArrayDeque: boolean add(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.text.AttributedCharacterIterator$Attribute: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><sun.util.calendar.Era: int hashCode()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$1$1: int getCount()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.calendar.Era: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: boolean hasWaiters()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><io.jsonwebtoken.impl.JwtMap: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>
<org.jruby.ir.representations.IGVCFGVisitor: void visitEdges(org.jruby.ir.representations.CFG)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Object: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.apache.logging.log4j.spi.Provider: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.RubyHash$BaseSet: int size()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge5.Assignment5: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.crypto.CryptoPermission: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object findValue(java.lang.annotation.Annotation[])>-><org.springframework.core.annotation.AnnotatedElementUtils: java.lang.reflect.AnnotatedElement forAnnotations(java.lang.annotation.Annotation[])>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.CurrentScope: boolean equals(java.lang.Object)>
<java.util.Spliterator: boolean hasCharacteristics(int)>-><java.util.ArrayDeque$DeqSpliterator: int characteristics()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><org.springframework.core.annotation.AbstractMergedAnnotation: java.util.Optional synthesize(java.util.function.Predicate)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation: void <init>(org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.insecure_login.InsecureLoginTask: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>
<java.util.Collections$ReverseComparator: int compare(java.lang.Comparable,java.lang.Comparable)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: int size()>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.http_basics.HttpBasicsQuiz getHttpBasicsQuiz()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.util.DerInputBuffer: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.RuleBasedCollator: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: void clear()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.Period: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.util.Rfc6265CookieSupport: void validatePath(java.lang.String)>
<java.util.AbstractSet: int hashCode()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<io.undertow.server.HttpServerExchange: void addResponseCommitListener(io.undertow.server.ResponseCommitListener)>-><io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange addResponseWrapper(io.undertow.server.ConduitWrapper)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getReferencedType()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><com.google.common.collect.Maps$Values: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.annotation.MergedAnnotation get(java.lang.Class)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.Type: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><ch.qos.logback.core.subst.Node: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$SynchronizedMap: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><io.undertow.servlet.spec.HttpSessionImpl$UnwrapSessionAction: java.lang.Object run()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.FrozenString: int hashCode()>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.EnumMap$Values: void clear()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.beans.IndexedPropertyDescriptor: int hashCode()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>-><java.lang.Class: java.lang.String getName()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><java.util.Iterator: void remove()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.thoughtworks.xstream.io.path.Path: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: void <init>(reactor.netty.http.server.HttpServerRequest,org.springframework.core.io.buffer.NettyDataBufferFactory)>-><org.springframework.http.server.reactive.AbstractServerHttpRequest: void <init>(java.net.URI,java.lang.String,org.springframework.http.HttpHeaders)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.EnumMap$Values: void clear()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.http.client.HttpComponentsClientHttpResponse: void close()>-><org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$EmptyList: int size()>
<io.undertow.servlet.spec.ServletPrintWriterDelegate$2: sun.misc.Unsafe run()>-><io.undertow.servlet.spec.ServletPrintWriterDelegate: sun.misc.Unsafe access$100()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jcodings.Encoding: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.annotation.AnnotationValue$ForDescriptionArray: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.Hashtable$KeySet: void clear()>-><java.util.Hashtable: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.WeakHashMap$Entry: int hashCode()>
<io.undertow.util.HeaderMap: void resize()>-><java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfGenericArray: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.collect.Multimaps: java.util.Collection unmodifiableValueCollection(java.util.Collection)>-><java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.jruby.RubyHash$BaseIterator: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.GregorianCalendar: int hashCode()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><sun.misc.Signal: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.field.ScaledDurationField: int hashCode()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Hashtable: int hashCode()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.ToStringCreator: org.springframework.core.style.ToStringCreator append(java.lang.String,java.lang.Object)>-><org.springframework.core.style.ToStringCreator: void printFieldSeparatorIfNecessary()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: org.owasp.webgoat.assignments.AttackResult injectableQueryAvailability(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.temporal.WeekFields: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: java.lang.Object[] toArray()>-><io.undertow.util.HeaderValues: java.lang.String[] toArray()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.asm.AsmVisitorWrapper$ForDeclaredMethods$Entry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$AbstractBase: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>-><java.lang.String: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.sun.jmx.mbeanserver.NamedObject: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: java.lang.String getPassword()>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.flywaydb.core.internal.resource.classpath.ClassPathResource: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.LinkedList: java.util.ListIterator listIterator(int)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><sun.util.calendar.ZoneInfo: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.FieldPosition: int hashCode()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.chrome_dev_tools.NetworkDummy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyString: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$ValueIterator: java.lang.Object next()>
<java.util.Collections$EmptyList: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.xnio.OptionMap: boolean get(org.xnio.Option,boolean)>-><org.xnio.SingleOption: java.lang.Object cast(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.io.InputStreamResource: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByValue(int)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.NullNode: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object findValue(java.lang.annotation.Annotation[])>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object extractValue(org.springframework.core.annotation.AnnotationAttributes)>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><reactor.core.publisher.Mono: reactor.core.publisher.Mono empty()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.runtime.Arity: int hashCode()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray()>-><java.util.ArrayDeque: java.lang.Object[] toArray()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.owasp.webgoat.password_reset.PasswordResetEmail: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><jnr.constants.ConstantSet: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>-><java.lang.String: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.Parameter: int hashCode()>
<org.springframework.http.server.reactive.AbstractServerHttpResponse: void <init>(org.springframework.core.io.buffer.DataBufferFactory,org.springframework.http.HttpHeaders)>-><org.springframework.util.LinkedMultiValueMap: void <init>()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.api.Deployment getDeployment()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.java.proxies.ArrayJavaProxy: int hashCode()>
<java.util.Collections$SynchronizedCollection: boolean isEmpty()>-><java.util.ArrayDeque: boolean isEmpty()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Collections$EmptyList: int size()>
<java.util.Collections$SynchronizedCollection: boolean isEmpty()>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.IdentityHashMap$EntrySet: int size()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment getClientSideFilteringFreeAssignment()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Arrays$ArrayList: int size()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$Record: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.BinaryData: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.EnumMap$EntrySet: void clear()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.secure_password.SecurePasswordsAssignment: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.password_reset.SimpleMailAssignment getSimpleMailAssignment()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.hsqldb.types.IntervalMonthData: int hashCode()>
<org.springframework.validation.AbstractBindingResult: java.util.List getAllErrors()>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hibernate.engine.query.spi.QueryPlanCache$DynamicFilterKey: int hashCode()>
<sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(sun.security.ssl.CipherSuite)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int index(int)>-><java.lang.AssertionError: void <init>()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: javax.servlet.ServletContext getServletContext()>-><org.springframework.web.context.support.GenericWebApplicationContext: javax.servlet.ServletContext getServletContext()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.lang.Object: java.lang.String toString()>-><java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Character: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.Expression: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge8.Assignment8: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.SubList$1: boolean hasNext()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORLogin: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.net.URI: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: java.sql.Statement getStatement()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int read(byte[],int,int)>-><java.io.InputStream: int read(byte[],int,int)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.lang.ProcessEnvironment$StringEntrySet: void clear()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.util.HashMap$Node: int hashCode()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.IdentityHashMap$EntryIterator$Entry: int hashCode()>
<javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>-><javax.servlet.ServletRequestWrapper: java.lang.Object getAttribute(java.lang.String)>
<com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Collection values()>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Collection createValues()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: void <init>()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: java.lang.String getString()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationDescription$AbstractBase: int hashCode()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: java.lang.String getString()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfGenericArray: int hashCode()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onClose()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void stopAndReleaseWebServer()>
<sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Set)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.ConcurrentModificationException: void <init>()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$1: java.lang.Object run()>-><sun.security.ssl.JsseJce$1: java.lang.Void run()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: java.lang.String remove(int)>-><io.undertow.util.HeaderValues: java.lang.String removeFirst()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForEnumerationDescription: boolean equals(java.lang.Object)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.server.HttpServerExchange: io.undertow.server.ServerConnection getConnection()>
<io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>-><io.undertow.server.session.InMemorySessionManager$SessionImpl: java.lang.String getId()>
<org.springframework.http.server.reactive.HttpHeadResponseDecorator: void <init>(org.springframework.http.server.reactive.ServerHttpResponse)>-><org.springframework.http.server.reactive.ServerHttpResponseDecorator: void <init>(org.springframework.http.server.reactive.ServerHttpResponse)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.util.Spliterators$1Adapter: boolean hasNext()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: java.lang.String getString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><org.springframework.validation.BeanPropertyBindingResult: java.lang.Object getTarget()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.owasp.webgoat.challenges.Email: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.SymbolProc: boolean equals(java.lang.Object)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.util.Rfc6265CookieSupport: void validateDomain(java.lang.String)>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Hashtable: java.lang.String toString()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a getSqlInjectionLesson10a()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForDescriptionArray: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getValue()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyHash: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray()>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>-><javax.servlet.ServletRequestWrapper: javax.servlet.ServletRequest getRequest()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.crypto.EncodingAssignment: void <init>()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.expression.spel.ast.OperatorBetween: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.util.List getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter: io.netty.handler.codec.http.HttpHeaders access$100(org.springframework.http.server.reactive.NettyHeadersAdapter)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType getContentType()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ast.SymbolNode: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadRetrieval: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String)>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.crypto.EncodingAssignment: java.lang.String getBasicAuth(javax.servlet.http.HttpServletRequest)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String getName()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: java.sql.Statement getStatement()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.service.LessonProgressService: java.util.List lessonOverview()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<org.owasp.webgoat.assignments.LessonTrackerInterceptor: void <init>(org.owasp.webgoat.users.UserTrackerRepository,org.owasp.webgoat.session.WebSession)>-><synthetic.method.SingletonFactory: synthetic.method.UserTrackerRepositoryImpl getUserTrackerRepositoryImpl()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.AttributeAccessorSupport: int hashCode()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.jruby.RubyHash: boolean isEmpty()>
<java.lang.Object: java.lang.String toString()>-><java.net.Inet4Address: int hashCode()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ContentTypeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.IdentityHashMap$KeySet: void clear()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.AbstractCollection: void clear()>-><io.micrometer.shaded.org.pcollections.IntTree$EntryIterator: void remove()>
<java.text.AttributeEntry: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>-><com.google.common.collect.Multimaps$UnmodifiableMultimap$1: void <init>(com.google.common.collect.Multimaps$UnmodifiableMultimap)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.undertow.util.HeaderValues: int size()>
<io.undertow.servlet.api.ServletInfo: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.ProcessEnvironment$StringEntrySet: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Locale: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Maps$EntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: java.util.Set keySet()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>-><com.google.common.collect.Multimaps$Keys: int distinctElements()>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution$Replacement$ForElementMatchers$Factory: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Hashtable: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.RubyArray$RubyArrayConversionIterator: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$MappingList: int size()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.jwt.JWTVotesEndpoint getJWTVotesEndpoint()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.jruby.specialized.RubyArrayTwoObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.specialized.RubyArraySpecialized: boolean packed()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.user.RegistrationController: java.lang.String showForm(org.owasp.webwolf.user.UserForm)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: boolean isCommitted()>-><io.undertow.servlet.spec.HttpServletResponseImpl: boolean responseStarted()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.core.convert.support.ObjectToOptionalConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI resolveBaseUrl(reactor.netty.http.server.HttpServerRequest)>-><java.lang.Integer: int parseInt(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object get(java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: long getExpires()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyFloat: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hibernate.boot.model.relational.Namespace: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.javasupport.JavaClass: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<com.google.common.collect.Multimaps: java.util.Collection unmodifiableValueCollection(java.util.Collection)>-><java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.io.ClassPathResource: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.lang.Object[] toArray(java.lang.Object[])>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray(java.lang.Object[])>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubySymbol: boolean equals(java.lang.Object)>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.TimestampData: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.passes.CompilerPass: int hashCode()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.path_traversal.ProfileUpload getProfileUpload()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.RegularEnumSet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap: boolean isEmpty()>
<java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<sun.security.ssl.SSLSessionContextImpl$1: java.lang.Object run()>-><sun.security.ssl.SSLSessionContextImpl$1: java.lang.String run()>
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>-><java.util.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache: void bumpAccess(io.undertow.server.handlers.cache.LRUCache$CacheEntry)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.Expression: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.jruby.ir.representations.IGVCFGVisitor: void visitEdges(org.jruby.ir.representations.CFG)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.Year: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.CompositeType: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.method.MethodDescription$AbstractBase: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.HashMap$EntrySet: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.field.PreciseDurationField: int hashCode()>
<java.util.TreeMap$KeySet: void clear()>-><java.util.TreeMap: void clear()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.controller.StartLesson getStartLesson()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.cglib.core.MethodInfo: int hashCode()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><org.springframework.core.io.buffer.NettyDataBufferFactory: void <init>(io.netty.buffer.ByteBufAllocator)>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.csrf.CSRFFeedback: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.AbstractMap$1: boolean isEmpty()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.util.HashMap: int hash(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.cglib.core.EmitUtils: void stringSwitchHelper(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.asm.Label,org.springframework.asm.Label,int)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.security.cert.Certificate: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.jar.Attributes: int hashCode()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.SigningAssignment: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>-><sun.security.ssl.JsseJce$1: java.lang.Object run()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.StackTraceElement: int hashCode()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.client_side_filtering.Salaries: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><jnr.constants.ConstantSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyMatchData: boolean equals(java.lang.Object)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaFormEditor$Transform: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$3ReducingSink: void accept(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.ScopeModule: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getRemoteAddress()>
<java.lang.Object: java.lang.String toString()>-><java.time.ZoneId: int hashCode()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<java.util.AbstractList: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><java.util.Collections$UnmodifiableCollection: int size()>
<java.security.Provider: void implPutAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.challenges.challenge1.Assignment1 getAssignment1()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.util.DerInputBuffer: int hashCode()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.Multimaps: java.util.Collection unmodifiableValueCollection(java.util.Collection)>-><java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.javasupport.JavaObject: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: int size()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.flywaydb.core.internal.resolver.ResolvedMigrationImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b getSqlInjectionLesson6b()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.net.URL: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.http.server.DefaultRequestPath: void <init>(java.net.URI,java.lang.String)>-><java.net.URI: java.lang.String getRawPath()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.HsqlNameManager$HsqlName: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfParameterizedType: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><com.google.common.collect.Maps$Values: boolean isEmpty()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.awt.Color: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.CharacterType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.ArrayDeque: int size()>
<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: int hashCode()>
<io.undertow.util.HeaderValues: void clear()>-><io.undertow.util.HeaderValues: void clearInternal()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.EnumMap: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><ch.qos.logback.core.status.StatusBase: int hashCode()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set findTimedAnnotations(java.lang.reflect.AnnotatedElement)>-><org.springframework.core.annotation.MergedAnnotations: org.springframework.core.annotation.MergedAnnotations from(java.lang.reflect.AnnotatedElement)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.IdentityHashMap$EntryIterator$Entry: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.beans.PropertyDescriptor: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.ssrf.SSRFTask2: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.AttributedString$AttributedStringIterator: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.owasp.webgoat.challenges.Email: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.Instant: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType: int hashCode()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.annotation.MergedAnnotation from(java.lang.Object,java.lang.annotation.Annotation)>-><org.springframework.core.annotation.AnnotationTypeMappings: org.springframework.core.annotation.AnnotationTypeMapping get(int)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.ClobDataID: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.headius.invokebinder.Signature: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.LinkedHashMap$LinkedEntrySet: void clear()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.format.DecimalStyle: int hashCode()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><java.util.ArrayDeque: boolean add(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpResponse: void <init>(reactor.netty.http.server.HttpServerResponse,org.springframework.core.io.buffer.DataBufferFactory)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: void <init>(io.netty.handler.codec.http.HttpHeaders)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<java.util.AbstractList: void clear()>-><java.util.Arrays$ArrayList: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><jnr.constants.ConstantSet$ConstantIterator: boolean hasNext()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.challenges.challenge5.Assignment5: void <init>(javax.sql.DataSource)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void startAndAttachTimingContext(javax.servlet.http.HttpServletRequest,java.lang.Object)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getValue()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: int size()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeWithType(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>-><io.undertow.util.HeaderValues: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Collection createValues()>-><com.google.common.collect.Maps$Values: void <init>(java.util.Map)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.core.style.ToStringCreator: org.springframework.core.style.ToStringCreator append(java.lang.String,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleField(java.lang.StringBuilder,java.lang.String,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.AbstractCollection: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><java.util.TreeMap: void <init>()>
<org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>-><org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<java.util.AbstractList: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.net.SocketPermission: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge7.Assignment7: org.springframework.core.io.ClassPathResource git()>
<java.security.Provider: void implPutAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.AbstractMap$1: int size()>
<io.undertow.server.handlers.cache.LRUCache: void bumpAccess(io.undertow.server.handlers.cache.LRUCache$CacheEntry)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.TreeMap: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.style.DefaultToStringStyler: void styleFieldStart(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.time.format.DateTimeFormatterBuilder$PrefixTree getTree(java.time.format.DateTimeParseContext)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.LocalVariable: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.flywaydb.core.internal.schemahistory.AppliedMigration: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType getContentType()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set findTimedAnnotations(java.lang.reflect.AnnotatedElement)>-><org.springframework.core.annotation.TypeMappedAnnotations: java.util.stream.Stream stream(java.lang.Class)>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.String: char charAt(int)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.WeakHashMap$KeySet: int size()>
<org.springframework.util.MimeType: void <init>(java.lang.String,java.lang.String,java.util.Map)>-><java.util.Map: void forEach(java.util.function.BiConsumer)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: void <init>(java.util.Collection)>-><java.lang.Object: void <init>()>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.jruby.javasupport.binding.InterfaceInitializer: void setupInterfaceMethods(java.lang.Class,org.jruby.javasupport.binding.Initializer$State)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<java.lang.Object: java.lang.String toString()>-><java.time.LocalTime: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>
<java.util.Collections$UnmodifiableCollection$1: void <init>(java.util.Collections$UnmodifiableCollection)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>-><java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter,org.springframework.http.server.reactive.NettyHeadersAdapter$1)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: void <init>(org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver,org.springframework.beans.factory.config.DependencyDescriptor,org.springframework.beans.factory.support.DefaultListableBeanFactory,java.lang.String)>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.Instant: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForTypeDescription: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.RubyHash$BaseIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.persist.CachedObjectBase: int hashCode()>
<java.util.Collections$UnmodifiableCollection: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.jsontype.TypeDeserializer findTypeDeserializer(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.lang.Object: java.lang.String toString()>-><java.lang.Integer: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyHash$ConvertingEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.awt.Point: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.LocalTime: int hashCode()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.boot.web.servlet.DynamicRegistrationBean: java.lang.String getOrDeduceName(java.lang.Object)>-><org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String)>
<com.google.common.collect.Multimaps$UnmodifiableMultimap$1: java.util.Collection apply(java.util.Collection)>-><com.google.common.collect.Multimaps: java.util.Collection access$000(java.util.Collection)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: java.lang.String getString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.flywaydb.core.internal.schemahistory.AppliedMigration: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: void <init>(javax.sql.DataSource)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$MappingList: int size()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.OffsetTime: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.lang.String getMethodValue()>-><reactor.netty.http.server.HttpServerRequest: io.netty.handler.codec.http.HttpMethod method()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: org.springframework.security.core.Authentication getAuthentication()>-><org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.HsqlNameManager$HsqlName: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>-><java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><java.lang.Boolean: int hashCode()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.core.style.DefaultToStringStyler: void styleField(java.lang.StringBuilder,java.lang.String,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleFieldStart(java.lang.StringBuilder,java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyThread: int hashCode()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<sun.text.normalizer.ICUBinary: byte[] readHeader(java.io.InputStream,byte[],sun.text.normalizer.ICUBinary$Authenticate)>-><sun.net.idn.StringPrepDataReader: boolean isDataVersionAcceptable(byte[])>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.ParsePosition: int hashCode()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyObject: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.Maps$EntrySet: void clear()>-><com.google.common.collect.Maps$TransformedEntriesMap: void clear()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$MappingList: int size()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hibernate.boot.model.relational.Namespace: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.asm.Handle: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge5.Assignment5: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: java.sql.ResultSet executeQuery()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.cglib.proxy.Enhancer: void emitMethods(org.springframework.cglib.core.ClassEmitter,java.util.List,java.util.List)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Long: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.net.URL: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$UnmodifiableListMultimap: com.google.common.collect.ListMultimap delegate()>-><com.google.common.collect.Multimaps$UnmodifiableMultimap: com.google.common.collect.Multimap delegate()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.runtime.Block: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><javax.management.ObjectInstance: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: void close()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer subPath(int)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.io.InputStreamResource: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.TreeSet: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.HsqlException: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.concurrent.ArrayBlockingQueue: void clear()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Collection getLongTaskTimerSamples(javax.servlet.http.HttpServletRequest,java.lang.Object,java.util.Set)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><io.micrometer.core.instrument.Tags$ArrayIterator: boolean hasNext()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getSessionId()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b getSqlInjectionLesson10b()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.AbstractSet: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues: int size()>
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void stopAndReleaseWebServer()>-><java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.Period: int hashCode()>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.sql.Timestamp: int hashCode()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><java.util.Collections$UnmodifiableRandomAccessList: java.util.List subList(int,int)>
<com.google.common.collect.Maps$Values: java.util.Iterator iterator()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getKey()>
<org.springframework.http.server.DefaultRequestPath: void validateContextPath(java.lang.String,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.imageio.ImageTypeSpecifier$Interleaved: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyContentTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.jruby.javasupport.JavaClass: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Sink$OfInt: void accept(java.lang.Object)>
<org.springframework.http.server.reactive.AbstractServerHttpResponse: void <init>(org.springframework.core.io.buffer.DataBufferFactory,org.springframework.http.HttpHeaders)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.UnboxedFixnum: int hashCode()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: org.owasp.webgoat.assignments.AttackResult injectableQueryAvailability(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.csrf.ForgedReviews: void <init>()>
<com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.HashMap$EntrySet: int size()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<io.undertow.servlet.handlers.ServletRequestContext: io.undertow.servlet.handlers.ServletRequestContext current()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.LinkedList: void clear()>
<org.springframework.core.style.DefaultToStringStyler: void styleValue(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.api.DeploymentInfo: int getDefaultCookieVersion()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.lang.Object: java.lang.String toString()>-><java.net.URL: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.Maps$TransformedEntriesMap: void clear()>-><com.google.common.collect.Maps$TransformedEntriesMap: void clear()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$EmptySet: int size()>
<java.lang.Object: java.lang.String toString()>-><java.time.LocalDateTime: int hashCode()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.x509.GeneralName: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfTypeVariable: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.method.ParameterDescription$AbstractBase: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.RubyHash$BaseSet: java.util.Iterator iterator()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><org.jruby.util.collections.WeakHashSet: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.time.Period: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean remove(java.lang.Object)>-><io.undertow.util.HeaderValues: boolean removeFirstOccurrence(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.lang.CharSequence$1CharIterator: boolean hasNext()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: java.lang.String getPassword()>-><org.hsqldb.jdbc.JDBCResultSet: java.lang.String getString(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.method.MethodDescription$AbstractBase: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.security.CodeSigner: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><javax.management.MBeanInfo: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getName()>-><javax.servlet.http.Cookie: java.lang.String getName()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.invoke.MethodType: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput: void <init>(java.lang.String,org.owasp.webgoat.session.WebSession)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.math.BigInteger: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.SimpleDateFormat: int hashCode()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.Type: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><org.springframework.validation.AbstractBindingResult: int getErrorCount()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.util.AbstractSet: boolean equals(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint: void login(java.lang.String,javax.servlet.http.HttpServletResponse)>-><io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues$1: void remove()>-><java.lang.IllegalStateException: void <init>()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$SizedCollectorTask: void <init>(java.util.Spliterator,java.util.stream.PipelineHelper,int)>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Hashtable$KeySet: int size()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge1.Assignment1: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.owasp.webgoat.challenges.Email: int hashCode()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String determineHighestPriorityCandidate(java.util.Map,java.lang.Class)>-><java.lang.Integer: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.http.HttpEntity: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Short: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.lang.ProcessEnvironment$StringEntry: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyFloat: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.security.Provider: void implPutAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.util.regex.Pattern$1MatcherIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.jruby.ir.IRBuilder: org.jruby.ir.operands.Operand buildFixnumCase(org.jruby.ast.CaseNode)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<org.jruby.RubyModule$MethodClumper: void clump(java.lang.Class)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<java.nio.file.Files: java.nio.file.Path writeString(java.nio.file.Path,java.lang.CharSequence,java.nio.file.OpenOption[])>-><java.lang.Error: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.challenges.challenge8.Assignment8: void <init>()>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.io.InputStream: int read(byte[],int,int)>-><org.jruby.RubyFile$2: int read()>
<java.beans.Introspector: void addPropertyDescriptor(java.beans.PropertyDescriptor)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean equals(java.lang.Object)>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><org.springframework.http.server.DefaultPathContainer: java.lang.String value()>
<java.util.AbstractCollection: java.lang.String toString()>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.jruby.anno.TypePopulator$ReflectiveTypePopulator: void addBoundMethodsUnlessOmited(org.jruby.Ruby,java.lang.String,java.util.List)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.nulabinc.zxcvbn.matchers.SpatialMatcher: java.util.List spatialMatchHelper(java.lang.String,com.nulabinc.zxcvbn.matchers.Keyboard)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.util.Collections$EmptyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.zip.ZipEntry: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForDescriptionArray: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.ObjectNode: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$Record: int hashCode()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.AbstractList: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String getString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.crypto.CryptoAllPermission: int hashCode()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderMap put(io.undertow.util.HttpString,java.lang.String)>-><io.undertow.util.HeaderMap: java.util.Collection remove(io.undertow.util.HttpString)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.jruby.util.collections.WeakHashSet: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedSortedSet: java.util.Comparator comparator()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: boolean containsKey(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Hashtable$EntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.xss.CrossSiteScriptingQuiz: void <init>()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.AbstractMap$1: void clear()>
<org.springframework.web.client.RestTemplate: java.lang.Object doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)>-><org.springframework.http.client.HttpComponentsClientHttpResponse: void close()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.AbstractCollection: boolean isEmpty()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.javasupport.JavaObject: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.EnumMap: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.lang.Object: java.lang.String toString()>-><javax.management.MBeanParameterInfo: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.LocalDate: int hashCode()>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.http_basics.HttpBasicsLesson: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hibernate.engine.query.spi.QueryPlanCache$DynamicFilterKey: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.logging.Level: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.flywaydb.core.internal.resource.classpath.ClassPathResource: boolean equals(java.lang.Object)>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult furBall(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.ssrf.SSRFTask2: org.owasp.webgoat.assignments.AttackResult furBall(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.DateFormatSymbols: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.TreeMap$EntrySet: void clear()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.AbstractSet: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.SubList: void removeRange(int,int)>-><java.util.SubList: void removeRange(int,int)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.RegularEnumSet: boolean isEmpty()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation getSqlOnlyInputValidation()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.service.LabelDebugService: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getName()>
<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.javasupport.JavaMethod: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.annotation.AnnotationValue$ForConstant: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.Collection: java.util.stream.Stream stream()>-><java.util.ArrayDeque: java.util.Spliterator spliterator()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.locale.provider.RuleBasedBreakIterator: int hashCode()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues: boolean contains(java.lang.Object)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: java.lang.String getString()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation synthesizeAnnotation(java.lang.annotation.Annotation,java.lang.reflect.AnnotatedElement)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><io.undertow.servlet.spec.ContentTypeInfo: java.lang.String getHeader()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$SynchronizedSet: int hashCode()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions: void <init>()>
<org.jruby.specialized.RubyArrayOneObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: java.lang.String getPassword()>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<com.google.common.collect.Maps$Values: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableMap: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.DecimalFormatSymbols: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: java.lang.String getSecretToken(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTSecretKeyEndpoint: java.lang.String getSecretToken()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><io.undertow.servlet.spec.ServletPrintWriterDelegate$2: java.lang.Object run()>
<java.util.AbstractMap: java.lang.String toString()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<javax.security.auth.Subject$SecureSet$6: java.lang.Object run()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableMap: int size()>-><com.google.common.collect.Maps$TransformedEntriesMap: int size()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.invoke.LambdaForm: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.jruby.ir.representations.CFG: org.jruby.dirgra.DirectedGraph build(org.jruby.ir.instructions.Instr[])>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<org.jruby.ir.util.IGVInstrListener: void instrChanged(org.jruby.ir.representations.BasicBlock,org.jruby.ir.instructions.Instr,org.jruby.ir.instructions.Instr,int,org.jruby.ir.listeners.InstructionsListener$OperationType)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Collection getLongTaskTimerSamples(javax.servlet.http.HttpServletRequest,java.lang.Object,java.util.Set)>-><java.util.stream.ReferencePipeline: void forEach(java.util.function.Consumer)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.AbstractList: int hashCode()>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer subPath(int)>-><org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer subPath(int,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.SubList$1: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.beans.IndexedPropertyDescriptor: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4 getSqlInjectionLesson4()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.util.regex.Pattern$1MatcherIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.mailbox.MailboxController: org.springframework.web.servlet.ModelAndView mail()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.calendar.CalendarDate: int hashCode()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>-><java.security.Provider$Service: java.security.Provider getProvider()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge8.Assignment8: org.owasp.webgoat.assignments.AttackResult notUsed()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: java.lang.String getString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildFullRequestUrl(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution$Replacement$Factory$Compound: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.thoughtworks.xstream.core.util.FastField: int hashCode()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.net.InetSocketAddress: int hashCode()>
<org.springframework.aop.framework.AopProxyUtils: boolean equalsInProxy(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.framework.AdvisedSupport)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.flywaydb.core.internal.schemahistory.AppliedMigration: boolean equals(java.lang.Object)>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>-><org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.google.common.collect.TransformedIterator: boolean hasNext()>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForEnumerationDescription: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.lang.invoke.LambdaForm$Name: int hashCode()>
<java.util.Vector: void clear()>-><java.util.Vector: void removeAllElements()>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.DecimalNode: int hashCode()>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.validation.BindException: boolean equals(java.lang.Object)>-><org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.Label: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.lang.Object: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.password_reset.ResetLinkAssignment getResetLinkAssignment()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation synthesizeAnnotation(java.lang.annotation.Annotation,java.lang.reflect.AnnotatedElement)>-><org.springframework.core.annotation.AnnotationFilter: boolean matches(java.lang.annotation.Annotation)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.util.collections.WeakHashSet: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>-><java.util.ArrayDeque: boolean add(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.HashMap$EntrySet: void clear()>-><java.util.HashMap: void clear()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.beans.factory.support.NullBean: int hashCode()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>-><com.google.common.collect.Maps$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.flywaydb.core.internal.resolver.ResolvedMigrationImpl: int hashCode()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><java.util.Iterator: void remove()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.SubList$1: boolean hasNext()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.AttributedString$AttributedStringIterator: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.Boolean: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.awt.image.ColorModel: int hashCode()>
<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>-><org.springframework.validation.BindException: java.lang.String getMessage()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.MBeanAttributeInfo: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyString: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<javax.net.ssl.SNIHostName: int hashCode()>-><java.lang.String: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractList$Itr: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.AbstractSet: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.jruby.ir.representations.CFG: org.jruby.dirgra.DirectedGraph build(org.jruby.ir.instructions.Instr[])>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.AbstractMap: java.lang.String toString()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$1: java.lang.Object next()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: java.lang.String getMd5(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.HashingAssignment: java.lang.String getMd5(javax.servlet.http.HttpServletRequest)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$1: boolean isEmpty()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.jruby.RubyHash: java.lang.Object get(java.lang.Object)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.env.PropertySource: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.MBeanOperationInfo: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Spliterator spliterator()>-><java.util.ArrayDeque: java.util.Spliterator spliterator()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.javasupport.JavaMethod: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.FloatNode: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.Provider$UString: int hashCode()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier: void <init>()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.Label: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: void clear()>-><java.util.concurrent.locks.ReentrantLock: void lock()>
<io.undertow.util.HeaderMap: java.util.Collection remove(io.undertow.util.HttpString)>-><io.undertow.util.HeaderMap: io.undertow.util.HeaderValues removeEntry(io.undertow.util.HttpString)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.security.Provider: java.util.Set entrySet()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><io.undertow.util.HeaderValues$1: void remove()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.String toString()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: int size()>-><io.undertow.util.HeaderValues: int size()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateNonEmpty(io.undertow.util.HttpString,java.lang.Object[],int,int,java.lang.Object)>-><io.undertow.util.HttpString: boolean equals(io.undertow.util.HttpString)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.AllPermission: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.ProtectionDomain$WeakProtectionDomainKey: int hashCode()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.convert.support.ObjectToOptionalConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.net.SocketPermission: int hashCode()>
<io.undertow.util.HeaderValues$1: void remove()>-><io.undertow.util.HeaderValues: java.lang.String remove(int)>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$TransformedEntriesMap: boolean containsKey(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: boolean containsKey(java.lang.Object)>
<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>-><java.util.AbstractCollection: boolean contains(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.nulabinc.zxcvbn.matchers.SpatialMatcher: java.util.List spatialMatchHelper(java.lang.String,com.nulabinc.zxcvbn.matchers.Keyboard)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.HashSet: boolean isEmpty()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><javax.management.MBeanConstructorInfo: int hashCode()>
<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void writeValueToImplicitCollection(java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)>-><java.util.ArrayDeque: boolean add(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.HsqlException: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.apache.logging.log4j.Level: int hashCode()>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer subPath(int,int)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint: org.springframework.http.ResponseEntity checkout(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptySet: java.util.Iterator iterator()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><java.util.ArrayDeque: int size()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void startAndAttachTimingContext(javax.servlet.http.HttpServletRequest,java.lang.Object)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: void <init>(java.util.Collection)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyThread: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<org.jruby.ir.IRBuilder: org.jruby.ir.operands.Operand buildFixnumCase(org.jruby.ast.CaseNode)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><java.util.ArrayDeque: boolean isEmpty()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.javasupport.JavaClass: int hashCode()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl getIDORViewOwnProfileAltUrl()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: java.lang.String getString()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.owasp.webgoat.lessons.Assignment: boolean equals(java.lang.Object)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.TimestampData: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean last()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType: int hashCode()>
<org.springframework.web.servlet.handler.HandlerInterceptorAdapter: void <init>()>-><java.lang.Object: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>-><java.lang.reflect.Method: java.lang.Class getReturnType()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.jruby.RubyArray: void alloc(int)>-><org.jruby.RubyBasicObject: org.jruby.Ruby getRuntime()>
<com.google.common.collect.Multimaps$Keys$1: void <init>(com.google.common.collect.Multimaps$Keys,java.util.Iterator)>-><com.google.common.collect.TransformedIterator: void <init>(java.util.Iterator)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.cert.X509CRLEntry: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.Year: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.interpreter.Profiler$IRCallSite: int hashCode()>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Object[])>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<java.lang.Object: java.lang.String toString()>-><java.io.File: int hashCode()>
<org.springframework.security.web.util.matcher.RegexRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Hashtable$ValueCollection: int size()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.SubList$1: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.ZoneOffset: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getCredentials()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: int hashCode()>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: java.lang.String getObjectName()>
<org.owasp.webgoat.crypto.EncodingAssignment: java.lang.String getBasicAuth(javax.servlet.http.HttpServletRequest)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.security.Principal getUserPrincipal()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.StringCharacterIterator: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.challenges.challenge5.Assignment5: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean next()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry: int hashCode()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.MBeanInfo: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>-><java.net.URI: void <init>(java.lang.String)>
<org.jruby.javasupport.JavaClass: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.thoughtworks.xstream.converters.collections.TreeMapConverter$NullComparator: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.Vector: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><sun.security.ssl.SecureKey: int hashCode()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.lang.ProcessEnvironment$StringKeySet: void clear()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.idor.IDORLogin: void initIDORInfo()>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.crypto.HashingAssignment getHashingAssignment()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><java.lang.String: boolean matches(java.lang.String)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getName()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><org.jruby.RubyEnumerator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: int size()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.awt.image.ColorModel: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.Duration: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.jruby.RubyArray$RubyArrayConversionIterator: boolean hasNext()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: java.lang.String getString()>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValues: void clear()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: java.lang.String getString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: java.lang.String getPassword()>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.google.common.collect.Platform: java.util.SortedMap mapsTransformEntriesSortedMap(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps: java.util.SortedMap transformEntriesIgnoreNavigable(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.invoke.MemberName: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException from(com.fasterxml.jackson.core.JsonParser,java.lang.Object,java.lang.String,java.util.Collection)>-><com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.cglib.core.MethodInfo: int hashCode()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: org.springframework.http.HttpHeaders initHeaders(reactor.netty.http.server.HttpServerRequest)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: void <init>(io.netty.handler.codec.http.HttpHeaders)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<java.util.AbstractList: void clear()>-><java.util.SubList: void removeRange(int,int)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.util.Collection getUrlMappings()>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.POJONode: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.java.proxies.ArrayJavaProxy: boolean equals(java.lang.Object)>
<org.dom4j.tree.BackedList: void clear()>-><java.util.ArrayList: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><java.util.ArrayDeque$DeqIterator: void remove()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getDomain()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.beans.BeanMetadataAttribute: int hashCode()>
<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<sun.text.normalizer.IntTrie: int getTrailValue(int,char)>-><sun.net.idn.StringPrep$StringPrepTrieImpl: int getFoldingOffset(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: boolean isEmpty()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.base.AbstractPartial: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.IntervalSecondData: int hashCode()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><org.jruby.RubyThread: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.WeakHashMap$Values: void clear()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.IdentityHashMap$KeySet: int size()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.http.server.reactive.AbstractServerHttpResponse: void <init>(org.springframework.core.io.buffer.DataBufferFactory,org.springframework.http.HttpHeaders)>-><org.springframework.http.HttpLogging: org.apache.commons.logging.Log forLogName(java.lang.Class)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.Type: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.flywaydb.core.api.Location: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveManagedArray(java.lang.Object,java.util.List,java.lang.Class)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.validation.BindException: int hashCode()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.LocalVariable: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.javasupport.JavaConstructor: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: java.sql.ResultSet executeQuery()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.UUID: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.BinaryNode: int hashCode()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.client_side_filtering.ShopEndpoint getShopEndpoint()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.challenges.challenge7.Assignment7: void <init>()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.jruby.ir.IRBuilder: org.jruby.ir.operands.Operand buildFixnumCase(org.jruby.ast.CaseNode)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>
<java.util.AbstractList: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.crypto.CryptoPermission: int hashCode()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.TreeMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><java.lang.String: boolean matches(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.base.AbstractPeriod: int hashCode()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><org.springframework.core.NestedExceptionUtils: java.lang.String buildMessage(java.lang.String,java.lang.Throwable)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.headius.invokebinder.Signature: int hashCode()>
<java.text.AttributeEntry: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.UTCDateTimeZone: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.ArrayNode: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.UnresolvedPermission: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.util.ByteList: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: java.util.Collection retrieveReviews(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.csrf.ForgedReviews: java.util.Collection retrieveReviews()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.locale.provider.RuleBasedBreakIterator: int hashCode()>
<org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory: javax.servlet.http.HttpSession getObject()>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.LocalDate: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void startAndAttachTimingContext(javax.servlet.http.HttpServletRequest,java.lang.Object)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Collection getLongTaskTimerSamples(javax.servlet.http.HttpServletRequest,java.lang.Object,java.util.Set)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson: void <init>()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<io.undertow.servlet.api.ServletInfo: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.UnboxedBoolean: boolean equals(java.lang.Object)>
<java.security.Provider: void implPutAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.thoughtworks.xstream.core.util.WeakCache: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.runtime.Block: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.jar.Attributes$Name: int hashCode()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.JavaObjectData: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.stream.AbstractShortCircuitTask: void compute()>-><java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment: void <init>()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Vector$Itr: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hibernate.engine.query.spi.NamedParameterDescriptor: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.BigIntegerNode: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultRequestPath: void <init>(java.net.URI,java.lang.String)>-><org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer extractPathWithinApplication(org.springframework.http.server.PathContainer,org.springframework.http.server.PathContainer)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.secure_password.SecurePasswordsAssignment: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.UnboxedBoolean: int hashCode()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$1: byte[] resolveSigningKeyBytes(io.jsonwebtoken.JwsHeader,io.jsonwebtoken.Claims)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: int hashCode()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><javax.security.auth.Subject$SecureSet$6: java.lang.Object run()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><io.jsonwebtoken.impl.JwtMap: int hashCode()>
<com.google.common.collect.Multimaps: java.util.Collection unmodifiableValueCollection(java.util.Collection)>-><java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String getRemoteAddress()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.service.LessonProgressService getLessonProgressService()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.String toString()>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Hashtable$ValueCollection: int size()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.context.support.AbstractApplicationContext: boolean isTypeMatch(java.lang.String,org.springframework.core.ResolvableType)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableList: int hashCode()>-><java.lang.Object: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.servlet.spec.SecurityActions$1: java.lang.Object run()>-><io.undertow.servlet.spec.SecurityActions$1: io.undertow.servlet.handlers.ServletRequestContext run()>
<org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.annotation.MergedAnnotation from(java.lang.Object,java.lang.annotation.Annotation)>-><org.springframework.core.annotation.TypeMappedAnnotation: void <init>(org.springframework.core.annotation.AnnotationTypeMapping,java.lang.ClassLoader,java.lang.Object,java.lang.Object,java.util.function.BiFunction,int)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Map map()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.context.support.ApplicationListenerDetector: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.CodeSource: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.ZonedDateTime: int hashCode()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$EmptyMap: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean isEmpty()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Map map()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object findValue(java.lang.annotation.Annotation[])>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.List: void sort(java.util.Comparator)>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.awt.Font: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.util.Set entrySet()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Maps$Values: int size()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getPath()>-><javax.servlet.http.Cookie: java.lang.String getPath()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.TreeMap$EntrySet: int size()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.springframework.boot.convert.CollectionToDelimitedStringConverter: java.lang.Object convert(java.util.Collection,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>-><java.util.ArrayDeque$DeqSpliterator: java.util.ArrayDeque$DeqSpliterator trySplit()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyFloat: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.security.BasicPermission: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<com.google.common.collect.Multimaps$Keys: void clear()>-><com.google.common.collect.Multimaps$UnmodifiableMultimap: void clear()>
<org.springframework.security.authentication.AnonymousAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.matcher.RegexRequestMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.jruby.RubyArray$RubyArrayConversionIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>-><io.undertow.util.HeaderValues: boolean remove(java.lang.Object)>
<java.util.List: void sort(java.util.Comparator)>-><io.undertow.util.HeaderValues$1: void set(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: java.lang.String getString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><java.util.IdentityHashMap: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.EnumMap$1: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.undertow.util.HeaderValues: int size()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.SimpleType: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.Period: boolean equals(java.lang.Object)>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.service.LessonProgressService: void <init>(org.owasp.webgoat.users.UserTrackerRepository,org.owasp.webgoat.session.WebSession)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.StringLiteral: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Float: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><io.undertow.util.HeaderValues: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.flywaydb.core.internal.info.MigrationInfoImpl: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><java.lang.Class: boolean isInstance(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Character: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.annotation.MergedAnnotations from(java.lang.Object,java.lang.annotation.Annotation[],org.springframework.core.annotation.RepeatableContainers,org.springframework.core.annotation.AnnotationFilter)>-><org.springframework.core.annotation.TypeMappedAnnotations: void <init>(java.lang.Object,java.lang.annotation.Annotation[],org.springframework.core.annotation.RepeatableContainers,org.springframework.core.annotation.AnnotationFilter)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.JumboEnumSet: int size()>
<java.security.Provider: void implPutAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Object: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.Self: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: void <init>(javax.sql.DataSource)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.Hashtable$KeySet: void clear()>-><java.security.Provider: void clear()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: void <init>(javax.sql.DataSource)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><org.jruby.RubyHash: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: java.util.List subList(int,int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.MethodParameter: java.lang.annotation.Annotation[] getMethodAnnotations()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.locale.BaseLocale$Key: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.javasupport.JavaArray: int hashCode()>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.WeakHashMap$Values: void clear()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier getStoredCrossSiteScriptingVerifier()>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>
<org.springframework.security.core.context.SecurityContextImpl: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><io.undertow.util.HeaderValues: void clear()>
<org.springframework.http.HttpHeaders: java.util.List remove(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object remove(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound: int hashCode()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.cia.CIAQuiz: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>-><com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getValue()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<io.undertow.util.HeaderValues: java.lang.String set(int,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: java.lang.String toString()>-><com.nulabinc.zxcvbn.matchers.Keyboard$Position: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.text.AttributeEntry: java.lang.Object getKey()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.TreeMap$Values: int size()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hibernate.metamodel.model.domain.NavigableRole: int hashCode()>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: java.lang.String getSha256(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.HashingAssignment: java.lang.String getSha256(javax.servlet.http.HttpServletRequest)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.MonthDay: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.jar.Attributes: java.util.Set entrySet()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge7.Assignment7: org.springframework.http.ResponseEntity resetPassword(java.lang.String)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.RegularEnumSet: int size()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.HashMap$Values: int size()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: java.util.ListIterator listIterator()>-><io.undertow.util.HeaderValues: java.util.ListIterator iterator(int,boolean)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.BitSet: int hashCode()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.HashMap$Values: void clear()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: java.lang.String getString()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.sql.Timestamp: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: void offerLastMultiValue(java.lang.String,int,java.lang.String[])>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.HashMap$Values: int size()>
<com.google.common.collect.Multimaps$UnmodifiableListMultimap: com.google.common.collect.Multimap delegate()>-><com.google.common.collect.Multimaps$UnmodifiableListMultimap: com.google.common.collect.ListMultimap delegate()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword getResetLinkAssignmentForgotPassword()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForConstant: boolean equals(java.lang.Object)>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.javasupport.JavaArray: boolean equals(java.lang.Object)>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.LocalVariable: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<javax.net.ssl.SNIHostName: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.text.AttributeEntry: java.lang.Object getKey()>
<java.util.Hashtable: java.lang.String toString()>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.lang.Object: void <init>()>
<javax.security.auth.Subject$SecureSet$6: void <init>(javax.security.auth.Subject$SecureSet,java.util.Iterator)>-><java.lang.Object: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int hashCode()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><org.springframework.core.annotation.MissingMergedAnnotation: org.springframework.core.annotation.MergedAnnotation withNonMergedAttributes()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.net.Inet6Address: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.Conventions: java.lang.String pluralize(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.chrono.ISOChronology: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.text.AttributeEntry: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.jsonwebtoken.impl.JwtMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.net.URL: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.AbstractServerHttpResponse: void <init>(org.springframework.core.io.buffer.DataBufferFactory,org.springframework.http.HttpHeaders)>-><java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isFinal()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.locale.BaseLocale: int hashCode()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateNonEmpty(io.undertow.util.HttpString,java.lang.Object[],int,int,java.lang.Object)>-><io.undertow.util.HeaderValues: void <init>(io.undertow.util.HttpString)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.ZoneOffset: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.method.ParameterDescription$AbstractBase: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.FloatNode: int hashCode()>
<java.util.Collections$SynchronizedCollection: boolean isEmpty()>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.x509.RDN: boolean equals(java.lang.Object)>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.owasp.webgoat.lessons.Assignment: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps: com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps$11: void <init>(com.google.common.collect.Maps$EntryTransformer)>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.aop.framework.AdvisedSupport: void addInterface(java.lang.Class)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><java.lang.String: int length()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.IdentityHashMap$KeySet: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.jar.Attributes$Name: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Vector$Itr: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.http.server.reactive.ReactorServerHttpResponse: void <init>(reactor.netty.http.server.HttpServerResponse,org.springframework.core.io.buffer.DataBufferFactory)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.IdentityHashMap$KeySet: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.WeakHashMap$KeySet: void clear()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Short: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.http.server.reactive.NettyHeadersAdapter: void add(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: void add(java.lang.String,java.lang.String)>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.util.ObjectIdentifier: int hashCode()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$SynchronizedList: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.HashMap$Values: void clear()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.FrameworkServlet: void setApplicationContext(org.springframework.context.ApplicationContext)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.calendar.ZoneInfo: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.net.Inet6Address: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.crypto.CryptoPermission: int hashCode()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.flywaydb.core.internal.util.Pair: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyBoolean: int hashCode()>
<com.google.common.collect.AbstractMapEntry: java.lang.String toString()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: int size()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<io.undertow.server.handlers.cache.LRUCache$CacheEntry: void <init>(java.lang.Object,java.lang.Object,long)>-><java.lang.Object: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.Row: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Double: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.ArrayDeque: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.base.AbstractDuration: int hashCode()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.RubyArray$RubyArrayConversionIterator: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.text.PatternEntry: int hashCode()>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.AbstractList$Itr: void remove()>
<java.util.AbstractList: void clear()>-><java.util.SubList: int size()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues: java.util.ListIterator listIterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.web.method.ControllerAdviceBean: int hashCode()>
<com.fasterxml.jackson.core.exc.StreamReadException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String)>-><com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.classmate.util.ClassKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><io.undertow.util.HeaderValues: int size()>
<org.jruby.javasupport.JavaClass: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.xnio.OptionMap: boolean get(org.xnio.Option,boolean)>-><java.lang.Boolean: boolean booleanValue()>
<org.owasp.webgoat.csrf.ForgedReviews: void <init>()>-><net.bytebuddy.description.type.TypeList$Generic$Empty: void <init>()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.aop.support.AbstractPointcutAdvisor: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.TemporaryVariable: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.path_traversal.ProfileUploadRetrieval getProfileUploadRetrieval()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.RubyHash$BaseIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.Fixnum: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.io.support.EncodedResource: int hashCode()>
<org.springframework.util.MimeType: void <init>(java.lang.String,java.lang.String,java.util.Map)>-><org.springframework.util.LinkedCaseInsensitiveMap: int size()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.StringCharacterIterator: int hashCode()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.TreeSet: int size()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: int executeUpdate(java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.UnboxedFixnum: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.MonthDay: boolean equals(java.lang.Object)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation synthesizeAnnotation(java.lang.annotation.Annotation,java.lang.reflect.AnnotatedElement)>-><org.springframework.core.annotation.MergedAnnotation: org.springframework.core.annotation.MergedAnnotation from(java.lang.Object,java.lang.annotation.Annotation)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getContentType()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<java.util.stream.SortedOps$RefSortingSink: void end()>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.awt.geom.Point2D: int hashCode()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.IntervalMonthData: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.ObjectNode: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: java.lang.String getPassword()>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.Maps$TransformedEntriesMap: java.util.Set keySet()>-><java.util.Collections$UnmodifiableMap: java.util.Set keySet()>
<com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>-><com.google.common.collect.Maps: com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getKey()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><io.undertow.util.HeaderMap: io.undertow.util.HeaderMap put(io.undertow.util.HttpString,java.lang.String)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: void setValue(java.lang.Object)>-><io.undertow.util.HeaderValues: java.lang.Object set(int,java.lang.Object)>
<java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.MBeanParameterInfo: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType: boolean equals(java.lang.Object)>
<java.util.stream.SortedOps$SizedRefSortingSink: void end()>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.jruby.RubyArray: void clear()>-><org.jruby.util.collections.StringArraySet: org.jruby.runtime.builtin.IRubyObject rb_clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.base.AbstractPeriod: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.template.SampleAttack: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: void serialize(java.lang.Enum,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.List: void sort(java.util.Comparator)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.asm.MemberSubstitution: int hashCode()>
<java.security.Provider: void implPutAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.concurrent.ConcurrentHashMap: int hashCode()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.csrf.CSRFFeedback getCSRFFeedback()>
<java.lang.Object: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment: void <init>()>-><net.bytebuddy.description.type.TypeList$Generic$Empty: void <init>()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: boolean isSingleton(java.lang.String)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.ArrayNode: int hashCode()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: boolean containsKey(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$UnmodifiableMultimap: void clear()>-><java.lang.UnsupportedOperationException: void <init>()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<io.undertow.util.HeaderValues: java.lang.String pollFirst()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BinaryNode: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.x509.GeneralName: int hashCode()>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.runtime.Arity: int hashCode()>
<sun.security.ssl.SSLSessionContextImpl$1: java.lang.String run()>-><java.lang.System: java.lang.String getProperty(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyFixnum: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1: boolean isEmpty()>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.String determineHighestPriorityCandidate(java.util.Map,java.lang.Class)>-><java.lang.Integer: int intValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.Instant: boolean equals(java.lang.Object)>
<java.util.HashMap: int hash(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.jruby.util.collections.StringArraySet: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.idor.IDORLogin: void <init>()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.AttributeAccessorSupport: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Collections$SingletonList: int size()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Hashtable$EntrySet: int size()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: int size()>
<sun.text.normalizer.CharTrie: int getSurrogateOffset(char,char)>-><sun.net.idn.StringPrep$StringPrepTrieImpl: int getFoldingOffset(int)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint: void <init>()>-><net.bytebuddy.description.type.TypeList$Generic$Empty: void <init>()>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><java.util.AbstractCollection: boolean contains(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Hashtable$EntrySet: int size()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Collections$UnmodifiableCollection: void clear()>
<com.google.common.collect.ForwardingMultimap: boolean isEmpty()>-><com.google.common.collect.Multimaps$UnmodifiableListMultimap: com.google.common.collect.Multimap delegate()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet: boolean isEmpty()>
<java.util.HashMap$Node: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.google.common.collect.Multimaps$Keys: java.util.Iterator entryIterator()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.JumboEnumSet: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.imageio.ImageTypeSpecifier$Interleaved: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: void clear()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.idor.IDORDiffAttributes getIDORDiffAttributes()>
<com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>-><com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.users.RegistrationController: java.lang.String showForm(org.owasp.webgoat.users.UserForm)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<sun.security.ssl.SecureKey: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.jruby.util.collections.WeakHashSet: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.chrono.ISOChronology: int hashCode()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyMatchData: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.util.RegexpOptions: int hashCode()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.TimeData: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getValue()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$EmptyMap: int hashCode()>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyNil: int hashCode()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.jruby.javasupport.JavaClass: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.annotation.Annotation,java.lang.Class)>-><java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement()>
<com.google.common.collect.Maps$TransformedEntriesMap: void <init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps$ImprovedAbstractMap: void <init>()>
<io.undertow.util.CopyOnWriteMap: int size()>-><java.util.Collections$EmptyMap: int size()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.ByteArrayResource: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.util.collections.WeakHashSet: boolean isEmpty()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(javax.servlet.http.HttpServletRequest)>-><org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.EnumMap$1: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.io.File: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: void <init>()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.validation.BindException: java.util.List getAllErrors()>-><org.springframework.validation.BindException: java.util.List getAllErrors()>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.CompositeType: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.WeakHashMap$Values: int size()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType getContentType()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: java.lang.String getString()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.HashSet: int size()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a getSqlInjectionLesson5a()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfParameterizedType: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.SimpleTimeZone: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfGenericArray: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: void <init>(io.undertow.util.HttpString)>-><java.util.AbstractCollection: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Enum: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForAnnotationDescription: int hashCode()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.AbstractMap: int hashCode()>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: boolean isEmpty()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ServletCookieAdaptor: void <init>(javax.servlet.http.Cookie)>-><java.lang.Object: void <init>()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.io.InputStreamResource: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.AbstractCollection: java.lang.String toString()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$UnmodifiableSet: int hashCode()>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hibernate.engine.query.spi.sql.NativeSQLQuerySpecification: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin getSqlInjectionChallengeLogin()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.ArrayType: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.io.ByteArrayResource: int hashCode()>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.crypto.SecureDefaultsAssignment getSecureDefaultsAssignment()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyModule: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jcodings.Encoding: boolean equals(java.lang.Object)>
<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>-><java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.asm.MemberSubstitution$Replacement$ForElementMatchers$Factory: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.lang.ProcessEnvironment$StringValues: void clear()>-><java.util.HashMap$Values: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.BuddhistCalendar: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.asm.Type: boolean equals(java.lang.Object)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SingletonList: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: void clear()>
<io.undertow.server.handlers.cache.LRUCache: void bumpAccess(io.undertow.server.handlers.cache.LRUCache$CacheEntry)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: java.lang.Object claimToken()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.util.DisabledAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>-><java.util.RegularEnumSet: boolean isEmpty()>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: int size()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: java.lang.Object remove(java.lang.Object)>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver: org.springframework.beans.factory.BeanFactory getBeanFactory()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.awt.Color: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.HashSet: void clear()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: void clear()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$EmptyList: boolean isEmpty()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<io.undertow.server.handlers.cache.LRUCache$CacheEntry: java.lang.Object claimToken()>-><java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.UUID: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.representations.BasicBlock: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateNonEmpty(io.undertow.util.HttpString,java.lang.Object[],int,int,java.lang.Object)>-><io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateEntry(io.undertow.util.HttpString)>
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)>-><java.text.SimpleDateFormat: java.lang.Object clone()>
<org.springframework.web.context.support.ServletContextAwareProcessor: javax.servlet.ServletContext getServletContext()>-><org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: javax.servlet.ServletConfig getServletConfig()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getKey()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLSessionImpl: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.jruby.ir.IRBuilder: org.jruby.ir.operands.Operand buildFixnumCase(org.jruby.ast.CaseNode)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.nulabinc.zxcvbn.matchers.Keyboard$Position: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.sql.Timestamp: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.MBeanAttributeInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getValue()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.javasupport.JavaConstructor: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.users.Scoreboard: void <init>(org.owasp.webgoat.users.UserTrackerRepository,org.owasp.webgoat.users.UserRepository,org.owasp.webgoat.session.Course,org.owasp.webgoat.i18n.PluginMessages)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.IntNode: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.Instant: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: int size()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfGenericArray: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.stream.StreamOpFlag: int fromCharacteristics(java.util.Spliterator)>-><java.util.ArrayDeque$DeqSpliterator: int characteristics()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.io.ByteArrayResource: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.lang.Byte: int hashCode()>
<org.jruby.javasupport.JavaArray: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$EntrySet: int size()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.EnumMap$Values: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.flywaydb.core.internal.resource.classpath.ClassPathResource: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.JapaneseImperialCalendar: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><ch.qos.logback.core.subst.Token: int hashCode()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.ObjectInstance: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer parsePath(java.lang.String)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>-><java.util.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.asm.ConstantDynamic: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.method.ControllerAdviceBean: int hashCode()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>-><java.security.Provider$ServiceKey: void <init>(java.lang.String,java.lang.String,boolean,java.security.Provider$1)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.service.LabelDebugService: void <init>(org.owasp.webgoat.session.LabelDebugger)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.chrono.BuddhistChronology: int hashCode()>
<org.owasp.webgoat.lessons.Hint: int hashCode()>-><org.owasp.webgoat.lessons.Hint: java.lang.String getAssignmentPath()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.ObjectName: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><javax.servlet.http.Cookie: int getVersion()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution$Replacement$Factory$Compound: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Locale: int hashCode()>
<org.jruby.RubyModule: boolean defineAnnotatedMethod(java.lang.String,java.util.List,org.jruby.runtime.MethodFactory)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<com.fasterxml.jackson.databind.SerializerProvider: java.text.DateFormat _dateFormat()>-><java.text.SimpleDateFormat: java.lang.Object clone()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><io.undertow.servlet.spec.ContentTypeInfo: java.lang.String getContentType()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions getBypassRestrictionsFieldRestrictions()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object extractValue(org.springframework.core.annotation.AnnotationAttributes)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.RubyArray$RubyArrayConversionIterator: java.lang.Object next()>
<org.jruby.ir.representations.IGVCFGVisitor: void visitEdges(org.jruby.ir.representations.CFG)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: void <init>(javax.sql.DataSource)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.LandingAssignment: org.owasp.webgoat.assignments.AttackResult click(java.lang.String)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.Boolean: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords: void <init>(org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: void <init>()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.google.common.collect.Maps$TransformedEntriesNavigableMap: void <init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps$TransformedEntriesSortedMap: void <init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.zip.ZipEntry: int hashCode()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.io.ObjectStreamClass$FieldReflectorKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.nulabinc.zxcvbn.matchers.SpatialMatcher: java.util.List spatialMatchHelper(java.lang.String,com.nulabinc.zxcvbn.matchers.Keyboard)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.YearMonth: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy(java.lang.ClassLoader)>
<io.undertow.util.HeaderMap: void resize()>-><java.lang.Integer: int bitCount(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.util.HeaderValues: void clearInternal()>-><java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<java.text.AttributeEntry: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.google.common.collect.ForwardingMultimap: boolean isEmpty()>-><com.google.common.collect.ForwardingMultimap: boolean isEmpty()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Vector: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><org.flywaydb.core.internal.database.base.Schema: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity checkDebuggingStatus(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.service.LabelDebugService: org.springframework.http.ResponseEntity checkDebuggingStatus()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: java.lang.String getOrDeduceName(java.lang.Object)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<org.jruby.RubyArray: void clear()>-><org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyThread: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.google.common.collect.Maps$Values: boolean isEmpty()>-><java.util.AbstractMap: boolean isEmpty()>
<org.springframework.http.server.reactive.AbstractServerHttpResponse: void <init>(org.springframework.core.io.buffer.DataBufferFactory,org.springframework.http.HttpHeaders)>-><java.lang.Object: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.lang.Object: java.lang.Class getClass()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<io.undertow.server.handlers.cache.LRUCache$CacheEntry: java.lang.Object clearToken()>-><java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.base.AbstractPartial: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps: com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.core.annotation.TypeMappedAnnotations: java.util.stream.Stream stream(java.lang.Class)>-><org.springframework.core.annotation.TypeMappedAnnotations: java.util.Spliterator spliterator(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: void <init>(java.lang.Object,java.lang.Object,long,io.undertow.server.handlers.cache.LRUCache$1)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.net.IDN$1: java.lang.Object run()>-><java.net.IDN$1: java.io.InputStream run()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.ImmutableDescriptor: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.jar.Manifest: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingQuiz: boolean[] getResults()>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.jruby.specialized.RubyArrayOneObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyArray: void modifyCheck()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.HashMap$Node: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.mailbox.MailboxController: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email)>
<org.springframework.http.server.reactive.ServerHttpResponseDecorator: void <init>(org.springframework.http.server.reactive.ServerHttpResponse)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.template.SampleAttack getSampleAttack()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.util.unit.DataSize: int hashCode()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.Boolean: boolean equals(java.lang.Object)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.lang.Integer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.EnumMap: int entryHashCode(int)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.RubyArray: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.String toString()>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.zone.ZoneOffsetTransition: int hashCode()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>-><java.lang.Object: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.math.BigInteger: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.io.ObjectInputStream$PeekInputStream: int peek()>-><org.jruby.RubyFile$2: int read()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.io.support.EncodedResource: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.lang.Object: java.lang.String toString()>-><java.lang.Enum: int hashCode()>
<javax.net.ssl.SNIHostName: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.owasp.webgoat.password_reset.PasswordResetEmail: int hashCode()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.crypto.HashingAssignment: void <init>()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.jsontype.TypeDeserializer findPropertyContentTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForEnumerationDescription: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.TextNode: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.Maps$TransformedEntriesMap: java.util.Set keySet()>-><com.google.common.collect.Maps$TransformedEntriesMap: java.util.Set keySet()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.representations.BasicBlock: int hashCode()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.reflect.Proxy$KeyX: int hashCode()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$UnmodifiableList: int hashCode()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: java.lang.String getString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$KeySet: java.util.Iterator iterator()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.method.ParameterDescription$AbstractBase: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.LocalTime: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.HsqlException: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.AbstractSet: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.jruby.util.collections.StringArraySet: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><java.util.HashSet: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.validation.AbstractBindingResult: int hashCode()>-><org.springframework.validation.AbstractBindingResult: java.lang.String getObjectName()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.EnumMap$EntrySet: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLSessionImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.time.temporal.WeekFields: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext get(javax.servlet.http.HttpServletRequest)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.javasupport.JavaObject: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.imageio.ImageTypeSpecifier$Interleaved: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.flywaydb.core.api.Location: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.IntervalSecondData: boolean equals(java.lang.Object)>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.runtime.Arity: boolean equals(java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest)>-><org.springframework.validation.BindException: boolean hasErrors()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$Record: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.owasp.webgoat.webwolf_introduction.Email: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<java.lang.reflect.WeakCache: java.lang.Object get(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: java.lang.Object apply(java.lang.Object,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.lang.ProcessEnvironment$ExternalData: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.ArrayDeque$DeqSpliterator: int characteristics()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.http_basics.HttpBasicsQuiz: void <init>()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.NullNode: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.javasupport.JavaMethod: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.IdentityHashMap$EntrySet: void clear()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.TreeMap$EntrySet: int size()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$Values: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.chrono.BasicChronology: int hashCode()>
<java.util.EnumMap$EntrySet: void clear()>-><java.util.EnumMap: void clear()>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.misc.Signal: boolean equals(java.lang.Object)>
<com.nulabinc.zxcvbn.matchers.SpatialMatcher: java.util.List spatialMatchHelper(java.lang.String,com.nulabinc.zxcvbn.matchers.Keyboard)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.IRScope: int hashCode()>
<io.undertow.server.handlers.cache.LRUCache$CacheEntry: int hit()>-><java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: boolean weakCompareAndSet(java.lang.Object,int,int)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyBasicObject: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.HashMap$KeySet: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.BlobDataID: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>
<java.io.ObjectInputStream$PeekInputStream: int read()>-><org.jruby.RubyFile$2: int read()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.util.Spliterators$2Adapter: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hibernate.engine.query.spi.sql.NativeSQLQuerySpecification: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.apache.logging.log4j.Level: int hashCode()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedList: void clear()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.RuleBasedCollator: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.collect.Maps$Values: void clear()>-><com.google.common.collect.Maps$Values: java.util.Map map()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.text.FieldPosition: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.logging.log4j.spi.Provider: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><com.thoughtworks.xstream.core.util.WeakCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.org.objectweb.asm.Type: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubySymbol: int hashCode()>
<javax.management.openmbean.TabularDataSupport: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray(java.lang.Object[])>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.Object getDetails()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.security.authentication.AnonymousAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyString: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Collections$EmptySet: int size()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.ArrayList: int size()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQueryAvailability(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: org.owasp.webgoat.assignments.AttackResult injectableQueryAvailability(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><java.text.AttributeEntry: int hashCode()>
<io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: java.lang.String getString()>
<org.springframework.http.server.DefaultRequestPath: void validateContextPath(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.util.ByteList: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.base.AbstractInstant: int hashCode()>
<org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.Self: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.beans.factory.InjectionPoint: java.lang.annotation.Annotation[] getAnnotations()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><io.undertow.util.HeaderValues$1: void remove()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.TreeMap$Entry: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.net.URL: int hashCode()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.crypto.SigningAssignment getSigningAssignment()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.ObjectName: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeSet: boolean isEmpty()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Vector: void removeRange(int,int)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>-><io.undertow.util.HeaderValues: boolean contains(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.TreeSet: int size()>
<java.util.Hashtable: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><java.util.EnumMap$1: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>
<java.util.TreeMap$EntrySet: void clear()>-><java.util.TreeMap: void clear()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: void <init>(javax.sql.DataSource)>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><io.micrometer.core.instrument.ImmutableTag: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><ch.qos.logback.core.joran.spi.ElementSelector: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<java.util.EnumMap$KeySet: void clear()>-><java.util.EnumMap: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Vector: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.util.RegexpOptions: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: void <init>()>-><org.owasp.webwolf.mailbox.MailboxController: void <init>(org.owasp.webwolf.mailbox.MailboxRepository)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.slf4j.helpers.SubstituteLogger: int hashCode()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: int getRow()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.annotation.AnnotationValue$ForTypeDescription: int hashCode()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: void <init>()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.SymbolProc: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.asm.Type: int hashCode()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.EnumMap$KeySet: int size()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque: boolean add(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.IdentityHashMap$Values: int size()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: java.lang.String getString()>
<com.google.common.collect.Maps$TransformedEntriesSortedMap: void <init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps$TransformedEntriesMap: void <init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.ArrayDeque: boolean add(java.lang.Object)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext get(javax.servlet.http.HttpServletRequest)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.util.LinkedMultiValueMap: int hashCode()>
<java.util.AbstractList: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.IntervalMonthData: boolean equals(java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.ResolvableType$SyntheticParameterizedType: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.PropertyPermission: int hashCode()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.thoughtworks.xstream.core.util.WeakCache: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: int size()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.UnboxedFixnum: int hashCode()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.net.Inet4Address: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.thoughtworks.xstream.io.path.Path: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.MBeanNotificationInfo: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.LocalDate: boolean equals(java.lang.Object)>
<org.jruby.ir.representations.IGVCFGVisitor: void visitEdges(org.jruby.ir.representations.CFG)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.method.MethodDescription$AbstractBase: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.owasp.webgoat.password_reset.PasswordResetEmail: boolean equals(java.lang.Object)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.DateTimeZone: int hashCode()>
<io.undertow.util.HeaderValues$1: void set(java.lang.String)>-><java.lang.IllegalStateException: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$SingletonSet: int size()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeySet: java.util.Iterator iterator()>
<org.springframework.validation.BindException: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Byte: int hashCode()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hibernate.engine.query.spi.QueryPlanCache$HQLQueryPlanKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractCollection: void clear()>-><jnr.constants.ConstantSet$ConstantIterator: boolean hasNext()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.validation.ObjectError: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.lang.Object: java.lang.String toString()>-><java.beans.PropertyDescriptor: int hashCode()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Locale$LocaleKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.method.ParameterDescription$AbstractBase: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.sql.DriverInfo: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.slf4j.helpers.SubstituteLogger: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap$LinkedEntrySet: void clear()>-><java.util.LinkedHashMap: void clear()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.concurrent.ArrayBlockingQueue: void clear()>-><java.util.concurrent.ArrayBlockingQueue$Itrs: void queueIsEmpty()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><org.jruby.RubyArray: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<org.jruby.javasupport.JavaClass: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: int hashCode()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><jnr.constants.ConstantSet: int size()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setStatusCode(int)>-><java.lang.RuntimeException: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.util.DerValue: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords: void <init>(org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a)>
<org.springframework.core.Conventions: java.lang.Class getClassForValue(java.lang.Object)>-><java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>-><java.util.ArrayDeque: boolean remove(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.CodeSource: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.zone.ZoneOffsetTransitionRule: int hashCode()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webwolf.FileServer$$InterceptorProxy: void <init>()>
<org.springframework.http.server.reactive.ReactorServerHttpResponse: void <init>(reactor.netty.http.server.HttpServerResponse,org.springframework.core.io.buffer.DataBufferFactory)>-><org.springframework.http.server.reactive.AbstractServerHttpResponse: void <init>(org.springframework.core.io.buffer.DataBufferFactory,org.springframework.http.HttpHeaders)>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><com.google.common.collect.Maps$EntrySet: int size()>
<java.lang.Object: java.lang.String toString()>-><com.thoughtworks.xstream.core.util.FastField: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.flywaydb.core.internal.database.base.Schema: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.io.UrlResource: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Hashtable$KeySet: void clear()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.servlet.spec.SecurityActions$2: io.undertow.servlet.spec.HttpSessionImpl run()>-><io.undertow.servlet.spec.HttpSessionImpl: io.undertow.servlet.spec.HttpSessionImpl forSession(io.undertow.server.session.Session,javax.servlet.ServletContext,boolean)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: java.util.List getAllErrors()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.crypto.CryptoAllPermission: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.springframework.core.io.buffer.LimitedDataBufferList: void clear()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.CharacterType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.OffsetDateTime: int hashCode()>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.time.format.DateTimeFormatterBuilder$PrefixTree getTree(java.time.format.DateTimeParseContext)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForConstant: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><org.jruby.RubyHash$BaseCollection: int size()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jsoup.helper.ChangeNotifyingArrayList: void clear()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.validation.BindException: boolean hasErrors()>-><org.springframework.validation.BindException: boolean hasErrors()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.springframework.validation.BindException: java.lang.String getMessage()>
<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>-><java.util.ArrayDeque: boolean add(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.FilterInvocation: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.jruby.util.io.SelectorPool: void returnToPool(java.nio.channels.Selector)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.security.access.SecurityConfig: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$EmptyList: int size()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><io.undertow.util.HeaderValues: int size()>
<org.jruby.javasupport.JavaClass: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: int getRow()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI resolveBaseUrl(reactor.netty.http.server.HttpServerRequest)>-><java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.user.RegistrationController: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray(java.lang.Object[])>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.cglib.core.ClassInfo: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.Expression: int hashCode()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange addResponseWrapper(io.undertow.server.ConduitWrapper)>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void writeValueToImplicitCollection(java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hibernate.engine.query.spi.sql.NativeSQLQuerySpecification: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Hashtable$ValueCollection: void clear()>-><java.util.Hashtable: void clear()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.AbstractMap: void clear()>-><io.micrometer.shaded.org.pcollections.IntTreePMap: java.util.Set entrySet()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: boolean hasWaiters()>-><java.lang.IllegalMonitorStateException: void <init>()>
<com.google.common.collect.AbstractMapEntry: java.lang.String toString()>-><java.lang.String: int length()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyModule: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet: java.util.Iterator iterator()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<org.owasp.webwolf.mailbox.MailboxController: org.springframework.web.servlet.ModelAndView mail()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$EmptyList: int hashCode()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.List resolveManagedList(java.lang.Object,java.util.List)>-><io.undertow.util.HeaderValues: int size()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.jruby.RubyArray: void clear()>-><org.jruby.specialized.RubyArrayTwoObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.dom4j.tree.BackedList: void clear()>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.org.objectweb.asm.Type: int hashCode()>
<java.util.List: void sort(java.util.Comparator)>-><io.undertow.util.HeaderValues: java.util.ListIterator listIterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.asm.ConstantDynamic: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.sun.jmx.mbeanserver.NamedObject: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.Collections$UnmodifiableCollection: boolean isEmpty()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.AbstractList: void clear()>-><com.thoughtworks.xstream.converters.collections.TreeSetConverter$1$1: int size()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<javax.net.ssl.SNIHostName: int hashCode()>-><java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.io.UrlResource: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.chrono.GJChronology: int hashCode()>
<org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>-><org.springframework.core.Conventions: java.lang.String pluralize(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.hsqldb.HsqlNameManager$HsqlName: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.lang.reflect.Constructor: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.asm.Handle: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyFixnum: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.util.LinkedHashMap: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.Proxy$KeyX: int hashCode()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.TransformedIterator: java.lang.Object next()>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.chrono.GJCacheKey: int hashCode()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.SimpleMailAssignment: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.javasupport.JavaClass: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.chrono.AbstractChronology: int hashCode()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<io.undertow.util.HeaderValues: java.lang.String[] toArray()>-><java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>
<org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyArray: void modifyCheck()>
<org.springframework.core.style.DefaultToStringStyler: void styleFieldStart(java.lang.StringBuilder,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.chrono.GJChronology: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.EnumMap$KeySet: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.EnumMap$EntryIterator$Entry: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.reflect.Proxy$Key2: int hashCode()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.nulabinc.zxcvbn.matchers.Keyboard$Position: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.flywaydb.core.internal.resolver.ResolvedMigrationImpl: int hashCode()>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String getServletName()>-><org.springframework.boot.web.servlet.DynamicRegistrationBean: java.lang.String getOrDeduceName(java.lang.Object)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.calendar.Era: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.jruby.specialized.RubyArrayOneObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.specialized.RubyArraySpecialized: boolean packed()>
<org.springframework.validation.BindException: java.util.List getAllErrors()>-><org.springframework.validation.AbstractBindingResult: java.util.List getAllErrors()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.challenges.challenge7.Assignment7 getAssignment7()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.BeanExpressionContext: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<io.undertow.util.HeaderValues: java.lang.String removeLast()>-><java.util.NoSuchElementException: void <init>()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.ScopeModule: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.PropertyPermission: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues$1: java.lang.Object next()>-><io.undertow.util.HeaderValues$1: java.lang.String next()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.PatternEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Hashtable$ValueCollection: int size()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: boolean equals(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><io.undertow.util.CopyOnWriteMap: int size()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Maps: java.util.SortedMap transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Platform: java.util.SortedMap mapsTransformEntriesSortedMap(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<org.jruby.ir.IRBuilder$2: int compare(java.util.Map$Entry,java.util.Map$Entry)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<org.springframework.context.expression.BeanFactoryResolver: java.lang.Object resolve(org.springframework.expression.EvaluationContext,java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.SecurityQuestionAssignment: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.jruby.javasupport.JavaArray: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<io.undertow.server.HttpServerExchange: void addResponseCommitListener(io.undertow.server.ResponseCommitListener)>-><io.undertow.server.HttpServerExchange$6: void <init>(io.undertow.server.HttpServerExchange,io.undertow.server.ResponseCommitListener)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ShopEndpoint: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String)>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.awt.image.PackedColorModel: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.factory.support.NullBean: int hashCode()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><org.jruby.runtime.ObjectSpace$ObjectGroup: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$SynchronizedList: int hashCode()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object remove(java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: java.lang.Object clearToken()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution$Replacement$ForElementMatchers$Factory: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.springframework.aop.framework.CglibAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>-><java.lang.Class: java.lang.String getName()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.AbstractList: void clear()>-><java.util.Collections$SingletonList: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.awt.Font: boolean equals(java.lang.Object)>
<org.jruby.javasupport.binding.InterfaceInitializer: void setupInterfaceMethods(java.lang.Class,org.jruby.javasupport.binding.Initializer$State)>-><io.undertow.util.HeaderValues: int size()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.RubyHash$BaseIterator: java.lang.Object next()>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Vector: void clear()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.AttributeEntry: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.Label: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getValue()>
<org.springframework.expression.spel.ast.OperatorBetween: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.HeaderValues: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Thread$WeakClassKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.servlet.handlers.ServletRequestContext: io.undertow.servlet.handlers.ServletRequestContext current()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.RowType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReduceOps$4ReducingSink: void accept(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI resolveBaseUrl(reactor.netty.http.server.HttpServerRequest)>-><reactor.netty.http.server.HttpServerRequest: io.netty.handler.codec.http.HttpHeaders requestHeaders()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.RubyHash$BaseCollection: java.util.Iterator iterator()>
<com.google.common.collect.Maps: java.util.NavigableMap transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.collect.Maps$TransformedEntriesNavigableMap: void <init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object get(java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<com.google.common.collect.Multisets$AbstractEntry: void <init>()>-><java.lang.Object: void <init>()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.http.HttpEntity: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: void <init>(javax.sql.DataSource)>
<org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>-><org.springframework.http.server.reactive.NettyHeadersAdapter: io.netty.handler.codec.http.HttpHeaders access$100(org.springframework.http.server.reactive.NettyHeadersAdapter)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.LinkedHashMap$LinkedKeySet: void clear()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Long: int hashCode()>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><org.springframework.validation.AbstractBindingResult: java.util.List getAllErrors()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.runtime.Block: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.WeakHashMap$Entry: java.lang.Object getValue()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap: int hashCode()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Class getType(java.lang.String)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.Date: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.util.Set entrySet()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.asm.Type: int hashCode()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.DateTimeType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.AttributeEntry: boolean equals(java.lang.Object)>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ServletCookieAdaptor: io.undertow.server.handlers.Cookie setVersion(int)>-><javax.servlet.http.Cookie: void setVersion(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<java.util.WeakHashMap$KeySet: void clear()>-><java.util.WeakHashMap: void clear()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String getCollectionTypeString(java.util.Collection)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.util.RecursiveComparator$Pair: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: boolean isEmpty()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.Maps$11: void <init>(com.google.common.collect.Maps$EntryTransformer)>-><java.lang.Object: void <init>()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.HashMap$Node: boolean equals(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object findValue(java.lang.annotation.Annotation[])>-><org.springframework.core.annotation.AnnotatedElementUtils: org.springframework.core.annotation.AnnotationAttributes getMergedAnnotationAttributes(java.lang.reflect.AnnotatedElement,java.lang.Class)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><io.undertow.util.HeaderValues: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.javasupport.JavaMethod: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><io.undertow.servlet.spec.HttpServletResponseImpl: boolean isCommitted()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: void <init>()>-><org.owasp.webwolf.FileServer: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BigIntegerNode: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson1: void <init>()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>-><java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.SymbolProc: boolean equals(java.lang.Object)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection$1: void <init>(java.util.Collections$UnmodifiableCollection)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.UTCDateTimeZone: int hashCode()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>-><com.google.common.collect.Multimaps$Keys$1$1: int getCount()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getValue()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.ArrayList: void clear()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.DoubleNode: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: java.lang.String removeFirst()>-><io.undertow.util.HeaderValues: java.lang.String pollFirst()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.RuleBasedCollator: int hashCode()>
<io.undertow.util.HeaderValues: java.util.List subList(int,int)>-><io.undertow.util.HeaderValues: java.lang.String get(int)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateNonEmpty(io.undertow.util.HttpString,java.lang.Object[],int,int,java.lang.Object)>-><java.lang.SecurityException: void <init>(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.factory.config.DependencyDescriptor: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<org.springframework.validation.AbstractBindingResult: int hashCode()>-><java.lang.String: int hashCode()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.springframework.core.style.ToStringCreator: void printFieldSeparatorIfNecessary()>-><org.springframework.core.style.DefaultToStringStyler: void styleFieldSeparator(java.lang.StringBuilder)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><io.jsonwebtoken.impl.JwtMap: boolean isEmpty()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.jruby.javasupport.JavaObject: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.logging.Level: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.BooleanNode: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.YearMonth: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.stored.StoredXssComments: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String)>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Maps$EntrySet: boolean isEmpty()>-><java.util.AbstractMap: boolean isEmpty()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.AbstractMap$1$1: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><org.jruby.runtime.ObjectSpace$ObjectGroup: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.Fixnum: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForConstant: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: void clear()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.TimestampData: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.bind.ServletRequestBindingException: void <init>(java.lang.String,java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: void <init>(java.lang.String,java.lang.Throwable)>
<org.springframework.core.style.DefaultToStringStyler: void styleValue(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.math.BigDecimal: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$KeyIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>
<java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Class getType(java.lang.String)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.Salaries: java.util.List invoke()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.CompositeDataSupport: int hashCode()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.util.Collections$EmptyList: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$SubList: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>-><com.google.common.collect.Multimaps$Keys: java.util.Iterator entryIterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.javasupport.JavaArray: boolean equals(java.lang.Object)>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.security.Principal getUserPrincipal()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.ansi.Ansi8BitColor: boolean equals(java.lang.Object)>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: java.lang.String getString()>
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>-><java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.FloatNode: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><io.jsonwebtoken.impl.JwtMap: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.jruby.javasupport.JavaArray: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.jar.Attributes: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution: boolean equals(java.lang.Object)>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.dom4j.tree.BackedList: void clear()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: boolean equals(java.lang.Object)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Vector: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson1: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.TreeMap$KeySet: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<javax.net.ssl.SNIHostName: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.MBeanInfo: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$EntryIterator: java.lang.Object next()>
<sun.security.jca.ProviderList: java.security.Provider$Service getService(java.lang.String,java.lang.String)>-><java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.EnumMap$KeySet: void clear()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: void initAssignment(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadRetrieval: void initAssignment()>
<io.undertow.util.Rfc6265CookieSupport: void validateCookieValue(java.lang.String)>-><java.lang.Integer: java.lang.String toString(int)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.format.DecimalStyle: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(java.lang.Object)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.web.context.support.ServletContextResource: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getPath()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.jruby.NativeException: java.lang.String searchStackMessage(java.lang.Throwable)>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><org.springframework.http.server.DefaultPathContainer: java.util.List elements()>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>
<sun.text.normalizer.TrieIterator: void calculateNextSupplementaryElement(sun.text.normalizer.RangeValueIterator$Element)>-><sun.net.idn.StringPrep$StringPrepTrieImpl: int getFoldingOffset(int)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment getClientSideFilteringAssignment()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$EntrySet: void clear()>-><java.util.WeakHashMap: void clear()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>
<org.springframework.http.server.DefaultRequestPath: void <init>(java.net.URI,java.lang.String)>-><java.lang.Object: void <init>()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.DecimalFormatSymbols: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.flywaydb.core.internal.util.Pair: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: java.lang.String get(int)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<org.springframework.validation.BindException: boolean hasErrors()>-><org.springframework.validation.AbstractBindingResult: boolean hasErrors()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.controller.StartLesson: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.SubList$1: boolean hasNext()>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.method.ParameterDescription$AbstractBase: boolean equals(java.lang.Object)>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.security.Principal getUserPrincipal()>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: org.springframework.security.core.Authentication getAuthentication()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.JapaneseImperialCalendar: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: boolean execute()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.javasupport.JavaMethod: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.flywaydb.core.internal.schemahistory.AppliedMigration: int hashCode()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.EncodingAssignment: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint: org.springframework.http.ResponseEntity follow(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.ProtectionDomain$WeakProtectionDomainKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void setBeanName(java.lang.String)>
<java.util.stream.ForEachOps$ForEachTask: void compute()>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.crypto.SecureDefaultsAssignment: void <init>()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: boolean containsKey(java.lang.Object)>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.springframework.http.server.DefaultRequestPath: void validateContextPath(java.lang.String,java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.annotation.AnnotationValue$ForAnnotationDescription: int hashCode()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyMatchData: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.path_traversal.ProfileUploadFix getProfileUploadFix()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b getSqlInjectionLesson5b()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setStatusCode(int)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><ch.qos.logback.core.subst.Token: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: java.lang.String getString()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$2: void accept(java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.crypto.XOREncodingAssignment: void <init>()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.challenges.challenge5.Assignment5: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Hashtable: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Arrays$ArrayList: int size()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.cert.X509CRLEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeSet: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.flywaydb.core.internal.resource.classpath.ClassPathResource: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.security.Provider: void implPutAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.Provider$ServiceKey: int hashCode()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.util.List getValue()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2 getSqlInjectionLesson2()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.nio.charset.Charset: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.DurationFieldType$StandardDurationFieldType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5 getSqlInjectionLesson5()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.io.File: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.FrozenString: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hibernate.boot.model.relational.Namespace$Name: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><jnr.constants.ConstantSet$ConstantIterator: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><com.headius.invokebinder.Signature: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.ArrayNode: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.Maps$Values: boolean isEmpty()>
<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.io.ObjectStreamClass$WeakClassKey: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractList$Itr: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntrySet: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.InputStreamResource: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.util.List remove(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.type.TypeDescription$AbstractBase: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.imageio.ImageTypeSpecifier: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.context.support.ServletContextResource: int hashCode()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><jnr.constants.ConstantSet$ConstantIterator: java.lang.Object next()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque: boolean contains(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.asm.ConstantDynamic: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.MBeanConstructorInfo: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.x509.Extension: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult notUsed(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.util.Spliterators$1Adapter: java.lang.Object next()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.cert.Certificate: int hashCode()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.chrome_dev_tools.NetworkDummy: void <init>()>
<org.springframework.context.i18n.LocaleContextHolder: java.util.Locale getLocale(org.springframework.context.i18n.LocaleContext)>-><org.springframework.context.i18n.SimpleLocaleContext: java.util.Locale getLocale()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><sun.security.util.DerValue: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: java.lang.String getString()>
<java.lang.Object: java.lang.String toString()>-><org.hsqldb.types.IntervalSecondData: int hashCode()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>-><java.text.SimpleDateFormat: java.lang.String toPattern()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><org.springframework.core.style.ToStringCreator: org.springframework.core.style.ToStringCreator append(java.lang.String,java.lang.Object)>
<org.jruby.javasupport.JavaClass: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.field.UnsupportedDurationField: int hashCode()>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><io.undertow.server.handlers.cache.LRUCache: java.lang.Object get(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.server.AbstractServerConnection: org.xnio.OptionMap getUndertowOptions()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1: com.google.common.collect.Multiset$Entry transform(java.util.Map$Entry)>-><com.google.common.collect.Multimaps$Keys$1$1: void <init>(com.google.common.collect.Multimaps$Keys$1,java.util.Map$Entry)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.format.DecimalStyle: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.Type: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Package: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.beans.Introspector: void processPropertyDescriptors()>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyModule: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$KeySet: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.zone.ZoneRules: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: java.lang.Class getSuperclass()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.reflect.WeakCache$CacheValue: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><java.lang.Class: boolean isInterface()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.stream.ForEachOps$ForEachOrderedTask: void doCompute(java.util.stream.ForEachOps$ForEachOrderedTask)>-><java.util.ArrayDeque$DeqSpliterator: java.util.Spliterator trySplit()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$FullPathComponent: boolean equals(java.lang.Object)>
<sun.security.ssl.SSLSessionImpl: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.beans.Introspector: void processPropertyDescriptors()>-><io.undertow.util.HeaderValues: int size()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Hashtable: java.lang.String toString()>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.javasupport.JavaObject: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeSet: boolean isEmpty()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.BigIntegerNode: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.ssrf.SSRFTask1: void <init>()>
<java.util.EnumMap: int entryHashCode(int)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>-><com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.StringLiteral: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.AbstractSet: int hashCode()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.util.Hashtable: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.nulabinc.zxcvbn.matchers.Keyboard$Position: int hashCode()>
<org.springframework.core.io.DefaultResourceLoader: org.springframework.core.io.Resource getResource(java.lang.String)>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.core.io.Resource getResourceByPath(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.DoubleNode: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: void <init>(javax.sql.DataSource)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForTypeDescription: int hashCode()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.SimpleMailAssignment: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint: void login(java.lang.String,javax.servlet.http.HttpServletResponse)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: java.lang.String getString()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.core.Conventions: java.lang.String pluralize(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<java.lang.Object: java.lang.String toString()>-><java.util.Hashtable: int hashCode()>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.String: boolean endsWith(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<org.springframework.beans.CachedIntrospectionResults: boolean isClassLoaderAccepted(java.lang.ClassLoader)>-><org.springframework.util.LinkedCaseInsensitiveMap$KeySetIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Long: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.time.OffsetTime: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hibernate.metamodel.model.domain.NavigableRole: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.web.method.ControllerAdviceBean: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$UnmodifiableList: int hashCode()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.users.Scoreboard getScoreboard()>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: java.lang.String getString()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isArrayType()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<org.springframework.core.annotation.AnnotationUtils: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>-><java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Long: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Vector$Itr: java.lang.Object next()>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.util.Collections$EmptyList: java.util.Iterator iterator()>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.ZoneOffset: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.webwolf_introduction.LandingAssignment getLandingAssignment()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.io.ByteArrayResource: int hashCode()>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><java.lang.Object: java.lang.Class getClass()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.Object getDetails()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.context.support.ApplicationListenerDetector: int hashCode()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><org.jruby.RubyHash$BaseCollection: int size()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.ArrayList$SubList: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><java.time.zone.ZoneOffsetTransitionRule: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.owasp.webgoat.password_reset.PasswordResetEmail: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.ObjectNode: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><org.springframework.util.AntPathMatcher: void <init>()>
<java.security.Provider: void implPutAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.util.unit.DataSize: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><jnr.constants.ConstantSet: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.SecureDefaultsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.ObjectNode: int hashCode()>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.ssrf.SSRFTask1 getSSRFTask1()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: org.springframework.security.core.Authentication getAuthentication()>-><org.springframework.security.core.context.SecurityContextImpl: org.springframework.security.core.Authentication getAuthentication()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.undertow.util.HeaderValues: int size()>
<java.util.AbstractMap: int hashCode()>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.RubyHash$BaseIterator: java.lang.Object next()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><ch.qos.logback.core.subst.Node: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.io.FileSystemResource: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.BlobDataID: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>-><java.util.HashMap: void putAll(java.util.Map)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.Hashtable: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: java.lang.String getString()>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.HashMap$Node: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.lang.Object: java.lang.String toString()>-><sun.security.util.ObjectIdentifier: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.AbstractList: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.owasp.webgoat.password_reset.PasswordResetEmail: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><org.jruby.RubyHash$BaseSet: int size()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.LinkedList: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.SymbolProc: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.validation.BindException: int hashCode()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: java.lang.String getString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Optional: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>-><org.springframework.http.server.reactive.ReactorServerHttpRequest: java.lang.String resolveRequestUri(reactor.netty.http.server.HttpServerRequest)>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.chrome_dev_tools.NetworkLesson getNetworkLesson()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.HashMap$KeySet: int size()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.Objects: int hashCode(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.IdentityHashMap$Values: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.DigitList: int hashCode()>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: java.lang.String getString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$EntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><com.thoughtworks.xstream.converters.collections.TreeSetConverter$1$1: int size()>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.lang.Character: int hashCode()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: java.lang.String remove(int)>-><io.undertow.util.HeaderValues: java.lang.String removeLast()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<io.undertow.util.CopyOnWriteMap: java.util.Set entrySet()>-><java.util.Collections$EmptyMap: java.util.Set entrySet()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$Record: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.jruby.util.io.SelectorPool: java.nio.channels.Selector retrieveFromPool(java.nio.channels.spi.SelectorProvider)>-><io.undertow.util.HeaderValues: java.lang.Object remove(int)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>-><com.fasterxml.jackson.core.base.ParserBase: java.lang.Object _getSourceReference()>
<com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>-><java.lang.StringBuilder: void <init>(int)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Date: boolean equals(java.lang.Object)>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object get(java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache: void bumpAccess(io.undertow.server.handlers.cache.LRUCache$CacheEntry)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptySet: boolean isEmpty()>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity getVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.concurrent.ArrayBlockingQueue: void clear()>-><java.util.concurrent.locks.ReentrantLock: void unlock()>
<com.google.common.collect.Maps$TransformedEntriesMap: int size()>-><com.google.common.collect.Maps$TransformedEntriesMap: int size()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader getBeanClassLoader()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><jnr.constants.ConstantSet$ConstantIterator: java.lang.Object next()>
<java.util.Collections$UnmodifiableCollection: int size()>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.Conventions: java.lang.String pluralize(java.lang.String)>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.DoubleNode: int hashCode()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><org.springframework.web.util.UrlPathHelper: void <init>()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: java.lang.String getString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>-><com.google.common.collect.ForwardingMultimap: boolean isEmpty()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.AbstractMap: int hashCode()>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.AbstractCollection: void clear()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.UUID: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model)>
<org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)>-><java.beans.Introspector: java.lang.String decapitalize(java.lang.String)>
<io.undertow.util.HeaderMap: void resize()>-><java.lang.Object: java.lang.Object clone()>
<org.jruby.javasupport.JavaArray: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getPath()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.HashMap$Node: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: org.owasp.webgoat.assignments.AttackResult injectableQueryAvailability(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: java.lang.String getString()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object get(java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: java.lang.Object getValue()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.util.Hashtable: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<io.undertow.servlet.spec.HttpSessionImpl$UnwrapSessionAction: java.lang.Object run()>-><io.undertow.servlet.spec.HttpSessionImpl$UnwrapSessionAction: io.undertow.server.session.Session run()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.google.common.collect.Maps$ImprovedAbstractMap: void <init>()>-><java.util.AbstractMap: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hibernate.engine.query.spi.QueryPlanCache$HQLQueryPlanKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.security.Provider: void implPutAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.concurrent.ConcurrentHashMap: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><javax.management.MBeanAttributeInfo: int hashCode()>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webwolf.user.RegistrationController getRegistrationController()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Float: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.convert.TypeDescriptor: int hashCode()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.RowType: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>
<java.util.ArrayDeque$DeqSpliterator: long estimateSize()>-><java.util.ArrayDeque$DeqSpliterator: int getFence()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.LocalDate: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>-><org.springframework.core.Conventions: java.lang.Class getClassForValue(java.lang.Object)>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.node.IntNode: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.net.Inet4Address: int hashCode()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.springframework.validation.BindException: int hashCode()>-><org.springframework.validation.AbstractBindingResult: int hashCode()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractCollection: java.lang.String toString()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.aop.support.DefaultIntroductionAdvisor: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.FunctionSQL: int hashCode()>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><sun.security.jca.ProviderConfig: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyNil: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.UnboxedBoolean: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$7: java.lang.Object transformEntry(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multimaps$UnmodifiableMultimap$1: java.lang.Object apply(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.PatternEntry: int hashCode()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.NullNode: int hashCode()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.insecure_login.InsecureLoginTask: void <init>()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.cglib.core.ClassInfo: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.core.authority.SimpleGrantedAuthority: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.hibernate.boot.model.relational.Namespace$Name: int hashCode()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.net.SocketPermission: int hashCode()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: java.lang.String getPassword()>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.LongNode: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.http.server.reactive.AbstractServerHttpRequest: void <init>(java.net.URI,java.lang.String,org.springframework.http.HttpHeaders)>-><java.lang.Object: void <init>()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.ProcessEnvironment$StringEntry: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.servlet.spec.HttpSessionImpl: io.undertow.server.session.Session getSession()>-><java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap: boolean isEmpty()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.ArrayDeque: int size()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.RubyArray$RubyArrayConversionIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.MailAssignment: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String)>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashMap$HashIterator: boolean hasNext()>
<org.springframework.http.server.reactive.NettyHeadersAdapter: void <init>(io.netty.handler.codec.http.HttpHeaders)>-><java.lang.Object: void <init>()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><org.springframework.util.LinkedMultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><java.util.HashSet: boolean isEmpty()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><sun.util.calendar.CalendarDate: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.time.Clock$SystemClock: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.ObjectInstance: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.ObjectProvider getBeanProvider(org.springframework.core.ResolvableType)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Hashtable$KeySet: int size()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.validation.FieldError: int hashCode()>
<org.jruby.util.JRubyClassLoader: void terminateJarIndexCacheEntries()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.String: int length()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String decode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTFinalEndpoint: java.lang.String decode(java.lang.String)>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: boolean equals(java.lang.Object)>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1: boolean isStatic()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.io.FilePermission: int hashCode()>
<org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Character: int hashCode()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.chrono.BuddhistChronology: int hashCode()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: boolean hasWaiters()>-><java.util.concurrent.locks.ReentrantLock$Sync: boolean isHeldExclusively()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: boolean equals(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.password_reset.SecurityQuestionAssignment getSecurityQuestionAssignment()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque: int size()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: void close()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><org.springframework.http.server.DefaultRequestPath: void validateContextPath(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.collect.Maps: com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.TreeSet: void clear()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$UnmodifiableMap: int hashCode()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.MBeanConstructorInfo: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.DecimalNode: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<org.jruby.javasupport.binding.ClassInitializer: void setupClassMethods(java.lang.Class,org.jruby.javasupport.binding.Initializer$State)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.util.collections.WeakHashSet: void clear()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.jruby.ir.representations.CFG: org.jruby.dirgra.DirectedGraph build(org.jruby.ir.instructions.Instr[])>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hibernate.engine.query.spi.QueryPlanCache$HQLQueryPlanKey: int hashCode()>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.owasp.webgoat.webwolf_introduction.Email: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.path_traversal.ProfileUpload: void <init>(java.lang.String,org.owasp.webgoat.session.WebSession)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.Class)>-><org.springframework.context.support.GenericApplicationContext: org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedList: int size()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>
<org.jruby.ir.representations.IGVCFGVisitor: void visitEdges(org.jruby.ir.representations.CFG)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationDescription$AbstractBase: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.Collections$UnmodifiableCollection: boolean isEmpty()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.util.Collections$EmptySet: boolean containsAll(java.util.Collection)>-><java.util.ArrayDeque: boolean isEmpty()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Collection getLongTaskTimerSamples(javax.servlet.http.HttpServletRequest,java.lang.Object,java.util.Set)>-><java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.MBeanParameterInfo: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.jca.ProviderConfig: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForAnnotationDescription: int hashCode()>
<org.springframework.validation.BindException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String toString()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.springframework.core.Conventions: java.lang.Class getClassForValue(java.lang.Object)>-><org.springframework.util.ClassUtils: boolean isJavaLanguageInterface(java.lang.Class)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.Duration: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.Clock$SystemClock: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.expression.spel.support.ReflectivePropertyAccessor$PropertyCacheKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.net.URI: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.x509.AVA: int hashCode()>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.DOMCrossSiteScripting: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>-><com.fasterxml.jackson.core.base.ParserBase: java.lang.Object _getSourceReference()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.BitSet: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.lang.Object: java.lang.Class getClass()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><java.util.logging.Level: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.CompositeType: int hashCode()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.AbstractCollection: void clear()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.util.collections.WeakHashSet: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Short: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.lang.ProcessEnvironment$StringValues: void clear()>
<java.util.EnumMap: int entryHashCode(int)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<java.util.AbstractCollection: java.lang.String toString()>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><java.net.URISyntaxException: java.lang.String getMessage()>
<org.springframework.core.annotation.TypeMappedAnnotations: java.util.stream.Stream stream(java.lang.Class)>-><java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.jruby.RubyArray$RubyArrayConversionIterator: java.lang.Object next()>
<io.undertow.servlet.spec.ServletPrintWriterDelegate$1: io.undertow.servlet.spec.ServletPrintWriterDelegate run()>-><java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.factory.config.RuntimeBeanReference: boolean equals(java.lang.Object)>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<java.util.Spliterator: long getExactSizeIfKnown()>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: java.lang.String getString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Hashtable$Entry: java.lang.Object getValue()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.ClobDataID: boolean equals(java.lang.Object)>
<java.util.stream.ReferencePipeline$Head: void forEach(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean isReferenceType()>
<org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.runtime.Helpers: void fillNil(org.jruby.runtime.builtin.IRubyObject[],int,int,org.jruby.Ruby)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.WeakCache$CacheValue: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.Method: int hashCode()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.Multimaps$Keys: java.util.Iterator entryIterator()>-><com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.path_traversal.ProfileUploadRetrieval: void <init>(java.lang.String)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.reflect.WeakCache$CacheKey: int hashCode()>
<org.springframework.core.style.DefaultToStringStyler: void styleField(java.lang.StringBuilder,java.lang.String,java.lang.Object)>-><org.springframework.core.style.DefaultToStringStyler: void styleFieldEnd(java.lang.StringBuilder,java.lang.String)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.spi.SimpleRuleStore: void addRule(ch.qos.logback.core.joran.spi.ElementSelector,ch.qos.logback.core.joran.action.Action)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.ArrayList$SubList: int size()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.RootBeanDefinition: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.TreeMap: void putAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.java.proxies.ArrayJavaProxy: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.aop.framework.AdvisedSupport$MethodCacheKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.SimpleType: int hashCode()>
<java.security.Permissions: java.security.PermissionCollection getUnresolvedPermissions(java.security.Permission)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.Hashtable: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Enum: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.flywaydb.core.internal.info.MigrationInfoImpl: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.ArrayType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: boolean responseStarted()>-><io.undertow.server.HttpServerExchange: boolean isResponseStarted()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.MBeanNotificationInfo: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Character$Subset: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForAnnotationDescription: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.lang.StackTraceElement: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.StringBuilder: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean first()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection: boolean equals(java.lang.Object)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.Expression: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.nio.charset.Charset: int hashCode()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque$DeqSpliterator: java.util.ArrayDeque$DeqSpliterator trySplit()>-><java.util.ArrayDeque$DeqSpliterator: int getFence()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeMap$Values: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void <init>(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.JumboEnumSet: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.net.Inet6Address: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><net.bytebuddy.matcher.FilterableList$Empty: int size()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: java.lang.String getPrivateKey(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.SigningAssignment: java.lang.String getPrivateKey(javax.servlet.http.HttpServletRequest)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Vector: int size()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.jruby.RubyArray: void alloc(int)>-><org.jruby.runtime.Helpers: void fillNil(org.jruby.runtime.builtin.IRubyObject[],org.jruby.Ruby)>
<java.util.AbstractMap$1: void clear()>-><org.springframework.util.ConcurrentReferenceHashMap: void clear()>
<java.lang.Object: java.lang.String toString()>-><javax.crypto.CryptoAllPermission: int hashCode()>
<com.nulabinc.zxcvbn.matchers.SpatialMatcher: java.util.List spatialMatchHelper(java.lang.String,com.nulabinc.zxcvbn.matchers.Keyboard)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.ObjectInstance: int hashCode()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><ch.qos.logback.core.status.StatusBase: int hashCode()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: org.springframework.http.HttpHeaders initHeaders(reactor.netty.http.server.HttpServerRequest)>-><org.springframework.http.HttpHeaders: void <init>(org.springframework.util.MultiValueMap)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.TreeMap$Entry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.PatternEntry: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues removeEntry(io.undertow.util.HttpString)>-><io.undertow.util.HttpString: boolean equals(io.undertow.util.HttpString)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.core.style.DefaultToStringStyler: void styleIdentityHashCode(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.security.core.userdetails.User: int hashCode()>-><java.lang.String: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.lang.invoke.MemberName: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.LocalTime: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.IntNode: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>-><com.google.common.collect.Maps: java.util.Map transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void startAndAttachTimingContext(javax.servlet.http.HttpServletRequest,java.lang.Object)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext: void attachTo(javax.servlet.http.HttpServletRequest)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.util.locale.provider.RuleBasedBreakIterator: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderMap put(io.undertow.util.HttpString,java.lang.String)>-><io.undertow.util.HeaderValues: void clear()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValues: int size()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9 getSqlInjectionLesson9()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: java.lang.Object next()>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: boolean isLazy(org.springframework.beans.factory.config.DependencyDescriptor)>-><org.springframework.core.MethodParameter: java.lang.reflect.AnnotatedElement getAnnotatedElement()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.String: int indexOf(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.SimpleTimeZone: int hashCode()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.deserialization.InsecureDeserializationTask: void <init>()>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>-><java.lang.String: int length()>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>
<java.util.Collections$UnmodifiableRandomAccessList: java.util.List subList(int,int)>-><io.undertow.util.HeaderValues: java.util.List subList(int,int)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<java.util.AbstractMap: java.lang.String toString()>-><com.google.common.collect.TransformedIterator: boolean hasNext()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.Hashtable$Entry: java.lang.Object getKey()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$StringValues: int size()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><org.springframework.util.Assert: void isTrue(boolean,java.util.function.Supplier)>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webgoat.users.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.context.support.AbstractApplicationContext: java.lang.Object getBean(java.lang.String,java.lang.Object[])>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.factory.config.DependencyDescriptor: int hashCode()>
<java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.CurrentScope: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<sun.security.util.DisabledAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>-><java.util.JumboEnumSet: boolean isEmpty()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Character: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.LongNode: int hashCode()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>-><java.util.ArrayDeque: boolean delete(int)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.DurationFieldType$StandardDurationFieldType: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><io.undertow.servlet.spec.HttpServletResponseImpl: boolean responseStarted()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$Itr: java.lang.Object next()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.nio.charset.Charset: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<io.undertow.server.handlers.cache.LRUCache$CacheEntry: boolean setToken(java.lang.Object)>-><java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.HashMap$KeyIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.DateTimeZone: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: java.lang.String getBasicAuth(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.EncodingAssignment: java.lang.String getBasicAuth(javax.servlet.http.HttpServletRequest)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.IRScope: boolean equals(java.lang.Object)>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.jruby.ir.operands.LocalVariable: boolean equals(java.lang.Object)>-><sun.security.ssl.SecureKey: int hashCode()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.io.FilePermission: boolean equals(java.lang.Object)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.ProcessEnvironment$StringValues: int hashCode()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.util.Collections$UnmodifiableCollection: boolean isEmpty()>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.ParsePosition: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<io.undertow.servlet.spec.HttpServletResponseImpl$DuplicateCookieCommitListener: void <init>(io.undertow.servlet.spec.HttpServletResponseImpl)>-><java.lang.Object: void <init>()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><jnr.constants.ConstantSet: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.openmbean.ArrayType: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: int hashCode()>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.filter.GenericFilterBean: void setEnvironment(org.springframework.core.env.Environment)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.reflect.Parameter: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: int size()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.TreeMap$KeySet: boolean isEmpty()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.TreeSet: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><com.thoughtworks.xstream.core.util.WeakCache: java.util.Set entrySet()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: java.sql.ResultSet executeQuery()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9: org.owasp.webgoat.assignments.AttackResult injectableQueryIntegrity(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ast.SymbolNode: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><net.bytebuddy.matcher.FilterableList$Empty: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hibernate.metamodel.model.domain.NavigableRole: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.owasp.webgoat.challenges.Email: int hashCode()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.HsqlNameManager$HsqlName: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>-><java.util.ArrayDeque: int size()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.WeakHashMap: int hash(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.core.annotation.TypeMappedAnnotations: java.util.stream.Stream stream(java.lang.Class)>-><java.util.stream.Stream: java.util.stream.Stream empty()>
<java.util.AbstractList: void clear()>-><net.bytebuddy.matcher.FilterableList$Empty: int size()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForEnumerationDescription: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.Signature: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Multimaps$UnmodifiableMultimap$1: java.lang.Object apply(java.lang.Object)>-><com.google.common.collect.Multimaps$UnmodifiableMultimap$1: java.util.Collection apply(java.util.Collection)>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.jruby.util.collections.WeakHashSet: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: int size()>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.validation.BindException: int hashCode()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.Fixnum: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.PropertyValue: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.sql.DriverInfo: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.AbstractList: void clear()>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><io.undertow.servlet.spec.ContentTypeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyFixnum: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<io.undertow.servlet.spec.ServletPrintWriterDelegate$1: io.undertow.servlet.spec.ServletPrintWriterDelegate run()>-><sun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.LinkedList$ListItr: void remove()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Collections$SynchronizedCollection: int size()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: org.owasp.webgoat.assignments.AttackResult injectableQueryAvailability(java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<java.util.ArrayDeque: java.util.Spliterator spliterator()>-><java.util.ArrayDeque$DeqSpliterator: void <init>(java.util.ArrayDeque,int,int)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.asm.Handle: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.HashMap$KeySet: int size()>
<java.lang.Object: java.lang.String toString()>-><java.time.Instant: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.sql.DriverInfo: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.AbstractMap: int hashCode()>
<org.springframework.boot.context.properties.source.SpringConfigurationPropertySources$SourcesIterator: org.springframework.boot.context.properties.source.ConfigurationPropertySource fetchNext()>-><java.util.PrimitiveIterator$OfInt: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.DecimalFormat: boolean equals(java.lang.Object)>
<org.owasp.webgoat.csrf.ForgedReviews: void <init>()>-><com.fasterxml.jackson.core.util.InternCache: void <init>()>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.concurrent.ConcurrentHashMap$CollectionView: void clear()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.base.AbstractPeriod: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.core.io.buffer.NettyDataBufferFactory: void <init>(io.netty.buffer.ByteBufAllocator)>-><java.lang.Object: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.JavaType: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><com.thoughtworks.xstream.core.util.WeakCache$4$1: java.lang.Object getKey()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords getSqlOnlyInputValidationOnKeywords()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.ArrayType: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier getDOMCrossSiteScriptingVerifier()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.jruby.javasupport.JavaClass: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.LinkedMultiValueMap: java.util.Set entrySet()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.servlet.core.DeploymentImpl: io.undertow.servlet.api.DeploymentInfo getDeploymentInfo()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$1: byte[] resolveSigningKeyBytes(io.jsonwebtoken.JwsHeader,io.jsonwebtoken.Claims)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13 getSqlInjectionLesson13()>
<org.jruby.util.JRubyClassLoader: void terminateJarIndexCacheEntries()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.Objects: int hashCode(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.expression.TypedValue: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult)>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.aop.framework.AdvisedSupport: void setTargetSource(org.springframework.aop.TargetSource)>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<sun.security.ssl.SessionId: byte[] getId()>-><java.lang.Object: java.lang.Object clone()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyString: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.zone.ZoneOffsetTransitionRule: int hashCode()>
<org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl$DuplicateCookieCommitListener: void <init>(io.undertow.servlet.spec.HttpServletResponseImpl,io.undertow.servlet.spec.HttpServletResponseImpl$1)>-><io.undertow.servlet.spec.HttpServletResponseImpl$DuplicateCookieCommitListener: void <init>(io.undertow.servlet.spec.HttpServletResponseImpl)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.HashingAssignment: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.jruby.ir.IRBuilder$2: int compare(java.util.Map$Entry,java.util.Map$Entry)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyModule: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.util.Locale: int hashCode()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.stream.ForEachOps$ForEachOp$OfRef: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jcodings.Encoding: int hashCode()>
<java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>-><org.springframework.util.LinkedCaseInsensitiveMap: boolean containsKey(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.security.core.context.SecurityContextImpl: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Thread$WeakClassKey: int hashCode()>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.runtime.Arity: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getDomain()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.LongNode: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>-><org.springframework.context.support.AbstractResourceBasedMessageSource: java.util.Locale getDefaultLocale()>
<org.springframework.validation.AbstractErrors: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean add(java.lang.String)>-><io.undertow.util.HeaderValues: void addLast(java.lang.String)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.jwt.JWTFinalEndpoint: void <init>(javax.sql.DataSource)>
<java.util.Hashtable: java.lang.String toString()>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.security.web.util.UrlUtils: java.lang.String buildFullRequestUrl(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.validation.ObjectError: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.FloatNode: boolean equals(java.lang.Object)>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.ScopeModule: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.challenges.challenge8.Assignment8 getAssignment8()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.UnboxedFixnum: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.google.common.collect.Maps$Values: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><javax.security.auth.Subject$SecureSet: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: java.lang.Object next()>
<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.BooleanNode: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeSet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.IdentityHashMap$KeySet: void clear()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.lang.Object: java.lang.String toString()>-><io.micrometer.core.instrument.ImmutableTag: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hibernate.metamodel.model.domain.NavigableRole: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqSpliterator: int getFence()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.font.AttributeValues: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.ZonedDateTime: int hashCode()>
<sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>-><sun.security.ssl.SessionId: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.ParsePosition: int hashCode()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<io.undertow.util.HeaderValues: boolean contains(java.lang.Object)>-><io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.jar.Manifest: boolean equals(java.lang.Object)>
<org.springframework.aop.framework.DefaultAopProxyFactory: org.springframework.aop.framework.AopProxy createAopProxy(org.springframework.aop.framework.AdvisedSupport)>-><java.lang.Class: boolean isInterface()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.RubyArray: java.util.Iterator iterator()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.client_side_filtering.Salaries getSalaries()>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.ArrayList: void clear()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><io.jsonwebtoken.impl.JwtMap: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(java.lang.Object)>-><java.util.Collections: java.util.Set emptySet()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadFix: org.springframework.http.ResponseEntity getProfilePicture()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayList$SubList$1: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.awt.geom.Point2D: int hashCode()>
<java.util.HashMap$Values: void clear()>-><java.util.HashMap: void clear()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.nulabinc.zxcvbn.matchers.DateMatcher: com.nulabinc.zxcvbn.matchers.DateMatcher$Dm mapIntsToDm(java.util.List)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<com.google.common.collect.Multimaps$Keys: int distinctElements()>-><java.util.Collections$UnmodifiableMap: int size()>
<java.lang.Object: java.lang.String toString()>-><java.time.zone.ZoneRules: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.passes.CompilerPass: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Locale: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.lang.Object: java.lang.String toString()>-><com.sun.beans.WildcardTypeImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.hsqldb.types.NumberType: java.lang.String convertToString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.io.FileSystemResource: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.java.proxies.ArrayJavaProxy: int hashCode()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.Year: boolean equals(java.lang.Object)>
<org.owasp.webgoat.ssrf.SSRFTask1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.text.AttributeEntry: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent: int hashCode()>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: boolean containsKey(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.org.objectweb.asm.Type: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.TemporaryVariable: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.io.FileSystemResource: int hashCode()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>
<org.jruby.javasupport.JavaArray: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderMap put(io.undertow.util.HttpString,java.lang.String)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyFloat: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$1: boolean hasNext()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.webwolf_introduction.MailAssignment getMailAssignment()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>
<java.util.Hashtable: void putAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: int hashCode()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.cia.CIAQuiz: boolean[] getResults()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$2$1: void accept(java.lang.Object)>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer extractPathWithinApplication(org.springframework.http.server.PathContainer,org.springframework.http.server.PathContainer)>-><org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer subPath(int)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object remove(java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: java.lang.Object getValue()>
<org.jruby.javasupport.JavaArray: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<io.undertow.util.HeaderValues: java.lang.Object set(int,java.lang.Object)>-><io.undertow.util.HeaderValues: java.lang.String set(int,java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.x509.Extension: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.http_basics.HttpBasicsQuiz: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Float: boolean equals(java.lang.Object)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$1: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.temporal.WeekFields: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.util.PropertyPermission: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.GregorianCalendar: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyObject: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.util.RegexpOptions: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<java.util.Hashtable: void putAll(java.util.Map)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.Provider$UString: int hashCode()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.persist.CachedObjectBase: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$1$1: int getCount()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.AbstractSet: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.IntervalSecondData: int hashCode()>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><java.lang.Object: java.lang.Class getClass()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.tz.CachedDateTimeZone: int hashCode()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.AbstractSet: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadFix: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.validation.BindException: java.lang.Object getTarget()>-><org.springframework.validation.BindException: java.lang.Object getTarget()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><org.jruby.util.collections.WeakHashSet: java.util.Iterator iterator()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.hsqldb.types.IntervalType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.xnio.SingleOption: java.lang.Object cast(java.lang.Object)>-><java.lang.Class: java.lang.Object cast(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.jwt.JWTRefreshEndpoint getJWTRefreshEndpoint()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.ProcessEnvironment$StringValues: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.lang.NullPointerException: void <init>()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: java.lang.Object apply(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.TreeMap$Entry: java.lang.Object getKey()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.jar.Attributes: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.web.context.support.ServletContextAwareProcessor: java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)>-><org.springframework.web.filter.GenericFilterBean: void setServletContext(javax.servlet.ServletContext)>
<org.owasp.webgoat.xss.stored.StoredCrossSiteScriptingVerifier$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.servlet.spec.ServletCookieAdaptor: java.lang.String getDomain()>-><javax.servlet.http.Cookie: java.lang.String getDomain()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.AbstractList: void removeRange(int,int)>-><java.util.LinkedList$ListItr: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.cglib.core.Signature: int hashCode()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object get(java.lang.Object)>-><java.lang.System: long currentTimeMillis()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>-><org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.RubyHash$BaseSet: void clear()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.text.AttributeEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.util.UUID: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.beans.GenericTypeAwarePropertyDescriptor: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.cglib.core.MethodInfo: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<io.undertow.server.handlers.cache.LRUCache: java.lang.Object remove(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.UTCDateTimeZone: int hashCode()>
<org.springframework.core.annotation.AnnotationsScanner: java.lang.annotation.Annotation[] getDeclaredAnnotations(java.lang.reflect.AnnotatedElement,boolean)>-><org.springframework.core.annotation.AnnotatedElementUtils$AnnotatedElementForAnnotations: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayList$Itr: boolean hasNext()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String styleArray(java.lang.Object[])>-><java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.springframework.core.convert.support.ObjectToOptionalConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.FieldPosition: int hashCode()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void initVotes(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint: void initVotes()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<org.jruby.RubyHash$BaseSet: void clear()>-><org.jruby.RubyHash: void clear()>
<org.springframework.web.context.support.ServletContextAwareProcessor: java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)>-><org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: javax.servlet.ServletConfig getServletConfig()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: boolean isOwnedBy(java.util.concurrent.locks.AbstractQueuedSynchronizer)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.runtime.Block: boolean equals(java.lang.Object)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)>-><java.lang.String: int lastIndexOf(int)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: void setString(int,java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.awt.Font: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.UnboxedBoolean: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.nio.charset.Charset: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.HashSet: void clear()>
<java.lang.Object: java.lang.String toString()>-><sun.security.x509.AVA: int hashCode()>
<com.google.common.collect.Multisets$EntrySet: void clear()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: com.google.common.collect.Multiset multiset()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: java.lang.String getString()>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.core.util.WeakCache: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.AbstractCollection: boolean isEmpty()>
<java.lang.Object: java.lang.String toString()>-><java.lang.invoke.MethodType: int hashCode()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.provider.PolicyFile$SelfPermission: int hashCode()>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.asm.ConstantDynamic: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: int size()>
<java.util.AbstractCollection: void clear()>-><io.micrometer.shaded.org.pcollections.IntTree$EntryIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.LocalDateTime: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>
<java.util.Hashtable$EntrySet: void clear()>-><java.util.Hashtable: void clear()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.AttributeAccessorSupport: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.String: java.lang.String substring(int,int)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.LinkedHashMap$LinkedEntryIterator: java.lang.Object next()>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.TreeMap$EntryIterator: java.lang.Object next()>
<org.springframework.http.server.reactive.ReactorServerHttpResponse: void <init>(reactor.netty.http.server.HttpServerResponse,org.springframework.core.io.buffer.DataBufferFactory)>-><org.springframework.http.HttpHeaders: void <init>(org.springframework.util.MultiValueMap)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.javasupport.JavaClass: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.AbstractMap: int hashCode()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.AbstractList: int hashCode()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.AbstractList: void clear()>-><java.util.AbstractList: void removeRange(int,int)>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.SubList: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>-><org.springframework.web.servlet.handler.HandlerInterceptorAdapter: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.String: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean last()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter,org.springframework.http.server.reactive.NettyHeadersAdapter$1)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter)>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.apache.logging.log4j.spi.Provider: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.DateFormatSymbols: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.lang.StringBuilder: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.operands.StringLiteral: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashMap$ValueIterator: java.lang.Object next()>
<org.owasp.webgoat.csrf.ForgedReviews: org.owasp.webgoat.assignments.AttackResult createNewReview(java.lang.String,java.lang.Integer,java.lang.String,javax.servlet.http.HttpServletRequest)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.users.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webgoat.users.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><java.lang.Enum: int ordinal()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.SymbolProc: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: java.lang.String getString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>-><com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.Hashtable$Entry: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: java.lang.String getString(java.lang.String)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.lang.NullPointerException: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.Provider$UString: boolean equals(java.lang.Object)>
<org.springframework.core.io.buffer.LimitedDataBufferList: void clear()>-><java.util.ArrayList: void clear()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.text.AttributeEntry: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: org.owasp.webgoat.assignments.AttackResult injectableQueryAvailability(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: java.sql.Statement getStatement()>
<java.util.HashMap$KeySet: void clear()>-><java.util.HashMap: void clear()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<io.undertow.util.CopyOnWriteMap: java.util.Set entrySet()>-><java.util.HashMap: java.util.Set entrySet()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfParameterizedType: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity vote(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.util.LinkedMultiValueMap: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.CurrentScope: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.SymbolProc: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.Symbol: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator verifyBaseTypeValidity(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.security.Provider: void implPutAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashSet: boolean isEmpty()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hibernate.engine.query.spi.QueryPlanCache$DynamicFilterKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.LocalDate: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.HsqlNameManager$HsqlName: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.beans.IndexedPropertyDescriptor: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ShopEndpoint: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all()>
<com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Maps$7: java.lang.Object transformEntry(java.lang.Object,java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: java.lang.String validateProperty(java.lang.String,java.lang.String,java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.BlobDataID: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.Object next()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.Row: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean equals(java.lang.Object)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: java.lang.String getString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getValue()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.classmate.util.ClassKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><sun.util.BuddhistCalendar: int hashCode()>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.StringBuilder: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.beans.IndexedPropertyDescriptor: int hashCode()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.annotation.MergedAnnotation: org.springframework.core.annotation.MergedAnnotation from(java.lang.Object,java.lang.annotation.Annotation)>-><org.springframework.core.annotation.TypeMappedAnnotation: org.springframework.core.annotation.MergedAnnotation from(java.lang.Object,java.lang.annotation.Annotation)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.util.RegexpOptions: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.JumboEnumSet: int size()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.beans.PropertyValue: int hashCode()>
<org.hsqldb.Expression: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultRequestPath: void <init>(java.net.URI,java.lang.String)>-><org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer parsePath(java.lang.String)>
<java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.logging.log4j.util.LoaderUtil$UrlResource: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><org.jruby.RubyHash$BaseIterator: boolean hasNext()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.web.authentication.WebAuthenticationDetails: int hashCode()>
<org.hsqldb.map.BaseHashMap: int valueCount(java.lang.Object,int)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Boolean: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>-><java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: java.lang.String toString()>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.awt.Font: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.util.HeaderMap: void resize()>-><io.undertow.util.HttpString: int hashCode()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingQuiz: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int hashCode()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><java.util.Optional: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.savedrequest.DefaultSavedRequest: java.lang.String toString()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.flywaydb.core.internal.resolver.ResolvedMigrationImpl: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Vector$Itr: boolean hasNext()>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment: void <init>()>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyBoolean: int hashCode()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.Iterator: void remove()>-><java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson5a: void <init>()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><jnr.constants.ConstantSet: int size()>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<io.undertow.util.HeaderMap: java.util.Collection remove(io.undertow.util.HttpString)>-><java.util.Collections: java.util.List emptyList()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.String getMessage()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.validation.FieldError: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.xss.DOMCrossSiteScripting: void <init>()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.nio.charset.Charset: boolean equals(java.lang.Object)>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.fasterxml.jackson.databind.DeserializationContext: java.util.Date parseDate(java.lang.String)>-><java.text.DateFormat: java.util.Date parse(java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.javasupport.JavaArray: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.net.URI: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.HashMap$HashIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.UnresolvedPermission: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap: boolean isEmpty()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><org.springframework.core.style.ToStringCreator: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.OpenMBeanOperationInfoSupport: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.OffsetDateTime: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.springframework.util.LinkedMultiValueMap: boolean isEmpty()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Maps$EntrySet: boolean isEmpty()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webwolf.mailbox.MailboxController getMailboxController()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Integer: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Boolean: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractCollection: void clear()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.util.stream.Nodes$SizedCollectorTask: void compute()>-><java.util.ArrayDeque$DeqSpliterator: long estimateSize()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<ch.qos.logback.classic.joran.ReconfigureOnChangeTask: java.util.List removeIncludeEvents(java.util.List)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.io.support.EncodedResource: boolean equals(java.lang.Object)>
<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><org.springframework.boot.web.servlet.RegistrationBean: int getOrder()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.Integer: int hashCode()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.BlobDataID: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webwolf.user.RegistrationController: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest)>-><org.springframework.validation.BindException: boolean hasErrors()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.servlet.spec.ServletPrintWriterDelegate: sun.misc.Unsafe access$100()>-><io.undertow.servlet.spec.ServletPrintWriterDelegate: sun.misc.Unsafe getUnsafe0()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.Duration: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyArray: void alloc(int)>
<java.util.Hashtable: java.lang.String toString()>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10 getSqlInjectionLesson10()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ConcurrentModificationException: void <init>()>
<java.lang.Object: java.lang.String toString()>-><java.sql.Timestamp: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.core.io.UrlResource: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.net.URI: int hashCode()>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.javasupport.JavaConstructor: boolean equals(java.lang.Object)>
<java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.ImmutableDescriptor: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.reflect.Method: boolean equals(java.lang.Object)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.EnumMap: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.RubyObject: int hashCode()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView changePassword(org.owasp.webgoat.password_reset.resetlink.PasswordChangeForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.owasp.webgoat.challenges.Email: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.Self: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyFloat: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache: java.lang.Object remove(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.style.DefaultToStringStyler: void styleStart(java.lang.StringBuilder,java.lang.Object)>-><org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.password_reset.SecurityQuestionAssignment: void <init>()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.access.SecurityConfig: int hashCode()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI resolveBaseUrl(reactor.netty.http.server.HttpServerRequest)>-><reactor.netty.http.server.HttpServerRequest: java.net.InetSocketAddress hostAddress()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.ScopeModule: boolean equals(java.lang.Object)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String registration(org.owasp.webwolf.user.UserForm,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><io.undertow.server.HttpServerExchange: void addResponseCommitListener(io.undertow.server.ResponseCommitListener)>
<org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>-><org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object)>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.POJONode: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView resetPassword(java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.BinaryData: int hashCode()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>-><com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>-><com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Byte: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.http.HttpEntity: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.x509.GeneralName: boolean equals(java.lang.Object)>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: org.springframework.http.HttpHeaders initHeaders(reactor.netty.http.server.HttpServerRequest)>-><reactor.netty.http.server.HttpServerRequest: io.netty.handler.codec.http.HttpHeaders requestHeaders()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.java.proxies.ArrayJavaProxy: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.Hashtable: java.lang.String toString()>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hibernate.boot.model.relational.Namespace$Name: boolean equals(java.lang.Object)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.SimpleDateFormat: int hashCode()>
<java.net.IDN$1: java.io.InputStream run()>-><java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: java.time.format.DateTimeFormatterBuilder$PrefixTree getTree(java.time.format.DateTimeParseContext)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.classmate.ResolvedType: boolean equals(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.WeakHashMap$KeySet: void clear()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.AbstractMap$SimpleEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.beans.factory.config.DependencyDescriptor: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.Period: boolean equals(java.lang.Object)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><io.undertow.util.HeaderValues: int size()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode(javax.management.openmbean.OpenMBeanParameterInfo)>-><javax.net.ssl.SNIHostName: int hashCode()>
<io.undertow.servlet.core.ApplicationListeners$1: java.lang.Object initialValue()>-><io.undertow.servlet.core.ApplicationListeners$1: io.undertow.servlet.core.ApplicationListeners$ListenerState initialValue()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.net.Inet4Address: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: java.lang.Object get(java.lang.Object)>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.OffsetDateTime: boolean equals(java.lang.Object)>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.BooleanNode: int hashCode()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>-><java.util.LinkedHashMap: void clear()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection$1: void <init>(java.util.Collections$UnmodifiableCollection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>-><org.springframework.core.Conventions: java.lang.Object peekAhead(java.util.Collection)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.web.context.support.ServletContextResource: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.StringBuilder: java.lang.String toString()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.headius.invokebinder.Signature: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.DigitList: int hashCode()>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound: boolean equals(java.lang.Object)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.TabularType: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.factory.config.RuntimeBeanReference: int hashCode()>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap: java.util.Set entrySet()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.web.method.ControllerAdviceBean: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.Maps$TransformedEntriesMap: void <init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>-><com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$SynchronizedMap: int hashCode()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.xss.stored.StoredXssComments: org.owasp.webgoat.assignments.AttackResult createNewComment(java.lang.String)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.text.AttributeEntry: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateNonEmpty(io.undertow.util.HttpString,java.lang.Object[],int,int,java.lang.Object)>-><java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.runtime.ObjectSpace$ObjectGroup: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SingletonMap: boolean isEmpty()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.SortedOps$SizedRefSortingSink: void accept(java.lang.Object)>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.crypto.SigningAssignment: void <init>()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.http.server.reactive.ReactorHttpHandlerAdapter: reactor.core.publisher.Mono apply(reactor.netty.http.server.HttpServerRequest,reactor.netty.http.server.HttpServerResponse)>-><java.lang.StringBuilder: void <init>()>
<java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>-><java.util.stream.ReferencePipeline: void forEach(java.util.function.Consumer)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.invoke.LambdaForm$Name: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$1: byte[] resolveSigningKeyBytes(io.jsonwebtoken.JwsHeader,io.jsonwebtoken.Claims)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: void <init>(javax.sql.DataSource)>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpSession getSession(boolean)>-><javax.servlet.http.HttpServletRequestWrapper: javax.servlet.http.HttpServletRequest _getHttpServletRequest()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.assignments.LessonTrackerInterceptor: void <init>(org.owasp.webgoat.users.UserTrackerRepository,org.owasp.webgoat.session.WebSession)>-><synthetic.method.SingletonFactory: org.owasp.webgoat.session.WebSession getWebSession()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.HashMap$Values: int size()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Hashtable$Entry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: java.lang.Object[] toArray(java.lang.Object[])>-><java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)>-><java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.Object: java.lang.String toString()>-><java.lang.invoke.LambdaForm: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Hashtable$Entry: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.WeakHashMap$Entry: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.node.TextNode: boolean equals(java.lang.Object)>
<java.util.SubList: void removeRange(int,int)>-><java.util.SubList: void checkForComodification()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.lang.Object: java.lang.String toString()>-><java.time.Year: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.lang.Object: java.lang.String toString()>-><java.util.BitSet: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.factory.support.AbstractBeanDefinition: int hashCode()>
<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: java.lang.String getString()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.springframework.context.support.ApplicationContextAwareProcessor: void invokeAwareInterfaces(java.lang.Object)>-><org.springframework.web.servlet.HttpServletBean: void setEnvironment(org.springframework.core.env.Environment)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.WeakHashMap$EntrySet: void clear()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.JavaType: boolean isPrimitive()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.util.AbstractMap$SimpleEntry: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: void <init>(reactor.netty.http.server.HttpServerRequest,org.springframework.core.io.buffer.NettyDataBufferFactory)>-><org.springframework.http.server.reactive.ReactorServerHttpRequest: org.springframework.http.HttpHeaders initHeaders(reactor.netty.http.server.HttpServerRequest)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callEndAction(java.util.List,java.lang.String)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.util.LinkedList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getKey()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>-><java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>
<org.springframework.core.Conventions: java.lang.Object peekAhead(java.util.Collection)>-><java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.zone.ZoneRules: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: java.lang.String getString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><org.jruby.RubyHash: java.util.Set entrySet()>
<java.util.LinkedHashSet: void <init>(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: void initIDORInfo(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.idor.IDORLogin: void initIDORInfo()>
<io.undertow.util.HeaderValues: java.lang.Object get(int)>-><io.undertow.util.HeaderValues: java.lang.String get(int)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.POJONode: int hashCode()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.springframework.core.io.buffer.LimitedDataBufferList: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.util.DerValue: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<java.util.HashMap$Values: void clear()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: void clear()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.OpenMBeanParameterInfoSupport: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.jar.Attributes$Name: int hashCode()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><org.jruby.RubyHash$ConvertingEntry: java.lang.Object getValue()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>-><org.springframework.http.server.DefaultPathContainer$DefaultSeparator: java.lang.String value()>
<java.lang.Object: java.lang.String toString()>-><java.security.CodeSource: int hashCode()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><io.undertow.servlet.spec.SecurityActions$1: java.lang.Object run()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springframework.util.ConcurrentReferenceHashMap: int getHash(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>-><java.util.stream.MatchOps$1MatchSink: void accept(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.util.RegexpOptions: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.validation.ObjectError: int hashCode()>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.Collections$EmptyList: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.types.TimestampData: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.Year: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.RegularEnumSet: void clear()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.beans.factory.config.BeanDefinitionHolder: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$SynchronizedCollection: void clear()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyBasicObject: boolean equals(java.lang.Object)>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: java.lang.String toString()>-><org.springframework.security.web.savedrequest.DefaultSavedRequest: java.lang.String getRedirectUrl()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: void <init>(reactor.netty.http.server.HttpServerRequest,org.springframework.core.io.buffer.NettyDataBufferFactory)>-><org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI initUri(reactor.netty.http.server.HttpServerRequest)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.Year: int hashCode()>
<java.util.Collections$UnmodifiableMap: java.util.Set keySet()>-><com.google.common.collect.Maps$TransformedEntriesMap: java.util.Set keySet()>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.lang.Object: java.lang.String toString()>-><java.util.IdentityHashMap$KeySet: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.aop.support.DefaultIntroductionAdvisor: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.RubyHash$ConvertingEntry: int hashCode()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.ClientSideFilteringAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hibernate.internal.util.collections.BoundedConcurrentHashMap$LIRSHashEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: int size()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.RegularEnumSet: void clear()>
<java.util.Collections$SynchronizedCollection: int size()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubySymbol: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.EnumMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$Record: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.field.PreciseDurationField: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10: org.owasp.webgoat.assignments.AttackResult injectableQueryAvailability(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.awt.Color: boolean equals(java.lang.Object)>
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>-><java.security.Provider: void ensureLegacyParsed()>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.lang.ProcessEnvironment$StringKeySet$1: java.lang.Object next()>
<java.lang.Object: java.lang.String toString()>-><org.flywaydb.core.internal.resolver.ResolvedMigrationImpl: int hashCode()>
<java.util.IdentityHashMap$Values: void clear()>-><java.util.IdentityHashMap: void clear()>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b: void <init>()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.BeanMetadataAttribute: boolean equals(java.lang.Object)>
<org.jruby.RubyFile$2: int read()>-><java.io.InputStreamReader: int read()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jcodings.Encoding: int hashCode()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.AbstractMap: boolean isEmpty()>-><com.google.common.collect.Maps$TransformedEntriesMap: int size()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><java.util.ArrayDeque$DeqIterator: void remove()>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.Conventions: java.lang.String getVariableName(java.lang.Object)>-><org.springframework.util.ClassUtils: java.lang.String getShortNameAsProperty(java.lang.Class)>
<io.undertow.servlet.spec.ServletPrintWriterDelegate$2: java.lang.Object run()>-><io.undertow.servlet.spec.ServletPrintWriterDelegate$2: sun.misc.Unsafe run()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.operands.CurrentScope: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationValue$ForConstant: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.security.AllPermission: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.ScopeModule: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.WeakHashMap$EntrySet: void clear()>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.AbstractList: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$7$1: void accept(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$SingletonList: int size()>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter: int hashCode()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.springframework.web.util.NestedServletException: void <init>(java.lang.String,java.lang.Throwable)>-><javax.servlet.ServletException: void <init>(java.lang.String,java.lang.Throwable)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveManagedArray(java.lang.Object,java.util.List,java.lang.Class)>-><io.undertow.util.HeaderValues: int size()>
<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableSortedSet: java.util.Comparator comparator()>-><java.util.Collections$UnmodifiableSortedSet: java.util.Comparator comparator()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.reflect.generics.reflectiveObjects.TypeVariableImpl: int hashCode()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$ValueCollection: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<io.undertow.util.HeaderValues: java.lang.String set(int,java.lang.String)>-><io.undertow.util.HeaderValues: int index(int)>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<org.springframework.security.web.FilterInvocation: java.lang.String getRequestUrl()>-><org.springframework.security.web.util.UrlUtils: java.lang.String buildRequestUrl(javax.servlet.http.HttpServletRequest)>
<org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>-><java.lang.Class: boolean isInterface()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.AbstractSet: int hashCode()>
<org.hsqldb.jdbc.JDBCDriver: java.sql.Connection connect(java.lang.String,java.util.Properties)>-><java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: java.text.DateFormat _force(java.text.DateFormat,java.util.TimeZone)>-><java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Collection getLongTaskTimerSamples(javax.servlet.http.HttpServletRequest,java.lang.Object,java.util.Set)>-><java.util.ArrayList: void <init>()>
<java.security.Provider: void implPutAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.util.AbstractMap: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Hashtable$Enumerator: java.lang.Object next()>
<org.springframework.core.style.DefaultToStringStyler: void styleFieldSeparator(java.lang.StringBuilder)>-><java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyObject: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.flywaydb.core.internal.database.base.Schema: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity checkout(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>
<io.undertow.server.HttpServerExchange: boolean isResponseStarted()>-><org.xnio.Bits: boolean allAreSet(int,int)>
<java.lang.Object: java.lang.String toString()>-><javax.management.MBeanNotificationInfo: int hashCode()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><io.jsonwebtoken.impl.JwtMap: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.UnresolvedPermission: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b$$InterceptorProxy: java.lang.String getPassword(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6b: java.lang.String getPassword()>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.time.ZoneId: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: void clear()>-><jnr.constants.ConstantSet$ConstantIterator: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.ZonedDateTime: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: int executeUpdate(java.lang.String)>
<java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.IntervalSecondData: boolean equals(java.lang.Object)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hsqldb.types.JavaObjectData: int hashCode()>
<io.undertow.servlet.spec.SecurityActions$1: io.undertow.servlet.handlers.ServletRequestContext run()>-><io.undertow.servlet.handlers.ServletRequestContext: io.undertow.servlet.handlers.ServletRequestContext current()>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.LinkedHashMap$LinkedEntrySet: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: int getRow()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.core.io.InputStreamResource: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.JumboEnumSet: int size()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.aop.support.DefaultIntroductionAdvisor: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void startAndAttachTimingContext(javax.servlet.http.HttpServletRequest,java.lang.Object)>
<org.springframework.web.util.HierarchicalUriComponents$Type$9: boolean isAllowed(int)>-><org.springframework.web.util.HierarchicalUriComponents$Type: boolean isPchar(int)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.beans.factory.support.NullBean: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Short: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.http.server.reactive.NettyHeadersAdapter: void putAll(java.util.Map)>-><java.util.Map: void forEach(java.util.function.BiConsumer)>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.flywaydb.core.internal.database.base.Schema: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><net.bytebuddy.matcher.FilterableList$Empty: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.RubyHash$BaseCollection: void clear()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.org.objectweb.asm.Type: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.HashMap$Node: java.lang.Object getKey()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,org.springframework.cglib.core.Transformer)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><javax.security.auth.Subject$SecureSet: int size()>
<java.lang.Object: java.lang.String toString()>-><java.util.EnumMap: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.Hashtable: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap: java.util.Set entrySet()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.jsontype.TypeDeserializer findPropertyTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>-><com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<java.util.Collections$UnmodifiableCollection: boolean isEmpty()>-><java.util.ArrayDeque: boolean isEmpty()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.flywaydb.core.internal.info.MigrationInfoImpl: boolean equals(java.lang.Object)>
<io.undertow.servlet.handlers.ServletRequestContext: io.undertow.servlet.handlers.ServletRequestContext current()>-><java.lang.ThreadLocal: java.lang.Object get()>
<org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>-><org.springframework.web.bind.ServletRequestBindingException: void <init>(java.lang.String,java.lang.Throwable)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCodes all(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.awt.geom.Point2D: int hashCode()>
<com.thoughtworks.xstream.converters.collections.TreeMapConverter$NullComparator: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.cert.Certificate: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$AbstractBase: boolean equals(java.lang.Object)>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.DigitList: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.annotation.AnnotationValue$ForTypeDescription: boolean equals(java.lang.Object)>
<org.springframework.core.OrderComparator: java.lang.Integer findOrder(java.lang.Object)>-><org.springframework.boot.web.servlet.RegistrationBean: int getOrder()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson9$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.annotation.AnnotationDescription$AbstractBase: int hashCode()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.users.Scoreboard: java.util.List getRankings()>
<org.springframework.core.annotation.AnnotatedElementUtils: java.lang.reflect.AnnotatedElement forAnnotations(java.lang.annotation.Annotation[])>-><org.springframework.core.annotation.AnnotatedElementUtils$AnnotatedElementForAnnotations: void <init>(java.lang.annotation.Annotation[])>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.description.method.MethodDescription$AbstractBase: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.String toString()>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.owasp.webgoat.challenges.Email: boolean equals(java.lang.Object)>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.controller.StartLesson$$InterceptorProxy: org.springframework.web.servlet.ModelAndView lessonPage(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.ir.representations.BasicBlock: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.HashMap$EntryIterator: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.util.HashMap: int hash(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><ch.qos.logback.core.status.StatusBase: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.factory.config.BeanExpressionContext: int hashCode()>
<javax.management.openmbean.TabularDataSupport: void putAll(java.util.Map)>-><java.util.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.ProcessEnvironment$StringValues$1: java.lang.Object next()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.ssrf.SSRFTask1: org.owasp.webgoat.assignments.AttackResult stealTheCheese(java.lang.String)>-><java.lang.String: boolean matches(java.lang.String)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.LocalTime: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><sun.security.ssl.SecureKey: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.http.HttpEntity: boolean equals(java.lang.Object)>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: boolean isEmpty()>
<org.springframework.core.annotation.AnnotatedElementUtils$AnnotatedElementForAnnotations: void <init>(java.lang.annotation.Annotation[])>-><java.lang.Object: void <init>()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$1: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.BitSet: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: void close()>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.DecimalNode: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><java.util.WeakHashMap$Entry: java.lang.Object getKey()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: void clear()>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<io.undertow.servlet.spec.HttpSessionImpl: io.undertow.server.session.Session getSession()>-><java.lang.System: java.lang.SecurityManager getSecurityManager()>
<org.owasp.webgoat.path_traversal.ProfileUpload$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUpload: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String)>
<java.util.EnumMap$EntryIterator$Entry: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.BasicPermission: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.security.core.userdetails.User: java.lang.String toString()>-><java.lang.Object: java.lang.String toString()>
<org.springframework.security.web.FilterInvocation: java.lang.String toString()>-><org.springframework.security.web.FilterInvocation: java.lang.String getRequestUrl()>
<io.undertow.util.HeaderValues: java.util.List subList(int,int)>-><java.util.Arrays: java.util.List asList(java.lang.Object[])>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.aop.support.AbstractPointcutAdvisor: int hashCode()>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.xss.CrossSiteScriptingLesson6a: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Hashtable$KeySet: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.io.FilePermission: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.headius.invokebinder.Signature: boolean equals(java.lang.Object)>
<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Optional: int hashCode()>
<io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.owasp.webgoat.ssrf.SSRFTask2$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.FrozenString: int hashCode()>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution$Replacement$ForElementMatchers$Factory: boolean equals(java.lang.Object)>
<java.util.Hashtable$ValueCollection: void clear()>-><java.security.Provider: void clear()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><javax.crypto.CryptoPermission: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet$1: void remove()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType: int hashCode()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Hashtable$EntrySet: void clear()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.DecimalFormat: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<org.owasp.webgoat.http_basics.HttpBasicsLesson$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.http_basics.HttpBasicsLesson getHttpBasicsLesson()>
<java.util.concurrent.ArrayBlockingQueue: void clear()>-><java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signal()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.google.common.collect.AbstractMapEntry: java.lang.String toString()>-><java.lang.StringBuilder: void <init>(int)>
<org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.Boolean: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<java.io.ObjectInputStream$PeekInputStream: int available()>-><java.io.InputStream: int available()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.aop.support.DefaultIntroductionAdvisor: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.util.unit.DataSize: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.idor.IDORLogin getIDORLogin()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$EntrySet: java.util.Iterator iterator()>
<org.owasp.webgoat.lessons.Hint: int hashCode()>-><org.owasp.webgoat.lessons.Hint: java.lang.String getHint()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.validation.BindException: java.lang.String getMessage()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.io.FileSystemResource: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<io.undertow.server.HttpServerExchange$6: void <init>(io.undertow.server.HttpServerExchange,io.undertow.server.ResponseCommitListener)>-><java.lang.Object: void <init>()>
<java.lang.Object: java.lang.String toString()>-><sun.security.x509.RDN: int hashCode()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: void <init>()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>-><io.undertow.servlet.spec.ServletPrintWriterDelegate$1: java.lang.Object run()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.validation.BindException: java.lang.String getObjectName()>-><org.springframework.validation.AbstractBindingResult: java.lang.String getObjectName()>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<java.util.AbstractCollection: java.lang.String toString()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.security.web.savedrequest.DefaultSavedRequest: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: int size()>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><ch.qos.logback.core.subst.Token: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.TreeMap$Entry: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateEntry(io.undertow.util.HttpString)>-><io.undertow.util.HeaderValues: void <init>(io.undertow.util.HttpString)>
<javax.security.auth.PrivateCredentialPermission: void <init>(java.lang.String,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.springframework.core.annotation.AnnotatedElementUtils$AnnotatedElementForAnnotations: java.lang.annotation.Annotation[] getDeclaredAnnotations()>-><java.lang.Object: java.lang.Object clone()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyMatchData: boolean equals(java.lang.Object)>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.web.context.support.ServletContextAwareProcessor: java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)>-><org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: javax.servlet.ServletContext getServletContext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.ZoneId: int hashCode()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><org.springframework.security.authentication.AbstractAuthenticationToken: boolean isAuthenticated()>
<java.util.AbstractSet: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.jruby.NativeException: java.lang.String searchStackMessage(java.lang.Throwable)>-><org.springframework.validation.BindException: java.lang.String getMessage()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hibernate.boot.model.relational.Namespace$Name: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.MapToMapConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.String: java.lang.String substring(int)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><ch.qos.logback.core.subst.Node: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$1: byte[] resolveSigningKeyBytes(io.jsonwebtoken.JwsHeader,io.jsonwebtoken.Claims)>-><org.hsqldb.jdbc.JDBCResultSet: boolean next()>
<org.springframework.core.convert.support.CollectionToArrayConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.core.annotation.MergedAnnotations: org.springframework.core.annotation.MergedAnnotations from(java.lang.Object,java.lang.annotation.Annotation[],org.springframework.core.annotation.RepeatableContainers)>-><org.springframework.core.annotation.TypeMappedAnnotations: org.springframework.core.annotation.MergedAnnotations from(java.lang.Object,java.lang.annotation.Annotation[],org.springframework.core.annotation.RepeatableContainers,org.springframework.core.annotation.AnnotationFilter)>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.hsqldb.jdbc.JDBCResultSet: java.lang.Object getColumnInType(int,org.hsqldb.types.Type)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getKey()>
<java.util.stream.DistinctOps$1$1: void accept(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyBasicObject: boolean equals(java.lang.Object)>
<org.jruby.specialized.RubyArrayTwoObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyArray: void modifyCheck()>
<java.util.Hashtable: java.lang.String toString()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.core.convert.TypeDescriptor: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<javax.security.auth.Subject$SecureSet: void clear()>-><javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.Statement createStatement(int,int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><org.springframework.security.core.context.SecurityContextImpl: int hashCode()>
<java.util.AbstractList: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.AbstractCollection: java.lang.String toString()>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBodyAction(java.util.List,java.lang.String)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.springframework.cglib.core.EmitUtils: void member_helper_type(org.springframework.cglib.core.CodeEmitter,java.util.List,org.springframework.cglib.core.ObjectSwitchCallback,org.springframework.cglib.core.EmitUtils$ParameterTyper,org.springframework.asm.Label,org.springframework.asm.Label,java.util.BitSet)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.util.ByteList: int hashCode()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.time.format.DateTimeTextProvider$LocaleStore: void <init>(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.hsqldb.persist.HsqlProperties: int getPropertyWithinRange(java.lang.String,int)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.lang.Object)>-><org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.web.util.NestedServletException: java.lang.String getMessage()>-><java.lang.Throwable: java.lang.Throwable getCause()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.authority.SimpleGrantedAuthority: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.SecurityQuestionAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ServletContextImpl: io.undertow.servlet.spec.ContentTypeInfo parseContentType(java.lang.String)>-><java.lang.String: boolean startsWith(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<java.lang.Object: java.lang.String toString()>-><java.net.InetSocketAddress: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.DateTimeType: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.EnumMap: int entryHashCode(int)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><org.springframework.core.env.ReadOnlySystemAttributesMap: java.lang.Object get(java.lang.Object)>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.LocalTime: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$SingletonSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<io.undertow.util.HeaderValues: java.util.ListIterator iterator(int,boolean)>-><io.undertow.util.HeaderValues$1: void <init>(io.undertow.util.HeaderValues,int,boolean)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: java.lang.String getString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Collections$EmptyList: int hashCode()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>-><com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>
<javax.management.openmbean.CompositeDataSupport: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: int size()>
<io.undertow.util.HeaderValues: java.lang.String set(int,java.lang.String)>-><java.lang.IndexOutOfBoundsException: void <init>()>
<org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><net.bytebuddy.asm.AsmVisitorWrapper$ForDeclaredMethods$Entry: int hashCode()>
<java.util.stream.AbstractPipeline: void copyInto(java.util.stream.Sink,java.util.Spliterator)>-><java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.tz.FixedDateTimeZone: int hashCode()>
<org.springframework.cglib.core.KeyFactory$Generator: void generateClass(org.springframework.asm.ClassVisitor)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>-><java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.thoughtworks.xstream.core.util.FastField: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.xss.DOMCrossSiteScripting getDOMCrossSiteScripting()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><net.bytebuddy.asm.AsmVisitorWrapper$ForDeclaredMethods$Entry: boolean equals(java.lang.Object)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.hsqldb.map.BaseHashMap: java.lang.Object addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.boot.context.properties.source.ConfigurationPropertyName: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendEmail(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.invoke.MemberName: int hashCode()>
<org.owasp.webgoat.xss.stored.StoredXssComments$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.xss.stored.StoredXssComments getStoredXssComments()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.MBeanOperationInfo: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.classmate.ResolvedType: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.hibernate.boot.model.relational.Namespace$Name: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>-><java.util.AbstractCollection: boolean contains(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.runtime.Block: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$Values: java.util.Iterator iterator()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.Clock$SystemClock: boolean equals(java.lang.Object)>
<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.beans.factory.config.EmbeddedValueResolver: java.lang.String resolveStringValue(java.lang.String)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><javax.management.openmbean.TabularDataSupport: java.util.Set entrySet()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.AbstractMap$1: java.util.Iterator iterator()>
<org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>-><org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.util.ByteList: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object get(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.util.GregorianCalendar: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hibernate.metamodel.model.domain.NavigableRole: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.service.LessonProgressService$$InterceptorProxy: java.util.List lessonOverview(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<ch.qos.logback.core.helpers.ThrowableToStringArray: java.lang.String formatFirstLine(java.lang.Throwable,java.lang.StackTraceElement[])>-><org.springframework.web.util.NestedServletException: java.lang.String getMessage()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFieldRestrictions$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><java.lang.Short: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfTypeVariable: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.LocalDate: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.ResourceBundle$CacheKey: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.csrf.CSRFFeedback$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.UUID: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Boolean: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.flywaydb.core.internal.schemahistory.AppliedMigration: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.servlet.ServletRegistrationBean: java.lang.String toString()>
<org.springframework.core.style.ToStringCreator: void <init>(java.lang.Object,org.springframework.core.style.ToStringStyler)>-><java.lang.Object: void <init>()>
<org.springframework.cglib.core.EmitUtils$6: void processCase(int,org.springframework.asm.Label)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.cglib.core.ClassInfo: boolean equals(java.lang.Object)>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.owasp.webgoat.client_side_filtering.ShopEndpoint$$InterceptorProxy: org.owasp.webgoat.client_side_filtering.ShopEndpoint$CheckoutCode getDiscountCode(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.util.unit.DataSize: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.CurrentScope: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean last()>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.jruby.java.proxies.ArrayJavaProxy: boolean equalsRubyArray(org.jruby.RubyArray)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.http.server.DefaultPathContainer$DefaultPathSegment: int hashCode()>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: java.lang.String getString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.SimpleType: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.zone.ZoneRules: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.ArrayDeque$DeqSpliterator: int getFence()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.sun.beans.WildcardTypeImpl: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$EntryIterator: java.lang.Object next()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint: void login(java.lang.String,javax.servlet.http.HttpServletResponse)>-><io.undertow.servlet.spec.HttpServletResponseImpl: void setContentType(java.lang.String)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.MBeanInfo: int hashCode()>
<org.springframework.http.server.reactive.AbstractServerHttpRequest: void <init>(java.net.URI,java.lang.String,org.springframework.http.HttpHeaders)>-><org.springframework.http.HttpLogging: org.apache.commons.logging.Log forLogName(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.template.SampleAttack: void <init>()>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.core.type.ResolvedType: boolean isReferenceType()>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.ReferencePipeline$4$1: void accept(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.ClientSideFilteringFreeAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.IntNode: boolean equals(java.lang.Object)>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$1ReducingSink: void accept(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.jruby.util.RegexpOptions: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge: org.owasp.webgoat.assignments.AttackResult registerNewUser(java.lang.String,java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean next()>
<org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>-><java.util.Locale: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashSet: boolean isEmpty()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void stopLongTaskTimers(org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor$LongTaskTimingContext)>
<org.jruby.util.io.SelectorPool: java.nio.channels.Selector retrieveFromPool(java.nio.channels.spi.SelectorProvider)>-><io.undertow.util.HeaderValues: int size()>
<java.lang.Object: java.lang.String toString()>-><java.util.Collections$SynchronizedSet: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.core.convert.support.ObjectToStringConverter: java.lang.String convert(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.jsonwebtoken.impl.JwtMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><java.time.zone.ZoneOffsetTransition: int hashCode()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult attack(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidationOnKeywords$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.math.BigDecimal: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: int size()>
<org.springframework.expression.spel.ast.QualifiedIdentifier: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getKey()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><com.thoughtworks.xstream.converters.collections.TreeSetConverter$1$1: int size()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection: int hashCode()>
<org.jruby.javasupport.binding.Initializer: void handleScalaSingletons(java.lang.Class,org.jruby.javasupport.binding.Initializer$State)>-><io.undertow.util.HeaderValues: java.lang.Object get(int)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.HashMap$EntrySet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5b: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,java.lang.String)>-><org.hsqldb.jdbc.JDBCPreparedStatement: void setInt(int,int)>
<org.springframework.context.support.AbstractApplicationContext: org.springframework.beans.factory.ObjectProvider getBeanProvider(org.springframework.core.ResolvableType)>-><org.springframework.context.support.AbstractApplicationContext: void assertBeanFactoryActive()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.awt.image.ComponentColorModel: boolean equals(java.lang.Object)>
<java.util.AbstractCollection: java.lang.String toString()>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.web.util.matcher.AntPathRequestMatcher: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<org.springframework.http.server.PathContainer: org.springframework.http.server.PathContainer subPath(int)>-><org.springframework.http.server.DefaultPathContainer: java.util.List elements()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.springframework.boot.convert.CollectionToDelimitedStringConverter: java.lang.Object convert(java.util.Collection,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean isEmpty()>
<java.util.ArrayDeque: boolean remove(java.lang.Object)>-><java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Collections$1: boolean hasNext()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3 getSqlInjectionLesson3()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jcodings.Encoding: boolean equals(java.lang.Object)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.ServletPrintWriterDelegate: sun.misc.Unsafe getUnsafe0()>-><java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>
<com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder: boolean useForType(com.fasterxml.jackson.databind.JavaType)>-><com.fasterxml.jackson.databind.type.ArrayType: boolean isConcrete()>
<io.undertow.util.HeaderMap: io.undertow.util.HeaderValues getOrCreateEntry(io.undertow.util.HttpString)>-><io.undertow.util.HttpString: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: javax.servlet.ServletConfig getServletConfig()>-><org.springframework.web.context.support.ServletContextAwareProcessor: javax.servlet.ServletConfig getServletConfig()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><sun.security.x509.GeneralName: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.concurrent.ArrayBlockingQueue: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><net.bytebuddy.asm.MemberSubstitution: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.Collections$SynchronizedCollection: void clear()>-><org.jsoup.helper.ChangeNotifyingArrayList: void clear()>
<com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Map asMap()>-><com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>
<org.owasp.webwolf.FileServer$$InterceptorProxy: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webwolf.FileServer: org.springframework.web.servlet.ModelAndView importFile(org.springframework.web.multipart.MultipartFile)>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTSecretKeyEndpoint: org.owasp.webgoat.assignments.AttackResult login(java.lang.String)>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AnonymousAuthenticationToken: java.lang.Object getPrincipal()>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.javasupport.JavaArray: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String getString()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.csrf.ForgedReviews$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.time.OffsetTime: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.springframework.expression.TypedValue: int hashCode()>
<org.owasp.webgoat.jwt.JWTSecretKeyEndpoint$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.jwt.JWTSecretKeyEndpoint: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><ch.qos.logback.core.joran.spi.HostClassAndPropertyDouble: boolean equals(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity follow(java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.text.AttributeEntry: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>-><javax.net.ssl.SNIHostName: int hashCode()>
<org.jruby.util.collections.WeakHashSet: void clear()>-><java.util.WeakHashMap: void clear()>
<java.util.concurrent.ArrayBlockingQueue: void clear()>-><java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.types.TimeData: int hashCode()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.Level: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: java.lang.String follow(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.ArrayList$SubList$1: java.lang.Object next()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.hsqldb.map.ValuePoolHashMap: java.lang.Object getOrAddObject(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: int hashCode()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Collection getLongTaskTimerSamples(javax.servlet.http.HttpServletRequest,java.lang.Object,java.util.Set)>-><java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><io.undertow.servlet.api.ServletInfo: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: int hashCode()>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.vulnerable_components.VulnerableComponentsLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: void login(java.lang.String,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.Locale: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<com.nulabinc.zxcvbn.Scoring: com.nulabinc.zxcvbn.Strength mostGuessableMatchSequence(java.lang.String,java.util.List,boolean)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.TabularDataSupport: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean containsAll(java.util.Collection)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.core.io.ClassPathResource: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.flywaydb.core.internal.resource.classpath.ClassPathResource: int hashCode()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.HashMap: int hash(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.ir.operands.Label: int hashCode()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.ReduceOps$2ReducingSink: void accept(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.HashMap$Node: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.RegularEnumSet: int size()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><com.fasterxml.jackson.databind.node.DoubleNode: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.html_tampering.HtmlTamperingTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.EnumMap$ValueIterator: java.lang.Object next()>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>-><io.undertow.util.HeaderValues: java.lang.Object[] toArray()>
<org.hsqldb.lib.HashMappedList: boolean add(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><io.jsonwebtoken.impl.JwtMap: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hibernate.boot.model.relational.Namespace: boolean equals(java.lang.Object)>
<java.util.jar.Attributes: void putAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.text.AttributeEntry: java.lang.Object getValue()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.authentication.WebAuthenticationDetails: java.lang.String toString()>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.net.Inet6Address: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.IdentityHashMap$EntrySet: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: int hashCode()>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.webwolf_introduction.MailAssignment: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.awt.image.ColorModel: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.security.CodeSigner: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.ir.IRScope: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.runtime.Arity: int hashCode()>
<org.springframework.boot.convert.StringToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.spi.Provider: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.PropertyPermission: boolean equals(java.lang.Object)>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set getTimedAnnotations(org.springframework.web.method.HandlerMethod)>-><java.util.RegularEnumSet: boolean isEmpty()>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson4$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.springframework.validation.BindException: java.lang.String getObjectName()>-><org.springframework.validation.BindException: java.lang.String getObjectName()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$SpinedNodeBuilder: void accept(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.jsoup.helper.ChangeNotifyingArrayList: void clear()>-><org.jsoup.nodes.Element$NodeList: void onContentsChanged()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.AbstractSet: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: int size()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>-><javax.servlet.ServletRequestWrapper: boolean isAsyncStarted()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><org.jruby.RubyHash$BaseSet: java.util.Iterator iterator()>
<org.hsqldb.lib.MultiValueHashMap: org.hsqldb.lib.Iterator get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.field.MillisDurationField: int hashCode()>
<org.hsqldb.map.BaseHashMap$ValuesIterator: java.lang.Object next()>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: boolean last()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCStatement: void close()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.javasupport.JavaObject: int hashCode()>
<sun.security.util.DisabledAlgorithmConstraints$Constraints: boolean permits(java.security.Key)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.security.web.header.Header: boolean equals(java.lang.Object)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.util.MimeType: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.joda.time.chrono.GJCacheKey: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>-><java.util.ArrayDeque: int size()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.joda.time.base.AbstractDuration: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>
<org.springframework.web.context.request.ServletRequestAttributes: void setAttribute(java.lang.String,java.lang.Object,int)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<org.hsqldb.lib.OrderedHashSet: int getIndex(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: java.lang.String getString()>
<com.thoughtworks.xstream.core.util.WeakCache$1: java.lang.Object visit(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<org.xnio.OptionMap: boolean get(org.xnio.Option,boolean)>-><java.util.HashMap: java.lang.Object get(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: java.util.List getItemsInBasket(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.ClobDataID: boolean equals(java.lang.Object)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>-><java.time.Duration: java.lang.String toString()>
<java.util.TreeMap$Entry: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.lang.Long: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><sun.util.locale.provider.RuleBasedBreakIterator: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.security.x509.Extension: boolean equals(java.lang.Object)>
<org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Date: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson10$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.ScopeModule: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson13: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.DOMCrossSiteScriptingVerifier$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map$Entry)>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
<java.lang.ProcessEnvironment$StringEntrySet: void clear()>-><java.util.HashMap$EntrySet: void clear()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.ir.operands.Fixnum: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.POJONode: int hashCode()>
<org.springframework.web.util.UriComponents: java.lang.String getVariableValueAsString(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter: java.lang.Enum convert(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashMap$Values: java.util.Iterator iterator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hibernate.engine.query.spi.QueryPlanCache$DynamicFilterKey: boolean equals(java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Map _buildAliasMapping(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<com.nulabinc.zxcvbn.matchers.L33tMatcher: java.util.List execute(java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<org.hsqldb.persist.HsqlProperties: boolean validateProperty(java.lang.String,int)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.time.LocalDateTime: boolean equals(java.lang.Object)>
<io.undertow.servlet.spec.HttpServletResponseImpl: void setStatus(int)>-><io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setStatusCode(int)>
<java.util.Hashtable: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: java.util.List getRankings(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.String toString()>
<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<com.google.common.collect.Maps$Values: void clear()>-><java.util.Collections$UnmodifiableMap: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$SynchronizedList: int hashCode()>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><java.util.Collections$UnmodifiableSortedSet: java.util.Comparator comparator()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey: void <init>(java.lang.Class,java.lang.Class,java.lang.Object)>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.springframework.cglib.proxy.BridgeMethodResolver$BridgedFinder: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>-><com.google.common.collect.Maps$EntrySet: boolean remove(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.xss.CrossSiteScriptingLesson6a getCrossSiteScriptingLesson6a()>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>-><io.undertow.util.HeaderValues: boolean contains(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><javax.management.ImmutableDescriptor: int hashCode()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey: int hashCode()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.WeakHashMap$HashIterator: boolean hasNext()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.RubyHash$BaseCollection: int size()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>-><javax.servlet.ServletRequestWrapper: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.ArrayDeque$DeqSpliterator: boolean tryAdvance(java.util.function.Consumer)>-><java.util.stream.Nodes$FixedNodeBuilder: void accept(java.lang.Object)>
<java.util.AbstractMap: java.lang.String toString()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Hashtable$EntrySet: void clear()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.AbstractMap: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.Row: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: void <init>(com.google.common.collect.Multimaps$Keys$1,java.util.Map$Entry)>-><com.google.common.collect.Multisets$AbstractEntry: void <init>()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.core.io.UrlResource: int hashCode()>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson1$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.xss.CrossSiteScriptingLesson1 getCrossSiteScriptingLesson1()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.Package: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.time.chrono.AbstractChronology: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.Vector: int size()>
<java.lang.Object: java.lang.String toString()>-><java.time.OffsetDateTime: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.format.support.FormattingConversionService$AnnotationConverterKey: int hashCode()>
<org.owasp.webgoat.idor.IDORDiffAttributes$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.sun.jmx.mbeanserver.NamedObject: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.flywaydb.core.api.Location: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$StringKeySet: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>
<javax.security.auth.Subject$SecureSet: void clear()>-><java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.HashMap$Node: java.lang.Object getValue()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.HashMap$EntrySet: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><javax.management.MBeanAttributeInfo: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.sun.jmx.mbeanserver.WeakIdentityHashMap$IdentityWeakReference: boolean equals(java.lang.Object)>
<org.springframework.security.authentication.AuthenticationTrustResolverImpl: boolean isAnonymous(org.springframework.security.core.Authentication)>-><java.lang.Object: java.lang.Class getClass()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<org.hsqldb.map.BaseHashMap: boolean containsKey(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webwolf.WebWolf: void main(java.lang.String[])>-><org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: void <init>()>
<java.lang.Object: java.lang.String toString()>-><org.jcodings.Encoding: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.Indexer$CollectionIndexingValueRef: org.springframework.expression.TypedValue getValue()>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.jruby.RubyHash$BaseCollection: void clear()>-><org.jruby.RubyHash: void clear()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><java.util.ArrayDeque$DeqIterator: java.lang.Object next()>
<org.owasp.webgoat.secure_password.SecurePasswordsAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.util.calendar.ZoneInfo: int hashCode()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.lang.ProcessEnvironment$StringEntry: java.lang.Object getValue()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.reflect.Parameter: int hashCode()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.cia.CIAQuiz: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$KeySetView: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.factory.config.DependencyDescriptor: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.SubList: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.RegularEnumSet: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.math.BigInteger: boolean equals(java.lang.Object)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)>
<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.owasp.webgoat.crypto.HashingAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.text.RuleBasedCollator: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.logging.Level: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.CodeSigner: boolean equals(java.lang.Object)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: boolean weakCompareAndSet(java.lang.Object,int,int)>-><java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: void accessCheck(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson3$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Object: boolean equals(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><com.thoughtworks.xstream.converters.collections.TreeSetConverter$1$1: int size()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity vote(int,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.LocalDate: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyModule: boolean equals(java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.chrome_dev_tools.NetworkLesson: void <init>()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.ir.operands.TemporaryVariable: int hashCode()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.EnumMap$KeyIterator: java.lang.Object next()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>
<org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: java.lang.String toString()>
<org.jruby.ir.operands.ClosureLocalVariable: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.EnumMap$EnumMapIterator: boolean hasNext()>
<java.lang.Object: java.lang.String toString()>-><java.time.YearMonth: int hashCode()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.chrome_dev_tools.NetworkDummy getNetworkDummy()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.TreeMap$KeyIterator: java.lang.Object next()>
<io.undertow.servlet.spec.HttpServletResponseImpl: void addCookie(javax.servlet.http.Cookie)>-><java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: java.lang.String showForm(org.owasp.webwolf.user.UserForm,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.text.MessageFormat: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge1.Assignment1$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment: org.springframework.web.servlet.ModelAndView illegalCall()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.text.AttributedCharacterIterator$Attribute: int hashCode()>
<org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver: java.lang.Object buildLazyResolutionProxy(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String)>-><org.springframework.aop.framework.ProxyFactory: void <init>()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.Vector: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.security.AllPermission: boolean equals(java.lang.Object)>
<org.owasp.webgoat.challenges.challenge5.Assignment5$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.FieldPosition: boolean equals(java.lang.Object)>
<org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.bypass_restrictions.BypassRestrictionsFrontendValidation getBypassRestrictionsFrontendValidation()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><sun.security.provider.PolicyFile$SelfPermission: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.Hashtable: java.lang.String toString()>-><org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$EmptyMap: boolean isEmpty()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer extractPathWithinApplication(org.springframework.http.server.PathContainer,org.springframework.http.server.PathContainer)>-><java.util.Collections$UnmodifiableCollection: int size()>
<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.beans.factory.config.BeanDefinitionHolder: int hashCode()>
<org.owasp.webwolf.FileServer$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webwolf.FileServer getFileServer()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.validation.BindException: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignmentForgotPassword$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.users.Scoreboard$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: int size()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.security.CodeSource: int hashCode()>
<org.springframework.http.server.reactive.ServerHttpResponseDecorator: void <init>(org.springframework.http.server.reactive.ServerHttpResponse)>-><java.lang.Object: void <init>()>
<org.hsqldb.map.BaseHashMap: int getLookup(java.lang.Object,int)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.springframework.http.converter.json.MappingJacksonValue getVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: java.lang.String getString()>
<org.springframework.expression.spel.ast.OpLT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.ArrayList: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.AbstractSet: int hashCode()>
<java.lang.Object: java.lang.String toString()>-><java.time.format.DecimalStyle: int hashCode()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCConnection: void close()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: int size()>
<org.owasp.webgoat.password_reset.SimpleMailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.springframework.cglib.core.MethodInfo: int hashCode()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.WeakHashMap: java.util.Set entrySet()>
<org.springframework.http.server.DefaultRequestPath: void <init>(java.net.URI,java.lang.String)>-><org.springframework.http.server.DefaultRequestPath: org.springframework.http.server.PathContainer initContextPath(org.springframework.http.server.PathContainer,java.lang.String)>
<org.springframework.expression.spel.ast.Selection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<java.lang.Object: java.lang.String toString()>-><javax.management.openmbean.ArrayType: int hashCode()>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.ModelAndView mail(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<java.util.WeakHashMap: void putAll(java.util.Map)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.validation.BindException: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>-><java.util.HashMap$Node: java.lang.Object getKey()>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>-><java.util.ArrayDeque: java.util.Iterator iterator()>
<org.springframework.http.server.DefaultPathContainer: org.springframework.http.server.PathContainer subPath(org.springframework.http.server.PathContainer,int,int)>-><org.springframework.http.server.DefaultPathContainer: void <init>(java.lang.String,java.util.List)>
<io.undertow.util.Rfc6265CookieSupport: void validateCookieValue(java.lang.String)>-><java.lang.String: int length()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.nio.ByteBuffer: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.Short: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><javax.management.openmbean.TabularDataSupport: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: int size()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Set findTimedAnnotations(java.lang.reflect.AnnotatedElement)>-><org.springframework.core.annotation.MergedAnnotationCollectors: java.util.stream.Collector toAnnotationSet()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.util.MimeType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.cia.CIAQuiz getCIAQuiz()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.Hashtable$KeySet: void clear()>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.lang.StringBuilder: void <init>()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.expression.TypedValue: int hashCode()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.security.BasicPermission: boolean equals(java.lang.Object)>
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.core.OrderComparator: int compare(java.lang.Object,java.lang.Object)>
<org.springframework.http.HttpHeaders: void add(java.lang.String,java.lang.String)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: void add(java.lang.Object,java.lang.Object)>
<org.springframework.core.convert.support.CollectionToObjectConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<java.util.Collections$SynchronizedCollection: void clear()>-><java.util.ArrayDeque: void clear()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.hsqldb.lib.HashMappedList: java.lang.Object remove(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<java.util.Arrays: int hashCode(java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: void <init>(java.lang.String)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<org.owasp.webgoat.idor.IDORLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.security.ssl.ProtocolVersion: java.lang.String toString()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><com.fasterxml.jackson.databind.node.DecimalNode: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.beans.factory.support.GenericBeanDefinition: boolean equals(java.lang.Object)>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.AbstractFilterRegistrationBean: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.RubyFixnum: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><org.jruby.RubyArray: void clear()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>
<java.util.Collections$UnmodifiableCollection$1: void <init>(java.util.Collections$UnmodifiableCollection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><com.google.common.collect.Maps$EntrySet: int size()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.invoke.MemberName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.core.io.Resource getResourceByPath(java.lang.String)>-><org.springframework.web.context.support.ServletContextResource: void <init>(javax.servlet.ServletContext,java.lang.String)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.CharacterType: boolean equals(java.lang.Object)>
<javax.management.openmbean.CompositeDataSupport: boolean equals(java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView openPasswordReset(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.xss.DOMCrossSiteScripting$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equal(javax.management.openmbean.OpenMBeanParameterInfo,javax.management.openmbean.OpenMBeanParameterInfo)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.EnumMap$EntryIterator$Entry: int hashCode()>
<org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: java.lang.String getHint()>
<ch.qos.logback.core.joran.spi.Interpreter: void callBeginAction(java.util.List,java.lang.String,org.xml.sax.Attributes)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: void <init>(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet)>-><com.google.common.collect.Maps$TransformedEntriesMap$1: java.util.Iterator iterator()>
<org.owasp.webgoat.insecure_login.InsecureLoginTask$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>-><io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyHash: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.jruby.RubyHash$ConvertingEntry: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.awt.Point: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<io.undertow.server.HttpServerExchange: io.undertow.server.HttpServerExchange setResponseCookie(io.undertow.server.handlers.Cookie)>-><java.lang.String: boolean isEmpty()>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallenge$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getKey()>
<org.owasp.webgoat.webwolf_introduction.LandingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult click(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.lang.Character$Subset: boolean equals(java.lang.Object)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.Hashtable$Enumerator: boolean hasNext()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.springframework.core.env.PropertySource: boolean equals(java.lang.Object)>
<org.owasp.webwolf.user.RegistrationController$$InterceptorProxy: void <init>()>-><org.owasp.webwolf.user.RegistrationController: void <init>(org.owasp.webwolf.user.UserValidator,org.owasp.webwolf.user.UserService,org.springframework.security.authentication.AuthenticationManager)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>
<com.google.common.collect.Maps$10: java.lang.Object getKey()>-><java.text.AttributeEntry: java.lang.Object getKey()>
<java.lang.Object: java.lang.String toString()>-><java.time.ZoneOffset: int hashCode()>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>-><java.security.Provider: void checkInitialized()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.logging.Level: int hashCode()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.reflect.Proxy$Key2: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<java.util.TreeMap$Entry: int hashCode()>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.http.ResponseEntity resetPassword(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.HsqlException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.hsqldb.persist.CachedObjectBase: boolean equals(java.lang.Object)>
<sun.util.locale.provider.TimeZoneNameUtility: java.lang.String[][] loadZoneStrings(java.util.Locale)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.springframework.http.server.DefaultRequestPath: void validateContextPath(java.lang.String,java.lang.String)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.RegularEnumSet: boolean isEmpty()>
<org.springframework.boot.convert.StringToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper: java.lang.String toString()>
<io.jsonwebtoken.impl.DefaultJwtParser: void validateExpectedClaims(io.jsonwebtoken.Header,io.jsonwebtoken.Claims)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.FallbackObjectToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><ch.qos.logback.classic.spi.ClassPackagingData: boolean equals(java.lang.Object)>
<io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTRefreshEndpoint$$InterceptorProxy: org.springframework.http.ResponseEntity newToken(java.lang.String,java.util.Map,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.TreeMap$Entry: java.lang.Object getValue()>
<org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: org.springframework.core.io.Resource getResourceByPath(java.lang.String)>-><org.springframework.context.support.GenericApplicationContext: java.lang.ClassLoader getClassLoader()>
<io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>-><io.undertow.server.session.InMemorySessionManager$SessionImpl: java.lang.String getId()>
<org.owasp.webgoat.template.SampleAttack$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><com.thoughtworks.xstream.core.util.PresortedMap$1: java.lang.Object getValue()>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult sendPasswordResetLink(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<java.util.ArrayList: boolean remove(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>-><io.jsonwebtoken.impl.JwtMap: java.lang.Object get(java.lang.Object)>
<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)>-><com.google.common.collect.Maps$EntrySet: int size()>
<io.undertow.util.Rfc6265CookieSupport: void validateCookieValue(java.lang.String)>-><java.lang.String: char[] toCharArray()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.lang.invoke.LambdaForm: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedHashMap$LinkedEntrySet: void clear()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.annotation.AnnotationValue$ForEnumerationDescription: int hashCode()>
<java.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.x509.AVA: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<org.hsqldb.types.CharacterType: java.lang.Object convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyMatchData: int hashCode()>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><java.util.ArrayDeque: boolean isEmpty()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>-><org.springframework.validation.BindException: java.lang.String getMessage()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.LinkedHashMap$LinkedValues: int size()>
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean containsAll(java.util.Collection)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<org.hsqldb.lib.HashMap: java.lang.Object get(java.lang.Object)>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.Vector: int size()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<org.jruby.javasupport.binding.Initializer: void handleScalaSingletons(java.lang.Class,org.jruby.javasupport.binding.Initializer$State)>-><io.undertow.util.HeaderValues: int size()>
<org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: java.util.List invoke(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.client_side_filtering.Salaries$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<java.lang.Object: java.lang.String toString()>-><java.util.AbstractList: int hashCode()>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<java.util.AbstractMap: java.lang.String toString()>-><com.google.common.collect.TransformedIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.lang.invoke.MethodType: boolean equals(java.lang.Object)>
<javax.management.openmbean.TabularDataSupport: int hashCode()>-><org.springframework.validation.BindException: int hashCode()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.advanced.SqlInjectionChallengeLogin$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10a: void <init>()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.EnumMap$EntryIterator$Entry: java.lang.Object getKey()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.hsqldb.types.JavaObjectData: boolean equals(java.lang.Object)>
<org.springframework.core.convert.support.CollectionToCollectionConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>-><io.undertow.servlet.core.ManagedServlet: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter,java.lang.String)>-><java.lang.Object: void <init>()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<org.owasp.webgoat.challenges.challenge8.Assignment8$$InterceptorProxy: org.springframework.http.ResponseEntity average(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.challenges.challenge8.Assignment8: org.springframework.http.ResponseEntity average()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><io.undertow.util.HeaderValues$1: java.lang.Object next()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><javax.management.MBeanConstructorInfo: int hashCode()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><org.springframework.boot.actuate.endpoint.EndpointId: int hashCode()>
<java.util.LinkedHashSet: void <init>(java.util.Collection)>-><io.undertow.util.HeaderValues: int size()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object remove(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher: java.lang.String toString()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.jruby.RubyHash: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><ch.qos.logback.core.joran.spi.ElementSelector: int hashCode()>
<com.google.common.collect.TransformedIterator: java.lang.Object next()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.lang.Object next()>
<org.owasp.webgoat.path_traversal.ProfileUploadRemoveUserInput$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult uploadFileHandler(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<org.owasp.webgoat.crypto.SigningAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: void <init>(org.springframework.web.servlet.resource.ResourceUrlProvider)>
<java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>-><org.springframework.security.core.userdetails.User: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson6a$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setHandlerMap(java.util.Map)>
<org.springframework.util.LinkedMultiValueMap: void add(java.lang.Object,java.lang.Object)>-><io.undertow.util.HeaderValues: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: java.text.DateFormat _force(java.text.DateFormat,java.util.TimeZone)>-><java.text.SimpleDateFormat: java.lang.Object clone()>
<org.jruby.util.CodegenUtils: void visitAnnotationFields(org.jruby.org.objectweb.asm.AnnotationVisitor,java.util.Map)>-><sun.security.ssl.CipherSuite: java.lang.String toString()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.node.ArrayNode: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.owasp.webgoat.crypto.XOREncodingAssignment$$InterceptorProxy: void <init>()>-><synthetic.method.SingletonFactory: org.owasp.webgoat.crypto.XOREncodingAssignment getXOREncodingAssignment()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.Collections$EmptyIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>-><net.bytebuddy.asm.AsmVisitorWrapper$ForDeclaredMethods$Entry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setPathMatcher(org.springframework.util.PathMatcher)>
<org.jruby.RubyHash: void putAll(java.util.Map)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.http.server.reactive.NettyHeadersAdapter: java.util.List get(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter: boolean containsKey(java.lang.Object)>
<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>-><org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver: java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.concurrent.ConcurrentHashMap$EntryIterator: java.lang.Object next()>
<org.hsqldb.map.BaseHashMap: java.lang.Object removeObject(java.lang.Object,boolean)>-><com.google.common.collect.Multisets$AbstractEntry: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: java.util.Iterator iterator()>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson2: org.owasp.webgoat.assignments.AttackResult injectableQuery(java.lang.String)>-><org.hsqldb.jdbc.JDBCResultSet: java.lang.String getString(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Maps$EntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: boolean remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getKey()>
<java.lang.Object: java.lang.String toString()>-><org.jruby.javasupport.JavaMethod: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)>-><com.google.common.collect.Maps$10: java.lang.Object getValue()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean contains(java.lang.Object)>-><java.util.EnumMap$EntrySet: int size()>
<org.springframework.boot.web.servlet.context.WebApplicationContextServletContextAwareProcessor: javax.servlet.ServletConfig getServletConfig()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: javax.servlet.ServletConfig getServletConfig()>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><org.jruby.ir.operands.StringLiteral: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><javax.net.ssl.SNIHostName: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hsqldb.types.TimeData: boolean equals(java.lang.Object)>
<java.lang.invoke.InvokerBytecodeGenerator: java.lang.String debugString(java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>-><com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><javax.management.openmbean.OpenMBeanAttributeInfoSupport: boolean equals(java.lang.Object)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: boolean hasNext()>
<org.hsqldb.types.DateTimeType: java.lang.Object convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)>-><org.springframework.boot.actuate.endpoint.EndpointId: java.lang.String toString()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.springframework.security.web.util.matcher.AnyRequestMatcher: int hashCode()>
<com.google.common.collect.Maps$10: java.lang.Object getValue()>-><java.text.AttributeEntry: java.lang.Object getValue()>
<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<com.sun.jmx.mbeanserver.Util: int hashCode(java.lang.String[],java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.owasp.webgoat.chrome_dev_tools.NetworkLesson$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.chrome_dev_tools.NetworkLesson: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,java.lang.String)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<org.owasp.webgoat.challenges.challenge7.Assignment7$$InterceptorProxy: org.springframework.core.io.ClassPathResource git(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.expression.spel.standard.SpelCompiler: org.springframework.expression.spel.CompiledExpression compile(org.springframework.expression.spel.ast.SpelNodeImpl)>-><org.springframework.expression.spel.ast.QualifiedIdentifier: java.lang.String toStringAST()>
<com.google.common.collect.Maps$7: void <init>(com.google.common.base.Function)>-><java.lang.Object: void <init>()>
<com.thoughtworks.xstream.converters.extended.FontConverter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.owasp.webgoat.sql_injection.mitigation.SqlOnlyInputValidation: void <init>(org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a)>-><org.owasp.webgoat.sql_injection.advanced.SqlInjectionLesson6a$$InterceptorProxy: void <init>()>
<org.owasp.webgoat.cia.CIAQuiz$$InterceptorProxy: boolean[] getResults(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><javax.management.openmbean.CompositeType: boolean equals(java.lang.Object)>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>
<org.owasp.webgoat.sql_injection.mitigation.SqlInjectionLesson10b$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.hibernate.boot.model.relational.Namespace: boolean equals(java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>-><com.google.common.collect.Maps$TransformedEntriesMap: int size()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.AbstractMapEntry: java.lang.String toString()>
<org.owasp.webgoat.path_traversal.ProfileUploadRetrieval$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult execute(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><synthetic.method.SingletonFactory: org.springframework.boot.actuate.metrics.web.servlet.DefaultWebMvcTagsProvider getWebMvcTagsProvider()>
<sun.security.ssl.JsseJce$SunCertificates$1: java.lang.Object run()>-><java.util.AbstractMap$1$1: boolean hasNext()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<org.springframework.context.support.AbstractApplicationContext: void doClose()>-><org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext: void onClose()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>
<java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>-><sun.security.ssl.SSLSessionImpl: int hashCode()>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.String toString()>-><java.security.cert.X509CRLEntry: int hashCode()>
<org.jruby.ir.representations.IGVCFGVisitor: void visitEdges(org.jruby.ir.representations.CFG)>-><io.undertow.util.HeaderValues: java.util.Iterator iterator()>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><org.springframework.boot.web.server.MimeMappings$Mapping: boolean equals(java.lang.Object)>
<org.owasp.webgoat.idor.IDORViewOwnProfileAltUrl: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String)>-><org.owasp.webgoat.lessons.Hint: boolean equals(java.lang.Object)>
<org.owasp.webgoat.jwt.JWTFinalEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>-><org.owasp.webgoat.lessons.Hint: int hashCode()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serialize(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><io.undertow.util.HeaderValues: int size()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.util.JumboEnumSet: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.util.Collections$UnmodifiableList: int hashCode()>
<org.springframework.core.io.buffer.NettyDataBufferFactory: void <init>(io.netty.buffer.ByteBufAllocator)>-><org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
<com.google.common.collect.Maps$EntrySet: int size()>-><com.google.common.collect.Maps$TransformedEntriesMap: int size()>
<org.owasp.webgoat.chrome_dev_tools.NetworkDummy$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.boot.convert.NumberToDurationConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.security.core.userdetails.User: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<org.owasp.webgoat.jwt.JWTVotesEndpoint$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult resetVotes(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><sun.security.x509.AVA: int hashCode()>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.deserialization.InsecureDeserializationTask$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><com.google.common.collect.Multimaps$Keys$KeysEntrySet: java.util.Iterator iterator()>
<org.springframework.http.server.reactive.ReactorServerHttpRequest: java.net.URI resolveBaseUrl(reactor.netty.http.server.HttpServerRequest)>-><org.springframework.http.server.reactive.ReactorServerHttpRequest: java.lang.String getScheme(reactor.netty.http.server.HttpServerRequest)>
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean equals(java.lang.Object)>-><org.springframework.security.authentication.AbstractAuthenticationToken: java.lang.Object getDetails()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>
<org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>-><java.lang.StringBuilder: void <init>()>
<org.owasp.webgoat.challenges.challenge5.Assignment5: org.owasp.webgoat.assignments.AttackResult login(java.lang.String,java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean isDependent(java.lang.String,java.lang.String,java.util.Set)>-><io.undertow.util.HeaderValues$1: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<java.util.Collections$SynchronizedCollection: void clear()>-><io.undertow.util.HeaderValues: void clear()>
<java.util.IdentityHashMap: void putAll(java.util.Map)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<org.jruby.javasupport.JavaObject: org.jruby.runtime.builtin.IRubyObject to_s(org.jruby.Ruby,java.lang.Object)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.SortedOps$RefSortingSink: void accept(java.lang.Object)>
<java.util.ArrayDeque: boolean contains(java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.time.YearMonth: int hashCode()>
<java.util.concurrent.ConcurrentHashMap$MapEntry: boolean equals(java.lang.Object)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: java.lang.Object getValue()>
<java.lang.Object: java.lang.String toString()>-><net.bytebuddy.description.annotation.AnnotationDescription$AbstractBase: int hashCode()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<com.google.common.collect.TransformedIterator: boolean hasNext()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>
<org.springframework.security.authentication.AbstractAuthenticationToken: int hashCode()>-><java.lang.String: int hashCode()>
<org.owasp.webwolf.mailbox.MailboxController$$InterceptorProxy: java.util.concurrent.Callable sendEmail(org.owasp.webwolf.mailbox.Email,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><javax.net.ssl.SNIHostName: java.lang.String toString()>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>-><io.undertow.servlet.spec.HttpSessionImpl: int hashCode()>
<com.google.common.collect.Maps$Values: java.util.Iterator iterator()>-><java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>
<org.hsqldb.Table: void insertFromScript(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object[])>-><com.google.common.collect.AbstractMapEntry: boolean equals(java.lang.Object)>
<io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>-><java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.lang.String: int hashCode()>
<org.hsqldb.Table: void insertNoCheckFromLog(org.hsqldb.Session,java.lang.Object[])>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<org.owasp.webgoat.sql_injection.introduction.SqlInjectionLesson8: org.owasp.webgoat.assignments.AttackResult injectableQueryConfidentiality(java.lang.String,java.lang.String)>-><com.zaxxer.hikari.util.DriverDataSource: java.sql.Connection getConnection()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>-><org.springframework.validation.BindException: int hashCode()>
<java.util.Arrays$NaturalOrder: int compare(java.lang.Object,java.lang.Object)>-><sun.security.ssl.CipherSuite: int compareTo(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: void <init>()>-><org.owasp.webgoat.webwolf_introduction.MailAssignment: void <init>(org.springframework.web.client.RestTemplate,java.lang.String)>
<java.util.ArrayDeque$DeqSpliterator: void forEachRemaining(java.util.function.Consumer)>-><java.util.stream.Nodes$SizedCollectorTask$OfRef: void accept(java.lang.Object)>
<org.owasp.webgoat.webwolf_introduction.MailAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<org.owasp.webgoat.xss.CrossSiteScriptingLesson5a$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<java.util.AbstractCollection: void clear()>-><jnr.constants.ConstantSet$ConstantIterator: void remove()>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: boolean equals(java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.jruby.javasupport.JavaConstructor: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>-><org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher: java.lang.String toString()>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: boolean containsKey(java.lang.Object)>-><sun.security.ssl.CipherSuite$KeyExchange: java.lang.String toString()>
<org.owasp.webgoat.xss.CrossSiteScriptingQuiz$$InterceptorProxy: org.springframework.web.servlet.resource.ResourceUrlProvider getResourceUrlProviderInstance()>-><org.springframework.web.servlet.resource.ResourceUrlProvider: void <init>()>
<org.springframework.expression.spel.ast.Operator: boolean equalityCheck(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object)>-><io.undertow.util.SimpleAttachmentKey: java.lang.String toString()>
<java.util.Vector: int indexOf(java.lang.Object,int)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>
<org.owasp.webgoat.service.LabelDebugService$$InterceptorProxy: org.springframework.http.ResponseEntity setDebuggingStatus(java.lang.Boolean,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: boolean preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.beans.PropertyDescriptor: boolean equals(java.lang.Object)>
<java.util.AbstractSet: int hashCode()>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>-><org.springframework.boot.actuate.endpoint.invoke.reflect.OperationMethodParameter: java.lang.String toString()>
<io.undertow.util.HeaderValues: int indexOf(java.lang.Object)>-><java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>-><org.springframework.boot.web.server.MimeMappings$Mapping: int hashCode()>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: boolean weakCompareAndSet(java.lang.Object,int,int)>-><sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>
<org.thymeleaf.standard.expression.OGNLExpressionObjectsWrapper: java.lang.Object get(java.lang.Object)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.owasp.webgoat.crypto.EncodingAssignment$$InterceptorProxy: org.owasp.webgoat.assignments.AttackResult completed(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse)>-><org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor: void <init>(org.springframework.core.convert.ConversionService)>
<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>-><org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredEndpoint: java.lang.String toString()>
<org.jruby.specialized.RubyArrayTwoObject: org.jruby.runtime.builtin.IRubyObject rb_clear()>-><org.jruby.RubyArray: org.jruby.runtime.builtin.IRubyObject rb_clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Map)>-><java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
<java.util.Collections$SynchronizedCollection: int size()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$1: int size()>
<org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: java.util.Collection getLongTaskTimerSamples(javax.servlet.http.HttpServletRequest,java.lang.Object,java.util.Set)>-><java.util.Collection: java.util.stream.Stream stream()>
<com.google.common.collect.Multimaps$Keys$1$1: int getCount()>-><java.util.concurrent.ConcurrentHashMap$CollectionView: int size()>
<org.jruby.javasupport.JavaObject: int hashCode()>-><org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey: int hashCode()>
<org.springframework.boot.convert.NumberToDataSizeConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>-><org.springframework.boot.web.server.MimeMappings$Mapping: java.lang.String toString()>
<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>-><org.springframework.web.filter.GenericFilterBean: void afterPropertiesSet()>
<com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>-><org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.lang.Object next()>
<io.undertow.server.handlers.cache.LRUCache: void add(java.lang.Object,java.lang.Object)>-><io.undertow.server.handlers.cache.LRUCache$CacheEntry: void setValue(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.apache.logging.log4j.Level: int hashCode()>
<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.ValueRef getValueRef(org.springframework.expression.spel.ExpressionState)>-><java.util.ArrayDeque$DeqIterator: boolean hasNext()>
<java.util.concurrent.ConcurrentHashMap: int hashCode()>-><org.springframework.security.core.userdetails.User: int hashCode()>
<org.owasp.webgoat.ssrf.SSRFTask2: org.owasp.webgoat.assignments.AttackResult furBall(java.lang.String)>-><java.lang.String: boolean matches(java.lang.String)>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><org.owasp.webgoat.lessons.Assignment: int hashCode()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.jruby.RubyBoolean: int hashCode()>
<io.undertow.util.HeaderValues: boolean addAll(java.util.Collection)>-><java.util.JumboEnumSet$EnumSetIterator: java.lang.Object next()>
<org.owasp.webgoat.password_reset.ResetLinkAssignment$$InterceptorProxy: org.springframework.web.servlet.ModelAndView illegalCall(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void afterCompletion(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)>
<org.springframework.validation.AbstractBindingResult: boolean equals(java.lang.Object)>-><org.springframework.validation.AbstractBindingResult: java.lang.String getObjectName()>
<java.text.AttributeEntry: boolean equals(java.lang.Object)>-><org.springframework.validation.BindException: boolean equals(java.lang.Object)>
<org.owasp.webgoat.path_traversal.ProfileUploadFix$$InterceptorProxy: org.springframework.http.ResponseEntity getProfilePicture(javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>-><org.springframework.boot.actuate.metrics.web.servlet.LongTaskTimingHandlerInterceptor: void <init>(io.micrometer.core.instrument.MeterRegistry,org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider)>
<java.util.Hashtable: boolean equals(java.lang.Object)>-><com.google.common.collect.Multisets$AbstractEntry: boolean equals(java.lang.Object)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>-><sun.security.ssl.ProtocolVersion: int compareTo(java.lang.Object)>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><org.hsqldb.persist.CachedObjectBase: int hashCode()>
<org.jruby.org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>-><org.owasp.webgoat.lessons.Hint: java.lang.String toString()>
<com.google.common.collect.Multisets$AbstractEntry: int hashCode()>-><java.util.IdentityHashMap: int hashCode()>
<org.jruby.javasupport.JavaArray: int hashCode()>-><com.google.common.collect.AbstractMapEntry: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.Collections$UnmodifiableCollection: int size()>
<com.google.common.collect.AbstractMapEntry: int hashCode()>-><java.io.ObjectStreamClass$WeakClassKey: int hashCode()>
<com.google.common.collect.Multimaps$Keys$KeysEntrySet: boolean remove(java.lang.Object)>-><java.util.LinkedHashMap$LinkedKeySet: void clear()>
<org.springframework.core.style.DefaultValueStyler: java.lang.String style(java.util.Collection)>-><java.util.HashSet: java.util.Iterator iterator()>
<org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator: java.util.Map$Entry next()>-><org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry: void <init>(org.springframework.http.server.reactive.NettyHeadersAdapter,java.lang.String)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>-><com.google.common.collect.Maps$EntrySet: int size()>
